//
//Generated by lua
//2009-2012	(C) XianFeng Inc. Reserved
//

#ifndef _MSG_MAIL_H_INCLUDED
#define _MSG_MAIL_H_INCLUDED

#include "category.h"
#include "common/Message.h"

struct Mail
{
public:
	Mail()
	{
		pid = 0;
		mid = 0;
		readed = 0;
		got = 0;
		ctime = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 14;
		length += sizeof(short) + title.size();
		length += sizeof(short) + content.size();
		length += sizeof(short) + items.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << pid;
		s << mid;
		s << title;
		s << content;
		s << items;
		s << readed;
		s << got;
		s << ctime;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> pid;
		s >> mid;
		s >> title;
		s >> content;
		s >> items;
		s >> readed;
		s >> got;
		s >> ctime;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "mid", mid);
		lua::settable(L, -1, "title", title);
		lua::settable(L, -1, "content", content);
		lua::settable(L, -1, "items", items);
		lua::settable(L, -1, "readed", readed);
		lua::settable(L, -1, "got", got);
		lua::settable(L, -1, "ctime", ctime);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",mid=" << mid;
		buffer << ",title=" << title;
		buffer << ",content=" << content;
		buffer << ",items=" << items;
		buffer << ",readed=" << readed;
		buffer << ",got=" << got;
		buffer << ",ctime=" << ctime;
	}

public:
	int pid;
	int mid;
	std::string title;
	std::string content;
	std::string items;
	char readed;
	char got;
	int ctime;
};

class MsgSyncMailsNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_MAIL, Id = 1 };

	MsgSyncMailsNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgSyncMailsNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < mails.size(); ++i)
		{
			length += mails[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short mails_vector_size = (short)mails.size();
		s << mails_vector_size;
		if (mails_vector_size > 0)
		{
			for (auto it = mails.begin(); it != mails.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int mails_vector_size = s.read_int16();
		mails.clear();
		while (mails_vector_size > 0)
		{
			mails_vector_size--;
			Mail val;
			val.unserialize(s, false);
			mails.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < mails.size(); ++i)
		{
			mails[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "mails");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "mails=[";
		for (size_t i = 0; i < mails.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			mails[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<Mail> mails;
};

class MsgAddMailNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_MAIL, Id = 2 };

	MsgAddMailNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgAddMailNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += mail.getLength(false);
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		mail.serialize(s, false);
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		mail.unserialize(s, false);
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		mail.push(L);
		lua::settable(L, -1, "mail");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "mail={";
		mail.dump(buffer);
		buffer << "}";
	}

public:
	Mail mail;
};

class MsgDeleteMailRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_MAIL, Id = 3 };

	MsgDeleteMailRequest() :
		Message(Category, Id)
	{
		mid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDeleteMailRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << mid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> mid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "mid", mid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "mid=" << mid;
	}

public:
	int mid;
};

class MsgDeleteMailResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_MAIL, Id = 4 };

	MsgDeleteMailResponse() :
		Message(Category, Id)
	{
		mid = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDeleteMailResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << mid;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> mid;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "mid", mid);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "mid=" << mid;
		buffer << ",errcode=" << errcode;
	}

public:
	int mid;
	short errcode;
};

class MsgDeleteReadedMailsRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_MAIL, Id = 5 };

	MsgDeleteReadedMailsRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgDeleteReadedMailsRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgDeleteReadedMailsResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_MAIL, Id = 6 };

	MsgDeleteReadedMailsResponse() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgDeleteReadedMailsResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		length += mids.size() * 4;
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short mids_vector_size = (short)mids.size();
		s << mids_vector_size;
		if (mids_vector_size > 0)
		{
			for (auto it = mids.begin(); it != mids.end(); ++it)
			{
				s << *it;
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int mids_vector_size = s.read_int16();
		mids.clear();
		while (mids_vector_size > 0)
		{
			mids_vector_size--;
			int val;
			s >> val;
			mids.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < mids.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, mids[i]);
		}
		lua::settable(L, -2, "mids");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "mids=[";
		for (size_t i = 0; i < mids.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << mids[i];
		}
		buffer << "]";
	}

public:
	std::vector<int> mids;
};

class MsgSetMailReadedRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_MAIL, Id = 7 };

	MsgSetMailReadedRequest() :
		Message(Category, Id)
	{
		mid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSetMailReadedRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << mid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> mid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "mid", mid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "mid=" << mid;
	}

public:
	int mid;
};

class MsgSetMailReadedResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_MAIL, Id = 8 };

	MsgSetMailReadedResponse() :
		Message(Category, Id)
	{
		mid = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSetMailReadedResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << mid;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> mid;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "mid", mid);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "mid=" << mid;
		buffer << ",errcode=" << errcode;
	}

public:
	int mid;
	short errcode;
};

class MsgGetMailItemRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_MAIL, Id = 9 };

	MsgGetMailItemRequest() :
		Message(Category, Id)
	{
		mid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetMailItemRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << mid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> mid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "mid", mid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "mid=" << mid;
	}

public:
	int mid;
};

class MsgGetMailItemResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_MAIL, Id = 10 };

	MsgGetMailItemResponse() :
		Message(Category, Id)
	{
		mid = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetMailItemResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << mid;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> mid;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "mid", mid);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "mid=" << mid;
		buffer << ",errcode=" << errcode;
	}

public:
	int mid;
	short errcode;
};

class MsgRecvMaillAllRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_MAIL, Id = 11 };

	MsgRecvMaillAllRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgRecvMaillAllRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgRecvMaillAllResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_MAIL, Id = 12 };

	MsgRecvMaillAllResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRecvMaillAllResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 2;
		length += sizeof(short);
		length += readed_mids.size() * 4;
		length += sizeof(short);
		length += got_mids.size() * 4;
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		short readed_mids_vector_size = (short)readed_mids.size();
		s << readed_mids_vector_size;
		if (readed_mids_vector_size > 0)
		{
			for (auto it = readed_mids.begin(); it != readed_mids.end(); ++it)
			{
				s << *it;
			}
		}
		short got_mids_vector_size = (short)got_mids.size();
		s << got_mids_vector_size;
		if (got_mids_vector_size > 0)
		{
			for (auto it = got_mids.begin(); it != got_mids.end(); ++it)
			{
				s << *it;
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		int readed_mids_vector_size = s.read_int16();
		readed_mids.clear();
		while (readed_mids_vector_size > 0)
		{
			readed_mids_vector_size--;
			int val;
			s >> val;
			readed_mids.push_back(val);
		}
		int got_mids_vector_size = s.read_int16();
		got_mids.clear();
		while (got_mids_vector_size > 0)
		{
			got_mids_vector_size--;
			int val;
			s >> val;
			got_mids.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::newtable(lua::L);
		for (size_t i = 0; i < readed_mids.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, readed_mids[i]);
		}
		lua::settable(L, -2, "readed_mids");
		lua::newtable(lua::L);
		for (size_t i = 0; i < got_mids.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, got_mids[i]);
		}
		lua::settable(L, -2, "got_mids");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",readed_mids=[";
		for (size_t i = 0; i < readed_mids.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << readed_mids[i];
		}
		buffer << "]";
		buffer << ",got_mids=[";
		for (size_t i = 0; i < got_mids.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << got_mids[i];
		}
		buffer << "]";
	}

public:
	short errcode;
	std::vector<int> readed_mids;
	std::vector<int> got_mids;
};

#endif	//_MSG_MAIL_H_INCLUDED
