//
//Generated by lua
//2009-2012	(C) XianFeng Inc. Reserved
//

#ifndef _MSG_HTTP_H_INCLUDED
#define _MSG_HTTP_H_INCLUDED

#include "category.h"
#include "common/Message.h"

class MsgHttpRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_HTTP, Id = 112 };

	MsgHttpRequest() :
		Message(Category, Id)
	{
		type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgHttpRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 1;
		length += sizeof(short) + url.size();
		length += sizeof(short) + auth.size();
		length += sizeof(short) + doc.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << type;
		s << url;
		s << auth;
		s << doc;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> type;
		s >> url;
		s >> auth;
		s >> doc;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "url", url);
		lua::settable(L, -1, "auth", auth);
		lua::settable(L, -1, "doc", doc);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
		buffer << ",url=" << url;
		buffer << ",auth=" << auth;
		buffer << ",doc=" << doc;
	}

public:
	char type;
	std::string url;
	std::string auth;
	std::string doc;
};

class MsgHttpResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_HTTP, Id = 113 };

	MsgHttpResponse() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgHttpResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short) + rsp.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << rsp;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> rsp;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "rsp", rsp);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "rsp=" << rsp;
	}

public:
	std::string rsp;
};

#endif	//_MSG_HTTP_H_INCLUDED
