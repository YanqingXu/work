//
//Generated by lua
//2009-2012	(C) XianFeng Inc. Reserved
//

#ifndef _MSG_LOGIN_H_INCLUDED
#define _MSG_LOGIN_H_INCLUDED

#include "category.h"
#include "common/Message.h"

struct PlayerInfo
{
public:
	PlayerInfo()
	{
		pid = 0;
		reborn = 0;
		level = 0;
		Gender = 0;
		mclass = 0;
		sid = 0;
		sceneid = 0;
		posx = 0;
		posy = 0;
		cloth = 0;
		weapon = 0;
		wings = 0;
		is_transfer = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 34;
		length += sizeof(short) + PlayerName.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << pid;
		s << reborn;
		s << level;
		s << PlayerName;
		s << Gender;
		s << mclass;
		s << sid;
		s << sceneid;
		s << posx;
		s << posy;
		s << cloth;
		s << weapon;
		s << wings;
		s << is_transfer;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> pid;
		s >> reborn;
		s >> level;
		s >> PlayerName;
		s >> Gender;
		s >> mclass;
		s >> sid;
		s >> sceneid;
		s >> posx;
		s >> posy;
		s >> cloth;
		s >> weapon;
		s >> wings;
		s >> is_transfer;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "reborn", reborn);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "PlayerName", PlayerName);
		lua::settable(L, -1, "Gender", Gender);
		lua::settable(L, -1, "mclass", mclass);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "sceneid", sceneid);
		lua::settable(L, -1, "posx", posx);
		lua::settable(L, -1, "posy", posy);
		lua::settable(L, -1, "cloth", cloth);
		lua::settable(L, -1, "weapon", weapon);
		lua::settable(L, -1, "wings", wings);
		lua::settable(L, -1, "is_transfer", is_transfer);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",reborn=" << reborn;
		buffer << ",level=" << level;
		buffer << ",PlayerName=" << PlayerName;
		buffer << ",Gender=" << Gender;
		buffer << ",mclass=" << mclass;
		buffer << ",sid=" << sid;
		buffer << ",sceneid=" << sceneid;
		buffer << ",posx=" << posx;
		buffer << ",posy=" << posy;
		buffer << ",cloth=" << cloth;
		buffer << ",weapon=" << weapon;
		buffer << ",wings=" << wings;
		buffer << ",is_transfer=" << is_transfer;
	}

public:
	int pid; //玩家角色ID 
	short reborn; //转生 
	short level; //等级 
	std::string PlayerName; //玩家名称 
	char Gender; //玩家性别 
	char mclass; //玩家等级 
	short sid;
	short sceneid; //玩家所在场景ID 
	short posx; //玩家位置 
	short posy; //玩家位置 
	int cloth; //玩家服装 
	int weapon; //玩家武器 
	int wings; //玩家翅膀 
	int is_transfer; //是否转过职 
};

class MsgEnterServerRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 1 };

	MsgEnterServerRequest() :
		Message(Category, Id)
	{
		aid = 0;
		channelId = 0;
		platformId = 0;
		token = 0;
		serverID = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEnterServerRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 20;
		length += sizeof(short) + fullChannelId.size();
		length += sizeof(short) + deviceId.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << fullChannelId;
		s << aid;
		s << channelId;
		s << platformId;
		s << deviceId;
		s << token;
		s << serverID;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> fullChannelId;
		s >> aid;
		s >> channelId;
		s >> platformId;
		s >> deviceId;
		s >> token;
		s >> serverID;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "fullChannelId", fullChannelId);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "channelId", channelId);
		lua::settable(L, -1, "platformId", platformId);
		lua::settable(L, -1, "deviceId", deviceId);
		lua::settable(L, -1, "token", token);
		lua::settable(L, -1, "serverID", serverID);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "fullChannelId=" << fullChannelId;
		buffer << ",aid=" << aid;
		buffer << ",channelId=" << channelId;
		buffer << ",platformId=" << platformId;
		buffer << ",deviceId=" << deviceId;
		buffer << ",token=" << token;
		buffer << ",serverID=" << serverID;
	}

public:
	std::string fullChannelId; //渠道ID 
	int aid; //账号ID 
	int channelId; //渠道ID 
	int platformId; //平台ID 
	std::string deviceId; //设备ID 
	int token; //令牌 
	int serverID; //选择的服务器ID 
};

class MsgEnterServerResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 2 };

	MsgEnterServerResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		cross_server = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEnterServerResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short);
		for (size_t i = 0; i < PlayerList.size(); ++i)
		{
			length += PlayerList[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		short PlayerList_vector_size = (short)PlayerList.size();
		s << PlayerList_vector_size;
		if (PlayerList_vector_size > 0)
		{
			for (auto it = PlayerList.begin(); it != PlayerList.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		s << cross_server;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		int PlayerList_vector_size = s.read_int16();
		PlayerList.clear();
		while (PlayerList_vector_size > 0)
		{
			PlayerList_vector_size--;
			PlayerInfo val;
			val.unserialize(s, false);
			PlayerList.push_back(val);
		}
		s >> cross_server;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::newtable(lua::L);
		for (size_t i = 0; i < PlayerList.size(); ++i)
		{
			PlayerList[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "PlayerList");
		lua::settable(L, -1, "cross_server", cross_server);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",PlayerList=[";
		for (size_t i = 0; i < PlayerList.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			PlayerList[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
		buffer << ",cross_server=" << cross_server;
	}

public:
	short errcode; //错误码 
	std::vector<PlayerInfo> PlayerList; //角色列表 
	short cross_server; //是否是跨服 
};

class MsgCreatePlayerRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 5 };

	MsgCreatePlayerRequest() :
		Message(Category, Id)
	{
		career = 0;
		gender = 0;
		serverID = 0;
	}

	virtual const char *getName() const
	{
		return "MsgCreatePlayerRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 6;
		length += sizeof(short) + PlayerName.size();
		length += sizeof(short) + code.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << PlayerName;
		s << career;
		s << gender;
		s << code;
		s << serverID;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> PlayerName;
		s >> career;
		s >> gender;
		s >> code;
		s >> serverID;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "PlayerName", PlayerName);
		lua::settable(L, -1, "career", career);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "code", code);
		lua::settable(L, -1, "serverID", serverID);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "PlayerName=" << PlayerName;
		buffer << ",career=" << career;
		buffer << ",gender=" << gender;
		buffer << ",code=" << code;
		buffer << ",serverID=" << serverID;
	}

public:
	std::string PlayerName;
	char career;
	char gender;
	std::string code;
	int serverID; //创角的服务器ID 
};

class MsgCreatePlayerResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 6 };

	MsgCreatePlayerResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		pid = 0;
		ctime = 0;
	}

	virtual const char *getName() const
	{
		return "MsgCreatePlayerResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << pid;
		s << ctime;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> pid;
		s >> ctime;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "ctime", ctime);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",pid=" << pid;
		buffer << ",ctime=" << ctime;
	}

public:
	short errcode;
	int pid;
	int ctime;
};

class MsgEnterGameRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 7 };

	MsgEnterGameRequest() :
		Message(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEnterGameRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
	}

public:
	int pid;
};

class MsgEnterGameResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 8 };

	MsgEnterGameResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		ctime = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEnterGameResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << ctime;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> ctime;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "ctime", ctime);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",ctime=" << ctime;
	}

public:
	short errcode;
	int ctime;
};

class MsgDeletePlayerRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 9 };

	MsgDeletePlayerRequest() :
		Message(Category, Id)
	{
		pid = 0;
		serverID = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDeletePlayerRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << serverID;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> serverID;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "serverID", serverID);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",serverID=" << serverID;
	}

public:
	int pid;
	int serverID; //创角的服务器ID 
};

class MsgDeletePlayerResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 10 };

	MsgDeletePlayerResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDeletePlayerResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",pid=" << pid;
	}

public:
	short errcode;
	int pid;
};

class MsgPlayerReconnectRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 11 };

	MsgPlayerReconnectRequest() :
		Message(Category, Id)
	{
		aid = 0;
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerReconnectRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << aid;
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> aid;
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "aid=" << aid;
		buffer << ",pid=" << pid;
	}

public:
	int aid;
	int pid;
};

class MsgPlayerReconnectResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 12 };

	MsgPlayerReconnectResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerReconnectResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgPlayerQuitNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 13 };

	MsgPlayerQuitNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgPlayerQuitNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgBeKicked : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 14 };

	MsgBeKicked() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgBeKicked";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgTimeNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 15 };

	MsgTimeNotify() :
		Message(Category, Id)
	{
		time = 0;
		random = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTimeNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << time;
		s << random;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> time;
		s >> random;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "time", time);
		lua::settable(L, -1, "random", random);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "time=" << time;
		buffer << ",random=" << random;
	}

public:
	int time;
	int random;
};

class MsgEnterGameWithNoLoginRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 16 };

	MsgEnterGameWithNoLoginRequest() :
		Message(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEnterGameWithNoLoginRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
	}

public:
	int pid;
};

class MsgPing : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 50 };

	MsgPing() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgPing";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgPong : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 51 };

	MsgPong() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgPong";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgGSASPing : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 52 };

	MsgGSASPing() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGSASPing";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short) + PingID.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << PingID;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> PingID;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "PingID", PingID);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "PingID=" << PingID;
	}

public:
	std::string PingID;
};

class MsgGSASPong : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 53 };

	MsgGSASPong() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGSASPong";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short) + PingID.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << PingID;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> PingID;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "PingID", PingID);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "PingID=" << PingID;
	}

public:
	std::string PingID;
};

class MsgPlayerLoadedNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 70 };

	MsgPlayerLoadedNotify() :
		Message(Category, Id)
	{
		pid = 0;
		load_id = 0;
		isinit = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerLoadedNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << load_id;
		s << isinit;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> load_id;
		s >> isinit;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "load_id", load_id);
		lua::settable(L, -1, "isinit", isinit);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",load_id=" << load_id;
		buffer << ",isinit=" << isinit;
	}

public:
	int pid;
	int load_id;
	short isinit;
};

class MsgPlayerLoginSceneNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 71 };

	MsgPlayerLoginSceneNotify() :
		Message(Category, Id)
	{
		sceneid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerLoginSceneNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << sceneid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> sceneid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sceneid", sceneid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "sceneid=" << sceneid;
	}

public:
	int sceneid;
};

class MsgServerQueueNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 80 };

	MsgServerQueueNotify() :
		Message(Category, Id)
	{
		queueposition = 0;
		remaintimeestimate = 0;
	}

	virtual const char *getName() const
	{
		return "MsgServerQueueNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << queueposition;
		s << remaintimeestimate;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> queueposition;
		s >> remaintimeestimate;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "queueposition", queueposition);
		lua::settable(L, -1, "remaintimeestimate", remaintimeestimate);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "queueposition=" << queueposition;
		buffer << ",remaintimeestimate=" << remaintimeestimate;
	}

public:
	int queueposition;
	int remaintimeestimate;
};

class MsgServerQueueReset : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 90 };

	MsgServerQueueReset() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgServerQueueReset";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgGetPlayerCreateTimeRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 91 };

	MsgGetPlayerCreateTimeRequest() :
		Message(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetPlayerCreateTimeRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
	}

public:
	int pid;
};

class MsgGetPlayerCreateTimeResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 92 };

	MsgGetPlayerCreateTimeResponse() :
		Message(Category, Id)
	{
		pid = 0;
		ctime = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetPlayerCreateTimeResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << ctime;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> ctime;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "ctime", ctime);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",ctime=" << ctime;
	}

public:
	int pid;
	int ctime;
};

class MsgGMPlayerControlRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 100 };

	MsgGMPlayerControlRequest() :
		Message(Category, Id)
	{
		aid = 0;
		pid = 0;
		opcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGMPlayerControlRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << aid;
		s << pid;
		s << opcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> aid;
		s >> pid;
		s >> opcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "opcode", opcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",opcode=" << opcode;
	}

public:
	int aid;
	int pid;
	int opcode;
};

class MsgAccountAuthRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 161 };

	MsgAccountAuthRequest() :
		Message(Category, Id)
	{
		sid = 0;
		aid = 0;
		token = 0;
		channelId = 0;
		platformId = 0;
		serverID = 0;
	}

	virtual const char *getName() const
	{
		return "MsgAccountAuthRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 24;
		length += sizeof(short) + fullChannelId.size();
		length += sizeof(short) + deviceId.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << sid;
		s << aid;
		s << token;
		s << channelId;
		s << platformId;
		s << fullChannelId;
		s << deviceId;
		s << serverID;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> sid;
		s >> aid;
		s >> token;
		s >> channelId;
		s >> platformId;
		s >> fullChannelId;
		s >> deviceId;
		s >> serverID;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "token", token);
		lua::settable(L, -1, "channelId", channelId);
		lua::settable(L, -1, "platformId", platformId);
		lua::settable(L, -1, "fullChannelId", fullChannelId);
		lua::settable(L, -1, "deviceId", deviceId);
		lua::settable(L, -1, "serverID", serverID);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "sid=" << sid;
		buffer << ",aid=" << aid;
		buffer << ",token=" << token;
		buffer << ",channelId=" << channelId;
		buffer << ",platformId=" << platformId;
		buffer << ",fullChannelId=" << fullChannelId;
		buffer << ",deviceId=" << deviceId;
		buffer << ",serverID=" << serverID;
	}

public:
	int sid;
	int aid;
	int token;
	int channelId;
	int platformId;
	std::string fullChannelId;
	std::string deviceId;
	int serverID;
};

class MsgAccountAuthResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 162 };

	MsgAccountAuthResponse() :
		Message(Category, Id)
	{
		success = 0;
		sid = 0;
		aid = 0;
		channelId = 0;
		platformId = 0;
		serverID = 0;
	}

	virtual const char *getName() const
	{
		return "MsgAccountAuthResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 22;
		length += sizeof(short) + fullChannelId.size();
		length += sizeof(short) + deviceId.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << success;
		s << sid;
		s << aid;
		s << channelId;
		s << platformId;
		s << fullChannelId;
		s << deviceId;
		s << serverID;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> success;
		s >> sid;
		s >> aid;
		s >> channelId;
		s >> platformId;
		s >> fullChannelId;
		s >> deviceId;
		s >> serverID;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "success", success);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "channelId", channelId);
		lua::settable(L, -1, "platformId", platformId);
		lua::settable(L, -1, "fullChannelId", fullChannelId);
		lua::settable(L, -1, "deviceId", deviceId);
		lua::settable(L, -1, "serverID", serverID);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "success=" << success;
		buffer << ",sid=" << sid;
		buffer << ",aid=" << aid;
		buffer << ",channelId=" << channelId;
		buffer << ",platformId=" << platformId;
		buffer << ",fullChannelId=" << fullChannelId;
		buffer << ",deviceId=" << deviceId;
		buffer << ",serverID=" << serverID;
	}

public:
	short success; //1-成功, 其他-失败 
	int sid;
	int aid;
	int channelId;
	int platformId;
	std::string fullChannelId;
	std::string deviceId;
	int serverID;
};

class MsgChangeServerNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 103 };

	MsgChangeServerNotify() :
		Message(Category, Id)
	{
		port = 0;
		aid = 0;
		serverID = 0;
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgChangeServerNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 16;
		length += sizeof(short) + addr.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << addr;
		s << port;
		s << aid;
		s << serverID;
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> addr;
		s >> port;
		s >> aid;
		s >> serverID;
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "addr", addr);
		lua::settable(L, -1, "port", port);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "serverID", serverID);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "addr=" << addr;
		buffer << ",port=" << port;
		buffer << ",aid=" << aid;
		buffer << ",serverID=" << serverID;
		buffer << ",pid=" << pid;
	}

public:
	std::string addr; //目标服务器地址 
	int port; //目标服务器端口 
	int aid; //账号ID 
	int serverID; //选择的服务器ID 
	int pid; //角色ID 
};

class MsgPlayerAuthRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 104 };

	MsgPlayerAuthRequest() :
		Message(Category, Id)
	{
		aid = 0;
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerAuthRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << aid;
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> aid;
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "aid=" << aid;
		buffer << ",pid=" << pid;
	}

public:
	int aid;
	int pid;
};

class MsgPlayerAuthResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 105 };

	MsgPlayerAuthResponse() :
		Message(Category, Id)
	{
		aid = 0;
		pid = 0;
		ctime = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerAuthResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << aid;
		s << pid;
		s << ctime;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> aid;
		s >> pid;
		s >> ctime;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "ctime", ctime);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",ctime=" << ctime;
	}

public:
	int aid;
	int pid;
	int ctime; //解封时间，如果角色未被禁，置0 
};

class MsgPlayerAuthRequestEx : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 434 };

	MsgPlayerAuthRequestEx() :
		Message(Category, Id)
	{
		aid = 0;
		pid = 0;
		channelId = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerAuthRequestEx";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << aid;
		s << pid;
		s << channelId;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> aid;
		s >> pid;
		s >> channelId;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "channelId", channelId);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",channelId=" << channelId;
	}

public:
	int aid;
	int pid;
	int channelId;
};

class MsgChangeJobRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 106 };

	MsgChangeJobRequest() :
		Message(Category, Id)
	{
		pid = 0;
		job = 0;
	}

	virtual const char *getName() const
	{
		return "MsgChangeJobRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << job;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> job;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "job", job);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",job=" << job;
	}

public:
	int pid;
	int job;
};

class MsgChangeJobResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_LOGIN, Id = 107 };

	MsgChangeJobResponse() :
		Message(Category, Id)
	{
		pid = 0;
		job = 0;
	}

	virtual const char *getName() const
	{
		return "MsgChangeJobResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << job;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> job;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "job", job);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",job=" << job;
	}

public:
	int pid;
	int job;
};

#endif	//_MSG_LOGIN_H_INCLUDED
