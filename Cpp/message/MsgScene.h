//
//Generated by lua
//2009-2012	(C) XianFeng Inc. Reserved
//

#ifndef _MSG_SCENE_H_INCLUDED
#define _MSG_SCENE_H_INCLUDED

#include "category.h"
#include "common/Message.h"

class MsgEnterSceneRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 1 };

	MsgEnterSceneRequest() :
		Message(Category, Id)
	{
		sid = 0;
		reason = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEnterSceneRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << sid;
		s << reason;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> sid;
		s >> reason;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "reason", reason);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "sid=" << sid;
		buffer << ",reason=" << reason;
	}

public:
	int sid;
	short reason;
};

class MsgEnterSceneResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 6 };

	MsgEnterSceneResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		npcfly = 0;
		reason = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEnterSceneResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << npcfly;
		s << reason;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> npcfly;
		s >> reason;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "npcfly", npcfly);
		lua::settable(L, -1, "reason", reason);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",npcfly=" << npcfly;
		buffer << ",reason=" << reason;
	}

public:
	short errcode;
	short npcfly;
	short reason;
};

class MsgPlayerWalkRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 11 };

	MsgPlayerWalkRequest() :
		Message(Category, Id)
	{
		dir = 0;
		posx = 0;
		posy = 0;
		mMoveStep = 0;
		SkipTime = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerWalkRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << dir;
		s << posx;
		s << posy;
		s << mMoveStep;
		s << SkipTime;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> dir;
		s >> posx;
		s >> posy;
		s >> mMoveStep;
		s >> SkipTime;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "dir", dir);
		lua::settable(L, -1, "posx", posx);
		lua::settable(L, -1, "posy", posy);
		lua::settable(L, -1, "mMoveStep", mMoveStep);
		lua::settable(L, -1, "SkipTime", SkipTime);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "dir=" << dir;
		buffer << ",posx=" << posx;
		buffer << ",posy=" << posy;
		buffer << ",mMoveStep=" << mMoveStep;
		buffer << ",SkipTime=" << SkipTime;
	}

public:
	short dir;
	short posx;
	short posy;
	short mMoveStep;
	int SkipTime;
};

class MsgPlayerWalkResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 12 };

	MsgPlayerWalkResponse() :
		Message(Category, Id)
	{
		dir = 0;
		posx = 0;
		posy = 0;
		mMoveStep = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerWalkResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << dir;
		s << posx;
		s << posy;
		s << mMoveStep;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> dir;
		s >> posx;
		s >> posy;
		s >> mMoveStep;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "dir", dir);
		lua::settable(L, -1, "posx", posx);
		lua::settable(L, -1, "posy", posy);
		lua::settable(L, -1, "mMoveStep", mMoveStep);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "dir=" << dir;
		buffer << ",posx=" << posx;
		buffer << ",posy=" << posy;
		buffer << ",mMoveStep=" << mMoveStep;
	}

public:
	short dir;
	short posx;
	short posy;
	short mMoveStep;
};

class MsgPlayerRunRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 13 };

	MsgPlayerRunRequest() :
		Message(Category, Id)
	{
		dir = 0;
		posx = 0;
		posy = 0;
		mMoveStep = 0;
		SkipTime = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerRunRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << dir;
		s << posx;
		s << posy;
		s << mMoveStep;
		s << SkipTime;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> dir;
		s >> posx;
		s >> posy;
		s >> mMoveStep;
		s >> SkipTime;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "dir", dir);
		lua::settable(L, -1, "posx", posx);
		lua::settable(L, -1, "posy", posy);
		lua::settable(L, -1, "mMoveStep", mMoveStep);
		lua::settable(L, -1, "SkipTime", SkipTime);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "dir=" << dir;
		buffer << ",posx=" << posx;
		buffer << ",posy=" << posy;
		buffer << ",mMoveStep=" << mMoveStep;
		buffer << ",SkipTime=" << SkipTime;
	}

public:
	short dir;
	short posx;
	short posy;
	short mMoveStep;
	int SkipTime;
};

class MsgPlayerRunResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 14 };

	MsgPlayerRunResponse() :
		Message(Category, Id)
	{
		dir = 0;
		posx = 0;
		posy = 0;
		mMoveStep = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerRunResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << dir;
		s << posx;
		s << posy;
		s << mMoveStep;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> dir;
		s >> posx;
		s >> posy;
		s >> mMoveStep;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "dir", dir);
		lua::settable(L, -1, "posx", posx);
		lua::settable(L, -1, "posy", posy);
		lua::settable(L, -1, "mMoveStep", mMoveStep);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "dir=" << dir;
		buffer << ",posx=" << posx;
		buffer << ",posy=" << posy;
		buffer << ",mMoveStep=" << mMoveStep;
	}

public:
	short dir;
	short posx;
	short posy;
	short mMoveStep;
};

class MsgPlayerMoveNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 15 };

	MsgPlayerMoveNotify() :
		Message(Category, Id)
	{
		dir = 0;
		posx = 0;
		posy = 0;
		mMoveStep = 0;
		movetype = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerMoveNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << dir;
		s << posx;
		s << posy;
		s << mMoveStep;
		s << movetype;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> dir;
		s >> posx;
		s >> posy;
		s >> mMoveStep;
		s >> movetype;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "dir", dir);
		lua::settable(L, -1, "posx", posx);
		lua::settable(L, -1, "posy", posy);
		lua::settable(L, -1, "mMoveStep", mMoveStep);
		lua::settable(L, -1, "movetype", movetype);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "dir=" << dir;
		buffer << ",posx=" << posx;
		buffer << ",posy=" << posy;
		buffer << ",mMoveStep=" << mMoveStep;
		buffer << ",movetype=" << movetype;
	}

public:
	short dir;
	short posx;
	short posy;
	short mMoveStep;
	short movetype;
};

class MsgEntityMoveNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 17 };

	MsgEntityMoveNotify() :
		Message(Category, Id)
	{
		eid = 0;
		movetype = 0;
		dir = 0;
		posx = 0;
		posy = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEntityMoveNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << movetype;
		s << dir;
		s << posx;
		s << posy;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> movetype;
		s >> dir;
		s >> posx;
		s >> posy;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "movetype", movetype);
		lua::settable(L, -1, "dir", dir);
		lua::settable(L, -1, "posx", posx);
		lua::settable(L, -1, "posy", posy);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",movetype=" << movetype;
		buffer << ",dir=" << dir;
		buffer << ",posx=" << posx;
		buffer << ",posy=" << posy;
	}

public:
	int eid;
	short movetype;
	short dir;
	short posx;
	short posy;
};

class MsgEntityTurnNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 18 };

	MsgEntityTurnNotify() :
		Message(Category, Id)
	{
		eid = 0;
		dir = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEntityTurnNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << dir;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> dir;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "dir", dir);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",dir=" << dir;
	}

public:
	int eid;
	short dir;
};

class MsgEntityTurnRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 19 };

	MsgEntityTurnRequest() :
		Message(Category, Id)
	{
		dir = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEntityTurnRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << dir;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> dir;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "dir", dir);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "dir=" << dir;
	}

public:
	short dir;
};

class MsgPlayerUseSkillonPosRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 20 };

	MsgPlayerUseSkillonPosRequest() :
		Message(Category, Id)
	{
		skillid = 0;
		lvl = 0;
		targetx = 0;
		targety = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerUseSkillonPosRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << skillid;
		s << lvl;
		s << targetx;
		s << targety;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> skillid;
		s >> lvl;
		s >> targetx;
		s >> targety;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "skillid", skillid);
		lua::settable(L, -1, "lvl", lvl);
		lua::settable(L, -1, "targetx", targetx);
		lua::settable(L, -1, "targety", targety);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "skillid=" << skillid;
		buffer << ",lvl=" << lvl;
		buffer << ",targetx=" << targetx;
		buffer << ",targety=" << targety;
	}

public:
	int skillid;
	int lvl;
	short targetx;
	short targety;
};

class MsgPlayerUseSkillonEntityRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 21 };

	MsgPlayerUseSkillonEntityRequest() :
		Message(Category, Id)
	{
		eid = 0;
		skillid = 0;
		lvl = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerUseSkillonEntityRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << skillid;
		s << lvl;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> skillid;
		s >> lvl;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "skillid", skillid);
		lua::settable(L, -1, "lvl", lvl);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",skillid=" << skillid;
		buffer << ",lvl=" << lvl;
	}

public:
	int eid;
	int skillid;
	int lvl;
};

class MsgPlayerUseSkillResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 22 };

	MsgPlayerUseSkillResponse() :
		Message(Category, Id)
	{
		skillid = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerUseSkillResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << skillid;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> skillid;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "skillid", skillid);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "skillid=" << skillid;
		buffer << ",errcode=" << errcode;
	}

public:
	int skillid;
	short errcode;
};

struct MentalData
{
public:
	MentalData()
	{
		type = 0;
		data = 0;
	}

	size_t getLength(bool ex) const
	{
		return 6;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << type;
		s << data;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> type;
		s >> data;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "data", data);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
		buffer << ",data=" << data;
	}

public:
	short type;
	int data;
};

class MsgEntityUseSkillNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 23 };

	MsgEntityUseSkillNotify() :
		Message(Category, Id)
	{
		skillid = 0;
		lvl = 0;
		eidSrc = 0;
		eidTgt = 0;
		posx = 0;
		posy = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEntityUseSkillNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 24;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << skillid;
		s << lvl;
		s << eidSrc;
		s << eidTgt;
		s << posx;
		s << posy;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> skillid;
		s >> lvl;
		s >> eidSrc;
		s >> eidTgt;
		s >> posx;
		s >> posy;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "skillid", skillid);
		lua::settable(L, -1, "lvl", lvl);
		lua::settable(L, -1, "eidSrc", eidSrc);
		lua::settable(L, -1, "eidTgt", eidTgt);
		lua::settable(L, -1, "posx", posx);
		lua::settable(L, -1, "posy", posy);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "skillid=" << skillid;
		buffer << ",lvl=" << lvl;
		buffer << ",eidSrc=" << eidSrc;
		buffer << ",eidTgt=" << eidTgt;
		buffer << ",posx=" << posx;
		buffer << ",posy=" << posy;
	}

public:
	int skillid;
	int lvl;
	int eidSrc;
	int eidTgt;
	int posx;
	int posy;
};

class MsgEntityEffectNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 24 };

	MsgEntityEffectNotify() :
		Message(Category, Id)
	{
		eid = 0;
		effect = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEntityEffectNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << effect;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> effect;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "effect", effect);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",effect=" << effect;
	}

public:
	int eid;
	int effect;
};

class MsgEntityHpChangeNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 25 };

	MsgEntityHpChangeNotify() :
		Message(Category, Id)
	{
		eid = 0;
		hp = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEntityHpChangeNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << hp;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> hp;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "hp", hp);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",hp=" << hp;
	}

public:
	int eid;
	int hp;
};

class MsgEntityMpChangeNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 26 };

	MsgEntityMpChangeNotify() :
		Message(Category, Id)
	{
		eid = 0;
		mp = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEntityMpChangeNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << mp;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> mp;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "mp", mp);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",mp=" << mp;
	}

public:
	int eid;
	int mp;
};

class MsgEntityHpMpChangeNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 27 };

	MsgEntityHpMpChangeNotify() :
		Message(Category, Id)
	{
		eid = 0;
		hp = 0;
		mp = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEntityHpMpChangeNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << hp;
		s << mp;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> hp;
		s >> mp;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "hp", hp);
		lua::settable(L, -1, "mp", mp);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",hp=" << hp;
		buffer << ",mp=" << mp;
	}

public:
	int eid;
	int hp;
	int mp;
};

class MsgEntityEquipChangeNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 28 };

	MsgEntityEquipChangeNotify() :
		Message(Category, Id)
	{
		eid = 0;
		type = 0;
		sid = 0;
		status = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEntityEquipChangeNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 14;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << type;
		s << sid;
		s << status;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> type;
		s >> sid;
		s >> status;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "status", status);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",type=" << type;
		buffer << ",sid=" << sid;
		buffer << ",status=" << status;
	}

public:
	int eid;
	int type;
	int sid;
	short status;
};

class MsgEntityHpChangeDelayNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 30 };

	MsgEntityHpChangeDelayNotify() :
		Message(Category, Id)
	{
		eid = 0;
		hp = 0;
		skillId = 0;
		flags = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEntityHpChangeDelayNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 20;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << hp;
		s << skillId;
		s << flags;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> hp;
		s >> skillId;
		s >> flags;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "hp", hp);
		lua::settable(L, -1, "skillId", skillId);
		lua::settable(L, -1, "flags", flags);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",hp=" << hp;
		buffer << ",skillId=" << skillId;
		buffer << ",flags=" << flags;
	}

public:
	int eid;
	long long hp;
	int skillId;
	int flags;
};

class MsgEntityBeAttackedDelayNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 32 };

	MsgEntityBeAttackedDelayNotify() :
		Message(Category, Id)
	{
		eid = 0;
		type = 0;
		delay = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEntityBeAttackedDelayNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << type;
		s << delay;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> type;
		s >> delay;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "delay", delay);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",type=" << type;
		buffer << ",delay=" << delay;
	}

public:
	int eid;
	short type;
	short delay;
};

class MsgImBeAttackedDelayNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 33 };

	MsgImBeAttackedDelayNotify() :
		Message(Category, Id)
	{
		eid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgImBeAttackedDelayNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
	}

public:
	int eid;
};

class MsgEntityBeUsedSkillNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 34 };

	MsgEntityBeUsedSkillNotify() :
		Message(Category, Id)
	{
		skillid = 0;
		lvl = 0;
		issrc = 0;
		eidTgt = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEntityBeUsedSkillNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 14;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << skillid;
		s << lvl;
		s << issrc;
		s << eidTgt;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> skillid;
		s >> lvl;
		s >> issrc;
		s >> eidTgt;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "skillid", skillid);
		lua::settable(L, -1, "lvl", lvl);
		lua::settable(L, -1, "issrc", issrc);
		lua::settable(L, -1, "eidTgt", eidTgt);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "skillid=" << skillid;
		buffer << ",lvl=" << lvl;
		buffer << ",issrc=" << issrc;
		buffer << ",eidTgt=" << eidTgt;
	}

public:
	int skillid;
	int lvl;
	short issrc;
	int eidTgt;
};

class MsgPlayerMineonPosRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 35 };

	MsgPlayerMineonPosRequest() :
		Message(Category, Id)
	{
		mineid = 0;
		targetx = 0;
		targety = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerMineonPosRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << mineid;
		s << targetx;
		s << targety;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> mineid;
		s >> targetx;
		s >> targety;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "mineid", mineid);
		lua::settable(L, -1, "targetx", targetx);
		lua::settable(L, -1, "targety", targety);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "mineid=" << mineid;
		buffer << ",targetx=" << targetx;
		buffer << ",targety=" << targety;
	}

public:
	short mineid;
	short targetx;
	short targety;
};

class MsgPlayerMineonPosResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 36 };

	MsgPlayerMineonPosResponse() :
		Message(Category, Id)
	{
		mineid = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerMineonPosResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << mineid;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> mineid;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "mineid", mineid);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "mineid=" << mineid;
		buffer << ",errcode=" << errcode;
	}

public:
	short mineid;
	short errcode;
};

struct MeetExData
{
public:
	MeetExData()
	{
		type = 0;
		data = 0;
	}

	size_t getLength(bool ex) const
	{
		return 6;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << type;
		s << data;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> type;
		s >> data;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "data", data);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
		buffer << ",data=" << data;
	}

public:
	short type;
	int data;
};

struct MeetExStr
{
public:
	MeetExStr()
	{
		type = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 2;
		length += sizeof(short) + data.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << type;
		s << data;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> type;
		s >> data;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "data", data);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
		buffer << ",data=" << data;
	}

public:
	short type;
	std::string data;
};

class MsgEntityMaxHPChangeNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 38 };

	MsgEntityMaxHPChangeNotify() :
		Message(Category, Id)
	{
		eid = 0;
		maxhp = 0;
		hp = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEntityMaxHPChangeNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << maxhp;
		s << hp;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> maxhp;
		s >> hp;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "maxhp", maxhp);
		lua::settable(L, -1, "hp", hp);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",maxhp=" << maxhp;
		buffer << ",hp=" << hp;
	}

public:
	int eid;
	int maxhp;
	int hp;
};

class MsgEntityExerChangeNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 39 };

	MsgEntityExerChangeNotify() :
		Message(Category, Id)
	{
		eid = 0;
		exercise = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEntityExerChangeNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << exercise;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> exercise;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "exercise", exercise);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",exercise=" << exercise;
	}

public:
	int eid;
	int exercise;
};

class MsgEntityMaxExerChangeNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 40 };

	MsgEntityMaxExerChangeNotify() :
		Message(Category, Id)
	{
		eid = 0;
		maxexer = 0;
		exercise = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEntityMaxExerChangeNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << maxexer;
		s << exercise;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> maxexer;
		s >> exercise;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "maxexer", maxexer);
		lua::settable(L, -1, "exercise", exercise);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",maxexer=" << maxexer;
		buffer << ",exercise=" << exercise;
	}

public:
	int eid;
	int maxexer;
	int exercise;
};

class MsgMeetEntityExStrNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 48 };

	MsgMeetEntityExStrNotify() :
		Message(Category, Id)
	{
		eid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMeetEntityExStrNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short);
		for (size_t i = 0; i < exstr.size(); ++i)
		{
			length += exstr[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		short exstr_vector_size = (short)exstr.size();
		s << exstr_vector_size;
		if (exstr_vector_size > 0)
		{
			for (auto it = exstr.begin(); it != exstr.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		int exstr_vector_size = s.read_int16();
		exstr.clear();
		while (exstr_vector_size > 0)
		{
			exstr_vector_size--;
			MeetExStr val;
			val.unserialize(s, false);
			exstr.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::newtable(lua::L);
		for (size_t i = 0; i < exstr.size(); ++i)
		{
			exstr[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "exstr");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",exstr=[";
		for (size_t i = 0; i < exstr.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			exstr[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int eid;
	std::vector<MeetExStr> exstr;
};

class MsgMeetEntityExDataNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 49 };

	MsgMeetEntityExDataNotify() :
		Message(Category, Id)
	{
		eid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMeetEntityExDataNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short);
		for (size_t i = 0; i < exdata.size(); ++i)
		{
			length += exdata[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		short exdata_vector_size = (short)exdata.size();
		s << exdata_vector_size;
		if (exdata_vector_size > 0)
		{
			for (auto it = exdata.begin(); it != exdata.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		int exdata_vector_size = s.read_int16();
		exdata.clear();
		while (exdata_vector_size > 0)
		{
			exdata_vector_size--;
			MeetExData val;
			val.unserialize(s, false);
			exdata.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::newtable(lua::L);
		for (size_t i = 0; i < exdata.size(); ++i)
		{
			exdata[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "exdata");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",exdata=[";
		for (size_t i = 0; i < exdata.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			exdata[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int eid;
	std::vector<MeetExData> exdata;
};

class MsgMapByeNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 50 };

	MsgMapByeNotify() :
		Message(Category, Id)
	{
		eid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMapByeNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
	}

public:
	int eid;
};

class MsgMapMeetPlayerNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 51 };

	MsgMapMeetPlayerNotify() :
		Message(Category, Id)
	{
		eid = 0;
		pid = 0;
		staticid = 0;
		gender = 0;
		reborn = 0;
		level = 0;
		maxhp = 0;
		hp = 0;
		maxmp = 0;
		mp = 0;
		attackspeed = 0;
		cloth = 0;
		weapon = 0;
		wings = 0;
		dir = 0;
		posx = 0;
		posy = 0;
		serverid = 0;
		fabao = 0;
		hat = 0;
		chenghao = 0;
		chenghao2 = 0;
		chenghao3 = 0;
		chenghao4 = 0;
		chenghao5 = 0;
		hunhuan = 0;
		jingling = 0;
		isMining = 0;
		pkstate = 0;
		factionid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMapMeetPlayerNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 106;
		length += sizeof(short) + name.size();
		length += sizeof(short);
		length += effectlist.size() * 2;
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << pid;
		s << staticid;
		s << gender;
		s << reborn;
		s << level;
		s << maxhp;
		s << hp;
		s << maxmp;
		s << mp;
		s << attackspeed;
		s << name;
		s << cloth;
		s << weapon;
		s << wings;
		s << dir;
		s << posx;
		s << posy;
		s << serverid;
		s << fabao;
		short effectlist_vector_size = (short)effectlist.size();
		s << effectlist_vector_size;
		if (effectlist_vector_size > 0)
		{
			for (auto it = effectlist.begin(); it != effectlist.end(); ++it)
			{
				s << *it;
			}
		}
		s << hat;
		s << chenghao;
		s << chenghao2;
		s << chenghao3;
		s << chenghao4;
		s << chenghao5;
		s << hunhuan;
		s << jingling;
		s << isMining;
		s << pkstate;
		s << factionid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> pid;
		s >> staticid;
		s >> gender;
		s >> reborn;
		s >> level;
		s >> maxhp;
		s >> hp;
		s >> maxmp;
		s >> mp;
		s >> attackspeed;
		s >> name;
		s >> cloth;
		s >> weapon;
		s >> wings;
		s >> dir;
		s >> posx;
		s >> posy;
		s >> serverid;
		s >> fabao;
		int effectlist_vector_size = s.read_int16();
		effectlist.clear();
		while (effectlist_vector_size > 0)
		{
			effectlist_vector_size--;
			short val;
			s >> val;
			effectlist.push_back(val);
		}
		s >> hat;
		s >> chenghao;
		s >> chenghao2;
		s >> chenghao3;
		s >> chenghao4;
		s >> chenghao5;
		s >> hunhuan;
		s >> jingling;
		s >> isMining;
		s >> pkstate;
		s >> factionid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "staticid", staticid);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "reborn", reborn);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "maxhp", maxhp);
		lua::settable(L, -1, "hp", hp);
		lua::settable(L, -1, "maxmp", maxmp);
		lua::settable(L, -1, "mp", mp);
		lua::settable(L, -1, "attackspeed", attackspeed);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "cloth", cloth);
		lua::settable(L, -1, "weapon", weapon);
		lua::settable(L, -1, "wings", wings);
		lua::settable(L, -1, "dir", dir);
		lua::settable(L, -1, "posx", posx);
		lua::settable(L, -1, "posy", posy);
		lua::settable(L, -1, "serverid", serverid);
		lua::settable(L, -1, "fabao", fabao);
		lua::newtable(lua::L);
		for (size_t i = 0; i < effectlist.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, effectlist[i]);
		}
		lua::settable(L, -2, "effectlist");
		lua::settable(L, -1, "hat", hat);
		lua::settable(L, -1, "chenghao", chenghao);
		lua::settable(L, -1, "chenghao2", chenghao2);
		lua::settable(L, -1, "chenghao3", chenghao3);
		lua::settable(L, -1, "chenghao4", chenghao4);
		lua::settable(L, -1, "chenghao5", chenghao5);
		lua::settable(L, -1, "hunhuan", hunhuan);
		lua::settable(L, -1, "jingling", jingling);
		lua::settable(L, -1, "isMining", isMining);
		lua::settable(L, -1, "pkstate", pkstate);
		lua::settable(L, -1, "factionid", factionid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",pid=" << pid;
		buffer << ",staticid=" << staticid;
		buffer << ",gender=" << gender;
		buffer << ",reborn=" << reborn;
		buffer << ",level=" << level;
		buffer << ",maxhp=" << maxhp;
		buffer << ",hp=" << hp;
		buffer << ",maxmp=" << maxmp;
		buffer << ",mp=" << mp;
		buffer << ",attackspeed=" << attackspeed;
		buffer << ",name=" << name;
		buffer << ",cloth=" << cloth;
		buffer << ",weapon=" << weapon;
		buffer << ",wings=" << wings;
		buffer << ",dir=" << dir;
		buffer << ",posx=" << posx;
		buffer << ",posy=" << posy;
		buffer << ",serverid=" << serverid;
		buffer << ",fabao=" << fabao;
		buffer << ",effectlist=[";
		for (size_t i = 0; i < effectlist.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << effectlist[i];
		}
		buffer << "]";
		buffer << ",hat=" << hat;
		buffer << ",chenghao=" << chenghao;
		buffer << ",chenghao2=" << chenghao2;
		buffer << ",chenghao3=" << chenghao3;
		buffer << ",chenghao4=" << chenghao4;
		buffer << ",chenghao5=" << chenghao5;
		buffer << ",hunhuan=" << hunhuan;
		buffer << ",jingling=" << jingling;
		buffer << ",isMining=" << isMining;
		buffer << ",pkstate=" << pkstate;
		buffer << ",factionid=" << factionid;
	}

public:
	int eid;
	int pid;
	short staticid;
	short gender;
	short reborn;
	int level;
	int maxhp;
	int hp;
	int maxmp;
	int mp;
	int attackspeed;
	std::string name;
	int cloth;
	int weapon;
	int wings;
	short dir;
	short posx;
	short posy;
	int serverid;
	int fabao;
	std::vector<short> effectlist;
	int hat;
	int chenghao;
	int chenghao2;
	int chenghao3;
	int chenghao4;
	int chenghao5;
	int hunhuan;
	int jingling;
	short isMining;
	int pkstate;
	int factionid;
};

class MsgMapMeetMonsterNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 52 };

	MsgMapMeetMonsterNotify() :
		Message(Category, Id)
	{
		eid = 0;
		staticid = 0;
		maxhp = 0;
		hp = 0;
		dir = 0;
		posx = 0;
		posy = 0;
		status = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMapMeetMonsterNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 34;
		length += sizeof(short) + name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << staticid;
		s << name;
		s << maxhp;
		s << hp;
		s << dir;
		s << posx;
		s << posy;
		s << status;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> staticid;
		s >> name;
		s >> maxhp;
		s >> hp;
		s >> dir;
		s >> posx;
		s >> posy;
		s >> status;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "staticid", staticid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "maxhp", maxhp);
		lua::settable(L, -1, "hp", hp);
		lua::settable(L, -1, "dir", dir);
		lua::settable(L, -1, "posx", posx);
		lua::settable(L, -1, "posy", posy);
		lua::settable(L, -1, "status", status);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",staticid=" << staticid;
		buffer << ",name=" << name;
		buffer << ",maxhp=" << maxhp;
		buffer << ",hp=" << hp;
		buffer << ",dir=" << dir;
		buffer << ",posx=" << posx;
		buffer << ",posy=" << posy;
		buffer << ",status=" << status;
	}

public:
	int eid;
	int staticid;
	std::string name;
	long long maxhp;
	long long hp;
	short dir;
	short posx;
	short posy;
	int status;
};

class MsgMapMeetNPCNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 53 };

	MsgMapMeetNPCNotify() :
		Message(Category, Id)
	{
		eid = 0;
		staticid = 0;
		dir = 0;
		posx = 0;
		posy = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMapMeetNPCNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 14;
		length += sizeof(short) + name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << staticid;
		s << name;
		s << dir;
		s << posx;
		s << posy;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> staticid;
		s >> name;
		s >> dir;
		s >> posx;
		s >> posy;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "staticid", staticid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "dir", dir);
		lua::settable(L, -1, "posx", posx);
		lua::settable(L, -1, "posy", posy);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",staticid=" << staticid;
		buffer << ",name=" << name;
		buffer << ",dir=" << dir;
		buffer << ",posx=" << posx;
		buffer << ",posy=" << posy;
	}

public:
	int eid;
	int staticid;
	std::string name;
	short dir;
	short posx;
	short posy;
};

class MsgMapMeetItemNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 54 };

	MsgMapMeetItemNotify() :
		Message(Category, Id)
	{
		eid = 0;
		staticid = 0;
		count = 0;
		posx = 0;
		posy = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMapMeetItemNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 16;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << staticid;
		s << count;
		s << posx;
		s << posy;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> staticid;
		s >> count;
		s >> posx;
		s >> posy;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "staticid", staticid);
		lua::settable(L, -1, "count", count);
		lua::settable(L, -1, "posx", posx);
		lua::settable(L, -1, "posy", posy);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",staticid=" << staticid;
		buffer << ",count=" << count;
		buffer << ",posx=" << posx;
		buffer << ",posy=" << posy;
	}

public:
	int eid;
	int staticid;
	int count;
	short posx;
	short posy;
};

class MsgMapMeetSkillNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 55 };

	MsgMapMeetSkillNotify() :
		Message(Category, Id)
	{
		eid = 0;
		staticid = 0;
		posx = 0;
		posy = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMapMeetSkillNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << staticid;
		s << posx;
		s << posy;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> staticid;
		s >> posx;
		s >> posy;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "staticid", staticid);
		lua::settable(L, -1, "posx", posx);
		lua::settable(L, -1, "posy", posy);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",staticid=" << staticid;
		buffer << ",posx=" << posx;
		buffer << ",posy=" << posy;
	}

public:
	int eid;
	int staticid;
	short posx;
	short posy;
};

class MsgMapMeetDogNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 56 };

	MsgMapMeetDogNotify() :
		Message(Category, Id)
	{
		eid = 0;
		did = 0;
		level = 0;
		ownerpid = 0;
		maxhp = 0;
		hp = 0;
		dir = 0;
		posx = 0;
		posy = 0;
		skillLvl = 0;
		ownertype = 0;
		subtype = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMapMeetDogNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 36;
		length += sizeof(short) + name.size();
		length += sizeof(short) + ownername.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << did;
		s << level;
		s << name;
		s << ownerpid;
		s << ownername;
		s << maxhp;
		s << hp;
		s << dir;
		s << posx;
		s << posy;
		s << skillLvl;
		s << ownertype;
		s << subtype;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> did;
		s >> level;
		s >> name;
		s >> ownerpid;
		s >> ownername;
		s >> maxhp;
		s >> hp;
		s >> dir;
		s >> posx;
		s >> posy;
		s >> skillLvl;
		s >> ownertype;
		s >> subtype;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "did", did);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "ownerpid", ownerpid);
		lua::settable(L, -1, "ownername", ownername);
		lua::settable(L, -1, "maxhp", maxhp);
		lua::settable(L, -1, "hp", hp);
		lua::settable(L, -1, "dir", dir);
		lua::settable(L, -1, "posx", posx);
		lua::settable(L, -1, "posy", posy);
		lua::settable(L, -1, "skillLvl", skillLvl);
		lua::settable(L, -1, "ownertype", ownertype);
		lua::settable(L, -1, "subtype", subtype);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",did=" << did;
		buffer << ",level=" << level;
		buffer << ",name=" << name;
		buffer << ",ownerpid=" << ownerpid;
		buffer << ",ownername=" << ownername;
		buffer << ",maxhp=" << maxhp;
		buffer << ",hp=" << hp;
		buffer << ",dir=" << dir;
		buffer << ",posx=" << posx;
		buffer << ",posy=" << posy;
		buffer << ",skillLvl=" << skillLvl;
		buffer << ",ownertype=" << ownertype;
		buffer << ",subtype=" << subtype;
	}

public:
	int eid;
	int did;
	short level;
	std::string name;
	int ownerpid;
	std::string ownername;
	int maxhp;
	int hp;
	short dir;
	short posx;
	short posy;
	int skillLvl;
	short ownertype;
	short subtype;
};

class MsgMapMeetPetNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 58 };

	MsgMapMeetPetNotify() :
		Message(Category, Id)
	{
		eid = 0;
		staticid = 0;
		ownerpid = 0;
		hp = 0;
		maxhp = 0;
		dir = 0;
		posx = 0;
		posy = 0;
		level = 0;
		reborn = 0;
		modelid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMapMeetPetNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 36;
		length += sizeof(short) + name.size();
		length += sizeof(short) + ownername.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << staticid;
		s << name;
		s << ownerpid;
		s << ownername;
		s << hp;
		s << maxhp;
		s << dir;
		s << posx;
		s << posy;
		s << level;
		s << reborn;
		s << modelid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> staticid;
		s >> name;
		s >> ownerpid;
		s >> ownername;
		s >> hp;
		s >> maxhp;
		s >> dir;
		s >> posx;
		s >> posy;
		s >> level;
		s >> reborn;
		s >> modelid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "staticid", staticid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "ownerpid", ownerpid);
		lua::settable(L, -1, "ownername", ownername);
		lua::settable(L, -1, "hp", hp);
		lua::settable(L, -1, "maxhp", maxhp);
		lua::settable(L, -1, "dir", dir);
		lua::settable(L, -1, "posx", posx);
		lua::settable(L, -1, "posy", posy);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "reborn", reborn);
		lua::settable(L, -1, "modelid", modelid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",staticid=" << staticid;
		buffer << ",name=" << name;
		buffer << ",ownerpid=" << ownerpid;
		buffer << ",ownername=" << ownername;
		buffer << ",hp=" << hp;
		buffer << ",maxhp=" << maxhp;
		buffer << ",dir=" << dir;
		buffer << ",posx=" << posx;
		buffer << ",posy=" << posy;
		buffer << ",level=" << level;
		buffer << ",reborn=" << reborn;
		buffer << ",modelid=" << modelid;
	}

public:
	int eid;
	int staticid;
	std::string name;
	int ownerpid;
	std::string ownername;
	int hp;
	int maxhp;
	short dir;
	short posx;
	short posy;
	short level;
	int reborn;
	int modelid;
};

class MsgMapMeetMarsNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 59 };

	MsgMapMeetMarsNotify() :
		Message(Category, Id)
	{
		eid = 0;
		sid = 0;
		ownerpid = 0;
		hp = 0;
		maxhp = 0;
		dir = 0;
		posx = 0;
		posy = 0;
		job = 0;
		skill = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMapMeetMarsNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 30;
		length += sizeof(short) + name.size();
		length += sizeof(short) + ownername.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << sid;
		s << name;
		s << ownerpid;
		s << ownername;
		s << hp;
		s << maxhp;
		s << dir;
		s << posx;
		s << posy;
		s << job;
		s << skill;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> sid;
		s >> name;
		s >> ownerpid;
		s >> ownername;
		s >> hp;
		s >> maxhp;
		s >> dir;
		s >> posx;
		s >> posy;
		s >> job;
		s >> skill;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "ownerpid", ownerpid);
		lua::settable(L, -1, "ownername", ownername);
		lua::settable(L, -1, "hp", hp);
		lua::settable(L, -1, "maxhp", maxhp);
		lua::settable(L, -1, "dir", dir);
		lua::settable(L, -1, "posx", posx);
		lua::settable(L, -1, "posy", posy);
		lua::settable(L, -1, "job", job);
		lua::settable(L, -1, "skill", skill);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",sid=" << sid;
		buffer << ",name=" << name;
		buffer << ",ownerpid=" << ownerpid;
		buffer << ",ownername=" << ownername;
		buffer << ",hp=" << hp;
		buffer << ",maxhp=" << maxhp;
		buffer << ",dir=" << dir;
		buffer << ",posx=" << posx;
		buffer << ",posy=" << posy;
		buffer << ",job=" << job;
		buffer << ",skill=" << skill;
	}

public:
	int eid;
	int sid;
	std::string name;
	int ownerpid;
	std::string ownername;
	int hp;
	int maxhp;
	short dir;
	short posx;
	short posy;
	short job;
	short skill;
};

class MsgMapSelfEnterNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 60 };

	MsgMapSelfEnterNotify() :
		Message(Category, Id)
	{
		eid = 0;
		sceneid = 0;
		posx = 0;
		posy = 0;
		dir = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMapSelfEnterNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 14;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << sceneid;
		s << posx;
		s << posy;
		s << dir;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> sceneid;
		s >> posx;
		s >> posy;
		s >> dir;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "sceneid", sceneid);
		lua::settable(L, -1, "posx", posx);
		lua::settable(L, -1, "posy", posy);
		lua::settable(L, -1, "dir", dir);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",sceneid=" << sceneid;
		buffer << ",posx=" << posx;
		buffer << ",posy=" << posy;
		buffer << ",dir=" << dir;
	}

public:
	int eid;
	int sceneid;
	short posx;
	short posy;
	short dir;
};

class MsgMapSelfLeaveNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 61 };

	MsgMapSelfLeaveNotify() :
		Message(Category, Id)
	{
		eid = 0;
		sceneid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMapSelfLeaveNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << sceneid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> sceneid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "sceneid", sceneid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",sceneid=" << sceneid;
	}

public:
	int eid;
	short sceneid;
};

class MsgMapSelfEnterVirtalSceneNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 62 };

	MsgMapSelfEnterVirtalSceneNotify() :
		Message(Category, Id)
	{
		eid = 0;
		sceneid = 0;
		posx = 0;
		posy = 0;
		dir = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMapSelfEnterVirtalSceneNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << sceneid;
		s << posx;
		s << posy;
		s << dir;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> sceneid;
		s >> posx;
		s >> posy;
		s >> dir;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "sceneid", sceneid);
		lua::settable(L, -1, "posx", posx);
		lua::settable(L, -1, "posy", posy);
		lua::settable(L, -1, "dir", dir);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",sceneid=" << sceneid;
		buffer << ",posx=" << posx;
		buffer << ",posy=" << posy;
		buffer << ",dir=" << dir;
	}

public:
	int eid;
	short sceneid;
	short posx;
	short posy;
	short dir;
};

class MsgSyncEntityEffectNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 65 };

	MsgSyncEntityEffectNotify() :
		Message(Category, Id)
	{
		eid = 0;
		effect = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncEntityEffectNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << effect;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> effect;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "effect", effect);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",effect=" << effect;
	}

public:
	int eid;
	int effect;
};

class MsgSyncEntitySpeedNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 66 };

	MsgSyncEntitySpeedNotify() :
		Message(Category, Id)
	{
		eid = 0;
		speed = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncEntitySpeedNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << speed;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> speed;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "speed", speed);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",speed=" << speed;
	}

public:
	int eid;
	int speed;
};

class MsgSyncEntityLevelNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 67 };

	MsgSyncEntityLevelNotify() :
		Message(Category, Id)
	{
		eid = 0;
		maxhp = 0;
		hp = 0;
		maxmp = 0;
		mp = 0;
		lvl = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncEntityLevelNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 22;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << maxhp;
		s << hp;
		s << maxmp;
		s << mp;
		s << lvl;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> maxhp;
		s >> hp;
		s >> maxmp;
		s >> mp;
		s >> lvl;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "maxhp", maxhp);
		lua::settable(L, -1, "hp", hp);
		lua::settable(L, -1, "maxmp", maxmp);
		lua::settable(L, -1, "mp", mp);
		lua::settable(L, -1, "lvl", lvl);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",maxhp=" << maxhp;
		buffer << ",hp=" << hp;
		buffer << ",maxmp=" << maxmp;
		buffer << ",mp=" << mp;
		buffer << ",lvl=" << lvl;
	}

public:
	int eid;
	int maxhp;
	int hp;
	int maxmp;
	int mp;
	short lvl;
};

class MsgSyncEntityPKStateNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 68 };

	MsgSyncEntityPKStateNotify() :
		Message(Category, Id)
	{
		eid = 0;
		pkstate = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncEntityPKStateNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << pkstate;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> pkstate;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "pkstate", pkstate);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",pkstate=" << pkstate;
	}

public:
	int eid;
	int pkstate;
};

class MsgSyncEntityTitleNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 69 };

	MsgSyncEntityTitleNotify() :
		Message(Category, Id)
	{
		eid = 0;
		title = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncEntityTitleNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << title;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> title;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "title", title);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",title=" << title;
	}

public:
	int eid;
	int title;
};

class MsgFetchItemRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 70 };

	MsgFetchItemRequest() :
		Message(Category, Id)
	{
		eid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgFetchItemRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
	}

public:
	int eid;
};

class MsgFetchItemResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 71 };

	MsgFetchItemResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		sid = 0;
		posx = 0;
		posy = 0;
	}

	virtual const char *getName() const
	{
		return "MsgFetchItemResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 14;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << sid;
		s << posx;
		s << posy;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> sid;
		s >> posx;
		s >> posy;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "posx", posx);
		lua::settable(L, -1, "posy", posy);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",sid=" << sid;
		buffer << ",posx=" << posx;
		buffer << ",posy=" << posy;
	}

public:
	short errcode;
	int sid;
	int posx;
	int posy;
};

class MsgAbandonItemRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 72 };

	MsgAbandonItemRequest() :
		Message(Category, Id)
	{
		iid = 0;
		count = 0;
	}

	virtual const char *getName() const
	{
		return "MsgAbandonItemRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		s << count;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		s >> count;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "count", count);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",count=" << count;
	}

public:
	int iid;
	int count;
};

class MsgAbandonItemResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 73 };

	MsgAbandonItemResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		position = 0;
	}

	virtual const char *getName() const
	{
		return "MsgAbandonItemResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << position;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> position;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "position", position);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",position=" << position;
	}

public:
	short errcode;
	int position;
};

class MsgPickPlantRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 74 };

	MsgPickPlantRequest() :
		Message(Category, Id)
	{
		eid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPickPlantRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
	}

public:
	int eid;
};

class MsgPickPlantResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 75 };

	MsgPickPlantResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPickPlantResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgReviveEntityRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 80 };

	MsgReviveEntityRequest() :
		Message(Category, Id)
	{
		eid = 0;
		type = 0;
		subType = 0;
	}

	virtual const char *getName() const
	{
		return "MsgReviveEntityRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << type;
		s << subType;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> type;
		s >> subType;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "subType", subType);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",type=" << type;
		buffer << ",subType=" << subType;
	}

public:
	int eid;
	short type;
	short subType;
};

class MsgReviveEntityResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 81 };

	MsgReviveEntityResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		eid = 0;
		sceneid = 0;
		posx = 0;
		posy = 0;
	}

	virtual const char *getName() const
	{
		return "MsgReviveEntityResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << eid;
		s << sceneid;
		s << posx;
		s << posy;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> eid;
		s >> sceneid;
		s >> posx;
		s >> posy;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "sceneid", sceneid);
		lua::settable(L, -1, "posx", posx);
		lua::settable(L, -1, "posy", posy);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",eid=" << eid;
		buffer << ",sceneid=" << sceneid;
		buffer << ",posx=" << posx;
		buffer << ",posy=" << posy;
	}

public:
	short errcode;
	int eid;
	short sceneid;
	short posx;
	short posy;
};

class MsgGetSceneEntityInfoRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 100 };

	MsgGetSceneEntityInfoRequest() :
		Message(Category, Id)
	{
		eid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetSceneEntityInfoRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
	}

public:
	int eid;
};

struct geneInfo
{
public:
	geneInfo()
	{
		sid = 0;
		datax = 0;
		datay = 0;
		dataz = 0;
		datau = 0;
		srcpid = 0;
		duration = 0;
	}

	size_t getLength(bool ex) const
	{
		return 28;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << sid;
		s << datax;
		s << datay;
		s << dataz;
		s << datau;
		s << srcpid;
		s << duration;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> sid;
		s >> datax;
		s >> datay;
		s >> dataz;
		s >> datau;
		s >> srcpid;
		s >> duration;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "datax", datax);
		lua::settable(L, -1, "datay", datay);
		lua::settable(L, -1, "dataz", dataz);
		lua::settable(L, -1, "datau", datau);
		lua::settable(L, -1, "srcpid", srcpid);
		lua::settable(L, -1, "duration", duration);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "sid=" << sid;
		buffer << ",datax=" << datax;
		buffer << ",datay=" << datay;
		buffer << ",dataz=" << dataz;
		buffer << ",datau=" << datau;
		buffer << ",srcpid=" << srcpid;
		buffer << ",duration=" << duration;
	}

public:
	int sid;
	int datax;
	int datay;
	int dataz;
	int datau;
	int srcpid;
	int duration;
};

class MsgEntityPlayerInfoNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 102 };

	MsgEntityPlayerInfoNotify() :
		Message(Category, Id)
	{
		eid = 0;
		pid = 0;
		maxhp = 0;
		hp = 0;
		maxmp = 0;
		mp = 0;
		lvl = 0;
		staticid = 0;
		gender = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEntityPlayerInfoNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 32;
		length += sizeof(short) + name.size();
		length += sizeof(short);
		for (size_t i = 0; i < genelist.size(); ++i)
		{
			length += genelist[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << pid;
		s << name;
		s << maxhp;
		s << hp;
		s << maxmp;
		s << mp;
		s << lvl;
		s << staticid;
		s << gender;
		short genelist_vector_size = (short)genelist.size();
		s << genelist_vector_size;
		if (genelist_vector_size > 0)
		{
			for (auto it = genelist.begin(); it != genelist.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> pid;
		s >> name;
		s >> maxhp;
		s >> hp;
		s >> maxmp;
		s >> mp;
		s >> lvl;
		s >> staticid;
		s >> gender;
		int genelist_vector_size = s.read_int16();
		genelist.clear();
		while (genelist_vector_size > 0)
		{
			genelist_vector_size--;
			geneInfo val;
			val.unserialize(s, false);
			genelist.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "maxhp", maxhp);
		lua::settable(L, -1, "hp", hp);
		lua::settable(L, -1, "maxmp", maxmp);
		lua::settable(L, -1, "mp", mp);
		lua::settable(L, -1, "lvl", lvl);
		lua::settable(L, -1, "staticid", staticid);
		lua::settable(L, -1, "gender", gender);
		lua::newtable(lua::L);
		for (size_t i = 0; i < genelist.size(); ++i)
		{
			genelist[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "genelist");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",maxhp=" << maxhp;
		buffer << ",hp=" << hp;
		buffer << ",maxmp=" << maxmp;
		buffer << ",mp=" << mp;
		buffer << ",lvl=" << lvl;
		buffer << ",staticid=" << staticid;
		buffer << ",gender=" << gender;
		buffer << ",genelist=[";
		for (size_t i = 0; i < genelist.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			genelist[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int eid;
	int pid;
	std::string name;
	int maxhp;
	int hp;
	int maxmp;
	int mp;
	int lvl;
	short staticid;
	short gender;
	std::vector<geneInfo> genelist;
};

struct SceneLine
{
public:
	SceneLine()
	{
		line_id = 0;
		player_count = 0;
	}

	size_t getLength(bool ex) const
	{
		return 4;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << line_id;
		s << player_count;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> line_id;
		s >> player_count;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "line_id", line_id);
		lua::settable(L, -1, "player_count", player_count);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "line_id=" << line_id;
		buffer << ",player_count=" << player_count;
	}

public:
	short line_id;
	short player_count;
};

class MsgSceneLineInfoNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 152 };

	MsgSceneLineInfoNotify() :
		Message(Category, Id)
	{
		scene_static_id = 0;
		player_max_per_line = 0;
		can_choose_line = 0;
		enable = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSceneLineInfoNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 10;
		length += sizeof(short);
		for (size_t i = 0; i < lines.size(); ++i)
		{
			length += lines[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << scene_static_id;
		s << player_max_per_line;
		s << can_choose_line;
		s << enable;
		short lines_vector_size = (short)lines.size();
		s << lines_vector_size;
		if (lines_vector_size > 0)
		{
			for (auto it = lines.begin(); it != lines.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> scene_static_id;
		s >> player_max_per_line;
		s >> can_choose_line;
		s >> enable;
		int lines_vector_size = s.read_int16();
		lines.clear();
		while (lines_vector_size > 0)
		{
			lines_vector_size--;
			SceneLine val;
			val.unserialize(s, false);
			lines.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "scene_static_id", scene_static_id);
		lua::settable(L, -1, "player_max_per_line", player_max_per_line);
		lua::settable(L, -1, "can_choose_line", can_choose_line);
		lua::settable(L, -1, "enable", enable);
		lua::newtable(lua::L);
		for (size_t i = 0; i < lines.size(); ++i)
		{
			lines[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "lines");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "scene_static_id=" << scene_static_id;
		buffer << ",player_max_per_line=" << player_max_per_line;
		buffer << ",can_choose_line=" << can_choose_line;
		buffer << ",enable=" << enable;
		buffer << ",lines=[";
		for (size_t i = 0; i < lines.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			lines[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int scene_static_id;
	int player_max_per_line;
	char can_choose_line;
	char enable;
	std::vector<SceneLine> lines;
};

class MsgChooseSceneLineRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 153 };

	MsgChooseSceneLineRequest() :
		Message(Category, Id)
	{
		line_id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgChooseSceneLineRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << line_id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> line_id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "line_id", line_id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "line_id=" << line_id;
	}

public:
	short line_id;
};

class MsgChooseSceneLineResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 154 };

	MsgChooseSceneLineResponse() :
		Message(Category, Id)
	{
		line_id = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgChooseSceneLineResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << line_id;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> line_id;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "line_id", line_id);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "line_id=" << line_id;
		buffer << ",errcode=" << errcode;
	}

public:
	short line_id;
	short errcode;
};

class MsgUpdScenePropsNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 200 };

	MsgUpdScenePropsNotify() :
		Message(Category, Id)
	{
		prop = 0;
		data = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdScenePropsNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << prop;
		s << data;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> prop;
		s >> data;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "prop", prop);
		lua::settable(L, -1, "data", data);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "prop=" << prop;
		buffer << ",data=" << data;
	}

public:
	int prop;
	int data;
};

class MsgUpdSceneStringNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 220 };

	MsgUpdSceneStringNotify() :
		Message(Category, Id)
	{
		nidx = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdSceneStringNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short) + str.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << nidx;
		s << str;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> nidx;
		s >> str;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "nidx", nidx);
		lua::settable(L, -1, "str", str);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "nidx=" << nidx;
		buffer << ",str=" << str;
	}

public:
	int nidx;
	std::string str;
};

class MsgDogOptionRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 230 };

	MsgDogOptionRequest() :
		Message(Category, Id)
	{
		option = 0;
		data = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDogOptionRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << option;
		s << data;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> option;
		s >> data;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "option", option);
		lua::settable(L, -1, "data", data);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "option=" << option;
		buffer << ",data=" << data;
	}

public:
	int option;
	int data;
};

class MsgDogOptionResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 231 };

	MsgDogOptionResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDogOptionResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgGoFantianRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 233 };

	MsgGoFantianRequest() :
		Message(Category, Id)
	{
		mapid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGoFantianRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << mapid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> mapid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "mapid", mapid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "mapid=" << mapid;
	}

public:
	int mapid;
};

class MsgGoFantianNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 234 };

	MsgGoFantianNotify() :
		Message(Category, Id)
	{
		mapid = 0;
		type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGoFantianNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << mapid;
		s << type;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> mapid;
		s >> type;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "mapid", mapid);
		lua::settable(L, -1, "type", type);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "mapid=" << mapid;
		buffer << ",type=" << type;
	}

public:
	int mapid;
	int type;
};

class MsgSearchPlayerRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 240 };

	MsgSearchPlayerRequest() :
		Message(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSearchPlayerRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short) + name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << name;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> name;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",name=" << name;
	}

public:
	int pid;
	std::string name;
};

class MsgSearchPlayerResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 241 };

	MsgSearchPlayerResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		pid = 0;
		gender = 0;
		job = 0;
		reborn = 0;
		level = 0;
		weapon = 0;
		cloth = 0;
		wings = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSearchPlayerResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 24;
		length += sizeof(short) + name.size();
		length += sizeof(short) + guild.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << pid;
		s << name;
		s << gender;
		s << job;
		s << reborn;
		s << level;
		s << guild;
		s << weapon;
		s << cloth;
		s << wings;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> pid;
		s >> name;
		s >> gender;
		s >> job;
		s >> reborn;
		s >> level;
		s >> guild;
		s >> weapon;
		s >> cloth;
		s >> wings;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "job", job);
		lua::settable(L, -1, "reborn", reborn);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "guild", guild);
		lua::settable(L, -1, "weapon", weapon);
		lua::settable(L, -1, "cloth", cloth);
		lua::settable(L, -1, "wings", wings);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",gender=" << gender;
		buffer << ",job=" << job;
		buffer << ",reborn=" << reborn;
		buffer << ",level=" << level;
		buffer << ",guild=" << guild;
		buffer << ",weapon=" << weapon;
		buffer << ",cloth=" << cloth;
		buffer << ",wings=" << wings;
	}

public:
	short errcode;
	int pid;
	std::string name;
	char gender;
	char job;
	short reborn;
	short level;
	std::string guild;
	int weapon;
	int cloth;
	int wings;
};

class MsgGtclPortalNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 245 };

	MsgGtclPortalNotify() :
		Message(Category, Id)
	{
		flag = 0;
		portal_id = 0;
		pid = 0;
		gid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGtclPortalNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 16;
		length += sizeof(short) + pname.size();
		length += sizeof(short) + gname.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << flag;
		s << portal_id;
		s << pid;
		s << pname;
		s << gid;
		s << gname;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> flag;
		s >> portal_id;
		s >> pid;
		s >> pname;
		s >> gid;
		s >> gname;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "flag", flag);
		lua::settable(L, -1, "portal_id", portal_id);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "pname", pname);
		lua::settable(L, -1, "gid", gid);
		lua::settable(L, -1, "gname", gname);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "flag=" << flag;
		buffer << ",portal_id=" << portal_id;
		buffer << ",pid=" << pid;
		buffer << ",pname=" << pname;
		buffer << ",gid=" << gid;
		buffer << ",gname=" << gname;
	}

public:
	int flag;
	int portal_id;
	int pid;
	std::string pname;
	int gid;
	std::string gname;
};

class MsgPlayerUseSkillStartRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 247 };

	MsgPlayerUseSkillStartRequest() :
		Message(Category, Id)
	{
		skillid = 0;
		isEntity = 0;
		eid = 0;
		targetx = 0;
		targety = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerUseSkillStartRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return 17;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << skillid;
		s << isEntity;
		s << eid;
		s << targetx;
		s << targety;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> skillid;
		s >> isEntity;
		s >> eid;
		s >> targetx;
		s >> targety;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "skillid", skillid);
		lua::settable(L, -1, "isEntity", isEntity);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "targetx", targetx);
		lua::settable(L, -1, "targety", targety);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "skillid=" << skillid;
		buffer << ",isEntity=" << isEntity;
		buffer << ",eid=" << eid;
		buffer << ",targetx=" << targetx;
		buffer << ",targety=" << targety;
	}

public:
	int skillid;
	char isEntity;
	int eid;
	int targetx;
	int targety;
};

class MsgPlayerUseSkillStartResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 248 };

	MsgPlayerUseSkillStartResponse() :
		Message(Category, Id)
	{
		skillid = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerUseSkillStartResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << skillid;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> skillid;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "skillid", skillid);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "skillid=" << skillid;
		buffer << ",errcode=" << errcode;
	}

public:
	int skillid;
	short errcode;
};

class MsgEntityDressChangeNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 249 };

	MsgEntityDressChangeNotify() :
		Message(Category, Id)
	{
		eid = 0;
		type = 0;
		sid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEntityDressChangeNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << type;
		s << sid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> type;
		s >> sid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "sid", sid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",type=" << type;
		buffer << ",sid=" << sid;
	}

public:
	int eid;
	int type;
	int sid;
};

class MsgMapMeetPlayerCloneNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 251 };

	MsgMapMeetPlayerCloneNotify() :
		Message(Category, Id)
	{
		eid = 0;
		did = 0;
		level = 0;
		ownerpid = 0;
		maxhp = 0;
		hp = 0;
		dir = 0;
		posx = 0;
		posy = 0;
		skillLvl = 0;
		ownertype = 0;
		gender = 0;
		cloth = 0;
		weapon = 0;
		hat = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMapMeetPlayerCloneNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 48;
		length += sizeof(short) + name.size();
		length += sizeof(short) + ownername.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << did;
		s << level;
		s << name;
		s << ownerpid;
		s << ownername;
		s << maxhp;
		s << hp;
		s << dir;
		s << posx;
		s << posy;
		s << skillLvl;
		s << ownertype;
		s << gender;
		s << cloth;
		s << weapon;
		s << hat;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> did;
		s >> level;
		s >> name;
		s >> ownerpid;
		s >> ownername;
		s >> maxhp;
		s >> hp;
		s >> dir;
		s >> posx;
		s >> posy;
		s >> skillLvl;
		s >> ownertype;
		s >> gender;
		s >> cloth;
		s >> weapon;
		s >> hat;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "did", did);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "ownerpid", ownerpid);
		lua::settable(L, -1, "ownername", ownername);
		lua::settable(L, -1, "maxhp", maxhp);
		lua::settable(L, -1, "hp", hp);
		lua::settable(L, -1, "dir", dir);
		lua::settable(L, -1, "posx", posx);
		lua::settable(L, -1, "posy", posy);
		lua::settable(L, -1, "skillLvl", skillLvl);
		lua::settable(L, -1, "ownertype", ownertype);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "cloth", cloth);
		lua::settable(L, -1, "weapon", weapon);
		lua::settable(L, -1, "hat", hat);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",did=" << did;
		buffer << ",level=" << level;
		buffer << ",name=" << name;
		buffer << ",ownerpid=" << ownerpid;
		buffer << ",ownername=" << ownername;
		buffer << ",maxhp=" << maxhp;
		buffer << ",hp=" << hp;
		buffer << ",dir=" << dir;
		buffer << ",posx=" << posx;
		buffer << ",posy=" << posy;
		buffer << ",skillLvl=" << skillLvl;
		buffer << ",ownertype=" << ownertype;
		buffer << ",gender=" << gender;
		buffer << ",cloth=" << cloth;
		buffer << ",weapon=" << weapon;
		buffer << ",hat=" << hat;
	}

public:
	int eid;
	int did;
	short level;
	std::string name;
	int ownerpid;
	std::string ownername;
	int maxhp;
	int hp;
	short dir;
	short posx;
	short posy;
	int skillLvl;
	short ownertype;
	short gender;
	int cloth;
	int weapon;
	int hat;
};

class MsgSyncTitleEffect : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 252 };

	MsgSyncTitleEffect() :
		Message(Category, Id)
	{
		eid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncTitleEffect";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
	}

public:
	int eid;
};

struct BossDetail
{
public:
	BossDetail()
	{
		index = 0;
		bossId = 0;
		alive = 0;
		freshTime = 0;
	}

	size_t getLength(bool ex) const
	{
		return 14;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << index;
		s << bossId;
		s << alive;
		s << freshTime;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> index;
		s >> bossId;
		s >> alive;
		s >> freshTime;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "index", index);
		lua::settable(L, -1, "bossId", bossId);
		lua::settable(L, -1, "alive", alive);
		lua::settable(L, -1, "freshTime", freshTime);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "index=" << index;
		buffer << ",bossId=" << bossId;
		buffer << ",alive=" << alive;
		buffer << ",freshTime=" << freshTime;
	}

public:
	int index;
	int bossId;
	short alive;
	int freshTime;
};

class MsgSyncSceneBossInfoNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 257 };

	MsgSyncSceneBossInfoNotify() :
		Message(Category, Id)
	{
		sceneId = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncSceneBossInfoNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short);
		for (size_t i = 0; i < list.size(); ++i)
		{
			length += list[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << sceneId;
		short list_vector_size = (short)list.size();
		s << list_vector_size;
		if (list_vector_size > 0)
		{
			for (auto it = list.begin(); it != list.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> sceneId;
		int list_vector_size = s.read_int16();
		list.clear();
		while (list_vector_size > 0)
		{
			list_vector_size--;
			BossDetail val;
			val.unserialize(s, false);
			list.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sceneId", sceneId);
		lua::newtable(lua::L);
		for (size_t i = 0; i < list.size(); ++i)
		{
			list[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "list");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "sceneId=" << sceneId;
		buffer << ",list=[";
		for (size_t i = 0; i < list.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			list[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int sceneId;
	std::vector<BossDetail> list;
};

class MsgGodWeaponAttackEffectNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 259 };

	MsgGodWeaponAttackEffectNotify() :
		Message(Category, Id)
	{
		bossId = 0;
		effectType = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGodWeaponAttackEffectNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << bossId;
		s << effectType;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> bossId;
		s >> effectType;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "bossId", bossId);
		lua::settable(L, -1, "effectType", effectType);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "bossId=" << bossId;
		buffer << ",effectType=" << effectType;
	}

public:
	int bossId;
	int effectType;
};

class MsgMapMeetMinerNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 260 };

	MsgMapMeetMinerNotify() :
		Message(Category, Id)
	{
		eid = 0;
		did = 0;
		ownerpid = 0;
		dir = 0;
		posx = 0;
		posy = 0;
		ownertype = 0;
		cntdown = 0;
		state = 0;
		lodeLevel = 0;
		gender = 0;
		cloth = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMapMeetMinerNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 38;
		length += sizeof(short) + ownername.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << did;
		s << ownerpid;
		s << ownername;
		s << dir;
		s << posx;
		s << posy;
		s << ownertype;
		s << cntdown;
		s << state;
		s << lodeLevel;
		s << gender;
		s << cloth;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> did;
		s >> ownerpid;
		s >> ownername;
		s >> dir;
		s >> posx;
		s >> posy;
		s >> ownertype;
		s >> cntdown;
		s >> state;
		s >> lodeLevel;
		s >> gender;
		s >> cloth;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "did", did);
		lua::settable(L, -1, "ownerpid", ownerpid);
		lua::settable(L, -1, "ownername", ownername);
		lua::settable(L, -1, "dir", dir);
		lua::settable(L, -1, "posx", posx);
		lua::settable(L, -1, "posy", posy);
		lua::settable(L, -1, "ownertype", ownertype);
		lua::settable(L, -1, "cntdown", cntdown);
		lua::settable(L, -1, "state", state);
		lua::settable(L, -1, "lodeLevel", lodeLevel);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "cloth", cloth);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",did=" << did;
		buffer << ",ownerpid=" << ownerpid;
		buffer << ",ownername=" << ownername;
		buffer << ",dir=" << dir;
		buffer << ",posx=" << posx;
		buffer << ",posy=" << posy;
		buffer << ",ownertype=" << ownertype;
		buffer << ",cntdown=" << cntdown;
		buffer << ",state=" << state;
		buffer << ",lodeLevel=" << lodeLevel;
		buffer << ",gender=" << gender;
		buffer << ",cloth=" << cloth;
	}

public:
	int eid;
	int did;
	int ownerpid;
	std::string ownername;
	short dir;
	short posx;
	short posy;
	short ownertype;
	int cntdown;
	short state;
	int lodeLevel;
	int gender;
	int cloth;
};

class MsgMapMinerSateChangeNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 261 };

	MsgMapMinerSateChangeNotify() :
		Message(Category, Id)
	{
		eid = 0;
		state = 0;
		datax = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMapMinerSateChangeNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << state;
		s << datax;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> state;
		s >> datax;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "state", state);
		lua::settable(L, -1, "datax", datax);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",state=" << state;
		buffer << ",datax=" << datax;
	}

public:
	int eid;
	short state;
	int datax;
};

class MsgBossRefreshWarnNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 262 };

	MsgBossRefreshWarnNotify() :
		Message(Category, Id)
	{
		bossId = 0;
	}

	virtual const char *getName() const
	{
		return "MsgBossRefreshWarnNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << bossId;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> bossId;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "bossId", bossId);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "bossId=" << bossId;
	}

public:
	int bossId;
};

class MsgPetRunRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 263 };

	MsgPetRunRequest() :
		Message(Category, Id)
	{
		dir = 0;
		posx = 0;
		posy = 0;
		mMoveStep = 0;
		SkipTime = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPetRunRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << dir;
		s << posx;
		s << posy;
		s << mMoveStep;
		s << SkipTime;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> dir;
		s >> posx;
		s >> posy;
		s >> mMoveStep;
		s >> SkipTime;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "dir", dir);
		lua::settable(L, -1, "posx", posx);
		lua::settable(L, -1, "posy", posy);
		lua::settable(L, -1, "mMoveStep", mMoveStep);
		lua::settable(L, -1, "SkipTime", SkipTime);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "dir=" << dir;
		buffer << ",posx=" << posx;
		buffer << ",posy=" << posy;
		buffer << ",mMoveStep=" << mMoveStep;
		buffer << ",SkipTime=" << SkipTime;
	}

public:
	short dir;
	short posx;
	short posy;
	short mMoveStep;
	int SkipTime;
};

class MsgPetRunResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 264 };

	MsgPetRunResponse() :
		Message(Category, Id)
	{
		success = 0;
		dir = 0;
		posx = 0;
		posy = 0;
		mMoveStep = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPetRunResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << success;
		s << dir;
		s << posx;
		s << posy;
		s << mMoveStep;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> success;
		s >> dir;
		s >> posx;
		s >> posy;
		s >> mMoveStep;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "success", success);
		lua::settable(L, -1, "dir", dir);
		lua::settable(L, -1, "posx", posx);
		lua::settable(L, -1, "posy", posy);
		lua::settable(L, -1, "mMoveStep", mMoveStep);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "success=" << success;
		buffer << ",dir=" << dir;
		buffer << ",posx=" << posx;
		buffer << ",posy=" << posy;
		buffer << ",mMoveStep=" << mMoveStep;
	}

public:
	short success;
	short dir;
	short posx;
	short posy;
	short mMoveStep;
};

class MsgPetFetchItemRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 265 };

	MsgPetFetchItemRequest() :
		Message(Category, Id)
	{
		eid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPetFetchItemRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
	}

public:
	int eid;
};

class MsgPetFetchItemResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 266 };

	MsgPetFetchItemResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		sid = 0;
		posx = 0;
		posy = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPetFetchItemResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 14;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << sid;
		s << posx;
		s << posy;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> sid;
		s >> posx;
		s >> posy;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "posx", posx);
		lua::settable(L, -1, "posy", posy);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",sid=" << sid;
		buffer << ",posx=" << posx;
		buffer << ",posy=" << posy;
	}

public:
	short errcode;
	int sid;
	int posx;
	int posy;
};

class MsgEntityMonsterInfoNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 267 };

	MsgEntityMonsterInfoNotify() :
		Message(Category, Id)
	{
		eid = 0;
		staticid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEntityMonsterInfoNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 6;
		length += sizeof(short);
		for (size_t i = 0; i < genelist.size(); ++i)
		{
			length += genelist[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << staticid;
		short genelist_vector_size = (short)genelist.size();
		s << genelist_vector_size;
		if (genelist_vector_size > 0)
		{
			for (auto it = genelist.begin(); it != genelist.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> staticid;
		int genelist_vector_size = s.read_int16();
		genelist.clear();
		while (genelist_vector_size > 0)
		{
			genelist_vector_size--;
			geneInfo val;
			val.unserialize(s, false);
			genelist.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "staticid", staticid);
		lua::newtable(lua::L);
		for (size_t i = 0; i < genelist.size(); ++i)
		{
			genelist[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "genelist");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",staticid=" << staticid;
		buffer << ",genelist=[";
		for (size_t i = 0; i < genelist.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			genelist[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int eid;
	short staticid;
	std::vector<geneInfo> genelist;
};

class MsgEntityReviveNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 268 };

	MsgEntityReviveNotify() :
		Message(Category, Id)
	{
		eid = 0;
		flags = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEntityReviveNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << flags;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> flags;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "flags", flags);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",flags=" << flags;
	}

public:
	int eid;
	int flags;
};

class MsgFabaoSkillNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 269 };

	MsgFabaoSkillNotify() :
		Message(Category, Id)
	{
		skillid = 0;
		eid = 0;
		dposx = 0;
		dposy = 0;
	}

	virtual const char *getName() const
	{
		return "MsgFabaoSkillNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 16;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << skillid;
		s << eid;
		s << dposx;
		s << dposy;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> skillid;
		s >> eid;
		s >> dposx;
		s >> dposy;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "skillid", skillid);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "dposx", dposx);
		lua::settable(L, -1, "dposy", dposy);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "skillid=" << skillid;
		buffer << ",eid=" << eid;
		buffer << ",dposx=" << dposx;
		buffer << ",dposy=" << dposy;
	}

public:
	int skillid;
	int eid;
	int dposx;
	int dposy;
};

class MsgEntityComponetEffectNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 272 };

	MsgEntityComponetEffectNotify() :
		Message(Category, Id)
	{
		eid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEntityComponetEffectNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short);
		length += effectlist.size() * 2;
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		short effectlist_vector_size = (short)effectlist.size();
		s << effectlist_vector_size;
		if (effectlist_vector_size > 0)
		{
			for (auto it = effectlist.begin(); it != effectlist.end(); ++it)
			{
				s << *it;
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		int effectlist_vector_size = s.read_int16();
		effectlist.clear();
		while (effectlist_vector_size > 0)
		{
			effectlist_vector_size--;
			short val;
			s >> val;
			effectlist.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::newtable(lua::L);
		for (size_t i = 0; i < effectlist.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, effectlist[i]);
		}
		lua::settable(L, -2, "effectlist");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",effectlist=[";
		for (size_t i = 0; i < effectlist.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << effectlist[i];
		}
		buffer << "]";
	}

public:
	int eid;
	std::vector<short> effectlist;
};

class MsgSyncMonsterBloodStatusNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 274 };

	MsgSyncMonsterBloodStatusNotify() :
		Message(Category, Id)
	{
		eid = 0;
		sid = 0;
		percent = 0;
		status = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncMonsterBloodStatusNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 16;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << sid;
		s << percent;
		s << status;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> sid;
		s >> percent;
		s >> status;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "percent", percent);
		lua::settable(L, -1, "status", status);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",sid=" << sid;
		buffer << ",percent=" << percent;
		buffer << ",status=" << status;
	}

public:
	int eid;
	int sid;
	int percent;
	int status;
};

class MsgEntityMiningRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 275 };

	MsgEntityMiningRequest() :
		Message(Category, Id)
	{
		dir = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEntityMiningRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << dir;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> dir;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "dir", dir);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "dir=" << dir;
	}

public:
	short dir;
};

class MsgEntityMiningNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 276 };

	MsgEntityMiningNotify() :
		Message(Category, Id)
	{
		eid = 0;
		dir = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEntityMiningNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << dir;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> dir;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "dir", dir);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",dir=" << dir;
	}

public:
	int eid;
	short dir;
};

class MsgEntityPropChangeNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SCENE, Id = 277 };

	MsgEntityPropChangeNotify() :
		Message(Category, Id)
	{
		eid = 0;
		propid = 0;
		data = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEntityPropChangeNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << propid;
		s << data;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> propid;
		s >> data;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "propid", propid);
		lua::settable(L, -1, "data", data);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",propid=" << propid;
		buffer << ",data=" << data;
	}

public:
	int eid;
	int propid;
	int data;
};

#endif	//_MSG_SCENE_H_INCLUDED
