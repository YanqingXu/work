//
//Generated by lua
//2009-2012	(C) XianFeng Inc. Reserved
//
<%
local ofilename = ...

local ofiletag = ofilename:match("([%w_]*.h)")
ofiletag = ofiletag:gsub("DBMsg", "DbMsg")
ofiletag = ofiletag:gsub("(%u)", function(a) return "_" .. a end)
ofiletag = ofiletag:gsub("(%.)", function(a) return "_" end)
ofiletag = ofiletag:upper()
ofiletag = ofiletag .. "_INCLUDED"

local msgex = false
for _, msg in ipairs(messages) do
	if msg.define == "class" and msg.base == "MessageEx" then
		msgex = true
		break
	end
end
%>

#ifndef <%=ofiletag%>
#define <%=ofiletag%>

#include "category.h"
<% if not msgex then %>
#include "common/Message.h"
<% else %>
#include "common/MessageEx.h"
<% end %>
<%
local function cpptype(t)
	local type_map = {
		int8	= "char",
		uint8	= "unsigned char",
		int16	= "short",
		uint16	= "unsigned short",
		int32	= "int",
		uint32	= "unsigned int",
		int64	= "long long",
		uint64	= "unsigned long long",
		float	= "float",
		double	= "double",
		string	= "std::string",
	}
	
	if type_map[t] then
		return type_map[t]
	else
		return t
	end
end

local function is_number_type(t)
	return ((t == "int8") or (t == "uint8") or
		(t == "int16") or (t == "uint16") or
		(t == "int32") or (t == "uint32") or
		(t == "int64") or (t == "uint64") or
		(t == "float") or (t == "double"))
end

local function is_string_type(t)
	return (t == "string")
end

local function get_number_length(t)
	local lenght_map = {
		int8	= 1,
		uint8	= 1,
		int16	= 2,
		uint16	= 2,
		int32	= 4,
		uint32	= 4,
		int64	= 8,
		uint64	= 8,
		float	= 4,
		double	= 8,
	}
	
	return lenght_map[t] or 0
end

for _, msg in ipairs(messages) do
	local virtual = ""
	if msg.define == "class" then
		virtual = "virtual "
	end

	msgex = (msg.define == "class" and msg.base == "MessageEx")
%>

<%=msg.define%> <%=msg.name%><%if msg.base then%> : public <%=msg.base%><%end%>
{
public:
	<% if msg.define == "class" then %>
	enum { Category = <%=msg.category%>, Id = <%=msg.id%> };

	<% end %>
	<%=msg.name%>()<%if msg.base then%> :
		<%=msg.base%>(Category, Id)
	<%end%>
	{
		<%
		for _, attr in ipairs(msg.attributes) do
			if not attr.vector and is_number_type(attr.type) then
		%>
		<%=attr.name%> = 0;
		<%
			end
		end
		%>
	}
	<% if msg.define == "class" then %>

	virtual const char *getName() const
	{
		return "<%=msg.name%>";
	}
	
	virtual bool canSendToCrossFromClient() const
	{
		<% if msg.canSendToCrossFromCli and msg.canSendToCrossFromCli == true then %>
		return true;
		<% else %>
		return false;
		<% end %>
	}
	<% end %>
	<% if msg.base == "MessageEx" then %>

	virtual int getSalt() const
	{
		<% if msg.salt == nil then %>
		return 0;
		<% else %>
		return <%=msg.salt%>;
		<% end %>
	}
	
	virtual bool getSendBack() const
	{
		<% if msg.send_back == nil or msg.send_back == true then %>
		return true;
		<% else %>
		return false;
		<% end %>
	}
	<% end %>
	<% if msg.category ~= "MSG_CATEGORY_CONTROL" then %>

	<%=virtual%>size_t getLength(<%if msg.define == "struct" then%>bool ex<%end%>) const
	{
		<%
		local fixed_only = true
		local fixed_length = 0
		for _, attr in ipairs(msg.attributes) do
			if is_number_type(attr.type) and not attr.vector then
				fixed_length = fixed_length + get_number_length(attr.type)
			else
				fixed_only = false
			end
		end
		
		if fixed_only then
			if msg.base and msg.base ~= "Message" and fixed_length > 0 then
		%>
		return __super::getLength() + <%=fixed_length%>;
		<%
			elseif msg.base and msg.base ~= "Message" then
		%>
		return __super::getLength();
		<%
			else
		%>
		return <%=fixed_length%>;
		<%
			end
		else
			if msg.base and msg.base ~= "Message" and fixed_length > 0 then
		%>
		size_t length = __super::getLength() + <%=fixed_length%>;
		<%
			elseif msg.base and msg.base ~= "Message" then
		%>
		size_t length = __super::getLength();
		<%
			else
		%>
		size_t length = <%=fixed_length%>;
		<%
			end

			for _, attr in ipairs(msg.attributes) do
				if not attr.vector then
					if is_string_type(attr.type) then
		%>
		length += sizeof(short) + <%=attr.name%>.size();
		<%
					elseif not is_number_type(attr.type) then
		%>
		length += <%=attr.name%>.getLength(<%if msg.define == "class" then if msg.base == "MessageEx" then %>true<%else%>false<%end else%>ex<%end%>);
		<%
					end
				else
					if msg.define == "class" then
						if msg.base == "MessageEx" then
		%>
		length += sizeof(int);
		<%				else %>
		length += sizeof(short);
		<%
						end
					else
		%>
		length += ex ? sizeof(int) : sizeof(short);
		<%
					end
					if is_number_type(attr.type) then
		%>
		length += <%=attr.name%>.size() * <%=get_number_length(attr.type)%>;
		<%			else %>
		for (size_t i = 0; i < <%=attr.name%>.size(); ++i)
		{
		<%
						if is_string_type(attr.type) then
		%>
			length += sizeof(short) + <%=attr.name%>[i].size();
		<%
						else
		%>
			length += <%=attr.name%>[i].getLength(<%if msg.define == "class" then if msg.base == "MessageEx" then %>true<%else%>false<%end else%>ex<%end%>);
		<%				end %>
		}
		<%
					end
				end
			end
		%>
		return length;
		<%end%>
	}

	<%=virtual%>bool serialize(ByteStream &s<%if msg.define == "struct" then%>, bool ex<%end%>) const
	{
		<% if msg.base and msg.base ~= "Message" then %>
		__super::serialize(s);
		<% end %>
		<%
		for _, attr in ipairs(msg.attributes) do
			if not attr.vector then
				if is_number_type(attr.type) or is_string_type(attr.type) then
		%>
		s << <%=attr.name%>;
		<%		else %>
		<%=attr.name%>.serialize(s, <%if msg.define == "class" then if msg.base == "MessageEx" then %>true<%else%>false<%end else%>ex<%end%>);
		<%
				end
			else
				if msg.define == "class" then
					if msg.base == "MessageEx" then
		%>
		int <%=attr.name%>_vector_size = (int)<%=attr.name%>.size();
		s << <%=attr.name%>_vector_size;
		<%			else %>
		short <%=attr.name%>_vector_size = (short)<%=attr.name%>.size();
		s << <%=attr.name%>_vector_size;
		<%
					end
				else
		%>
		int <%=attr.name%>_vector_size = ex ? (int)<%=attr.name%>.size() : (short)<%=attr.name%>.size();
		if (ex)
		{
			s << <%=attr.name%>_vector_size;
		}
		else
		{
			s << (short)<%=attr.name%>_vector_size;
		}
		<%		end %>
		if (<%=attr.name%>_vector_size > 0)
		{
			for (auto it = <%=attr.name%>.begin(); it != <%=attr.name%>.end(); ++it)
			{
		<%		if is_number_type(attr.type) or is_string_type(attr.type) then %>
				s << *it;
		<%		else %>
				(*it).serialize(s, <%if msg.define == "class" then if msg.base == "MessageEx" then %>true<%else%>false<%end else%>ex<%end%>);
		<%		end %>
			}
		}
		<%
			end
		end
		%>
		return true;
	}

	<%=virtual%>bool unserialize(ByteStream &s<%if msg.define == "struct" then%>, bool ex<%end%>)
	{
		<% if msg.base and msg.base ~= "Message" then %>
		__super::unserialize(s);
		<% end %>
		<%
		for _, attr in ipairs(msg.attributes) do
			if not attr.vector then
				if is_number_type(attr.type) or is_string_type(attr.type) then
		%>
		s >> <%=attr.name%>;
		<%		else %>
		<%=attr.name%>.unserialize(s, <%if msg.define == "class" then if msg.base == "MessageEx" then %>true<%else%>false<%end else%>ex<%end%>);
		<%
				end
			else
				if msg.define == "class" then
					if msg.base == "MessageEx" then
		%>
		int <%=attr.name%>_vector_size = s.read_int32();
		<%			else %>
		int <%=attr.name%>_vector_size = s.read_int16();
		<%
					end
				else
		%>
		int <%=attr.name%>_vector_size = ex ? s.read_int32() : s.read_int16();
		<%		end %>
		<%=attr.name%>.clear();
		while (<%=attr.name%>_vector_size > 0)
		{
			<%=attr.name%>_vector_size--;
			<%=cpptype(attr.type)%> val;
		<%		if is_number_type(attr.type) or is_string_type(attr.type) then %>
			s >> val;
		<%		else %>
			val.unserialize(s, <%if msg.define == "class" then if msg.base == "MessageEx" then %>true<%else%>false<%end else%>ex<%end%>);
		<%		end %>
			<%=attr.name%>.push_back(val);
		}
		<%
			end
		end
		%>
		return true;
	}

	<%=virtual%>void push(lua_State *L) const
	{
		<% if msg.base == "MessageEx" then %>
		<% end %>
		lua::newtable(lua::L);
		<%
		for _, attr in ipairs(msg.attributes) do
			if not attr.vector then
				if is_number_type(attr.type) or is_string_type(attr.type) then
		%>
		lua::settable(L, -1, "<%=attr.name%>", <%=attr.name%>);
		<% 		else %>
		<%=attr.name%>.push(L);
		lua::settable(L, -1, "<%=attr.name%>");
		<%
				end
			else
		%>
		lua::newtable(lua::L);
		for (size_t i = 0; i < <%=attr.name%>.size(); ++i)
		{
		<% 		if is_number_type(attr.type) or is_string_type(attr.type) then %>
			lua::settable(L, -1, (int)i+1, <%=attr.name%>[i]);
		<% 		else %>
			<%=attr.name%>[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		<% 		end %>
		}
		lua::settable(L, -2, "<%=attr.name%>");
		<%
			end
		end
		%>
	}

	<%=virtual%>void dump(DumpBuffer &buffer)
	{
		<%
		local comma = ""
		if msg.base == "MessageEx" then
			comma = ","
		%>
		__super::dump(buffer);
		<%
		end

		for _, attr in ipairs(msg.attributes) do
			if is_number_type(attr.type) or is_string_type(attr.type) then
				if attr.vector then
		%>
		buffer << "<%=comma%><%=attr.name%>=[";
		for (size_t i = 0; i < <%=attr.name%>.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << <%=attr.name%>[i];
		}
		buffer << "]";
		<%
				else
		%>
		buffer << "<%=comma%><%=attr.name%>=" << <%=attr.name%>;
		<%
				end
			else
				if attr.vector then
		%>
		buffer << "<%=comma%><%=attr.name%>=[";
		for (size_t i = 0; i < <%=attr.name%>.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			<%=attr.name%>[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
		<%
				else
		%>
		buffer << "<%=comma%><%=attr.name%>={";
		<%=attr.name%>.dump(buffer);
		buffer << "}";
		<%
				end
			end

			comma = ","
		end
		%>
	}
	<% end %>

public:
	<%
	for _, attr in ipairs(msg.attributes) do
		if not attr.vector then
	%>
	<%=cpptype(attr.type)%> <%=attr.name%>;<%if attr.desc then%> //<%=attr.desc%> <%end%>
	<%	else %>
	std::vector<<%=cpptype(attr.type)%>> <%=attr.name%>;<%if attr.desc then%> //<%=attr.desc%> <%end%>
	<%
		end
	end
	%>
};
<%
end
%>

#endif	//<%=ofiletag%>
