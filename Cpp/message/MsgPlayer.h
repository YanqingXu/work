//
//Generated by lua
//2009-2012	(C) XianFeng Inc. Reserved
//

#ifndef _MSG_PLAYER_H_INCLUDED
#define _MSG_PLAYER_H_INCLUDED

#include "category.h"
#include "common/Message.h"

struct SkillInfo
{
public:
	SkillInfo()
	{
		sid = 0;
		lvl = 0;
	}

	size_t getLength(bool ex) const
	{
		return 8;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << sid;
		s << lvl;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> sid;
		s >> lvl;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "lvl", lvl);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "sid=" << sid;
		buffer << ",lvl=" << lvl;
	}

public:
	int sid;
	int lvl;
};

struct GeneInfo
{
public:
	GeneInfo()
	{
		gid = 0;
		duration = 0;
		datax = 0;
		datay = 0;
		dataz = 0;
	}

	size_t getLength(bool ex) const
	{
		return 20;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << gid;
		s << duration;
		s << datax;
		s << datay;
		s << dataz;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> gid;
		s >> duration;
		s >> datax;
		s >> datay;
		s >> dataz;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "gid", gid);
		lua::settable(L, -1, "duration", duration);
		lua::settable(L, -1, "datax", datax);
		lua::settable(L, -1, "datay", datay);
		lua::settable(L, -1, "dataz", dataz);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "gid=" << gid;
		buffer << ",duration=" << duration;
		buffer << ",datax=" << datax;
		buffer << ",datay=" << datay;
		buffer << ",dataz=" << dataz;
	}

public:
	int gid;
	int duration;
	int datax;
	int datay;
	int dataz;
};

class MsgUpdPlayerBaseNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 6 };

	MsgUpdPlayerBaseNotify() :
		Message(Category, Id)
	{
		mPid = 0;
		mJob = 0;
		mGender = 0;
		cloth = 0;
		wing = 0;
		weapon = 0;
		hat = 0;
		chenghao = 0;
		chenghao2 = 0;
		chenghao3 = 0;
		chenghao4 = 0;
		chenghao5 = 0;
		jingling = 0;
		hunhuan = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdPlayerBaseNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 50;
		length += sizeof(short) + mName.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << mName;
		s << mPid;
		s << mJob;
		s << mGender;
		s << cloth;
		s << wing;
		s << weapon;
		s << hat;
		s << chenghao;
		s << chenghao2;
		s << chenghao3;
		s << chenghao4;
		s << chenghao5;
		s << jingling;
		s << hunhuan;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> mName;
		s >> mPid;
		s >> mJob;
		s >> mGender;
		s >> cloth;
		s >> wing;
		s >> weapon;
		s >> hat;
		s >> chenghao;
		s >> chenghao2;
		s >> chenghao3;
		s >> chenghao4;
		s >> chenghao5;
		s >> jingling;
		s >> hunhuan;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "mName", mName);
		lua::settable(L, -1, "mPid", mPid);
		lua::settable(L, -1, "mJob", mJob);
		lua::settable(L, -1, "mGender", mGender);
		lua::settable(L, -1, "cloth", cloth);
		lua::settable(L, -1, "wing", wing);
		lua::settable(L, -1, "weapon", weapon);
		lua::settable(L, -1, "hat", hat);
		lua::settable(L, -1, "chenghao", chenghao);
		lua::settable(L, -1, "chenghao2", chenghao2);
		lua::settable(L, -1, "chenghao3", chenghao3);
		lua::settable(L, -1, "chenghao4", chenghao4);
		lua::settable(L, -1, "chenghao5", chenghao5);
		lua::settable(L, -1, "jingling", jingling);
		lua::settable(L, -1, "hunhuan", hunhuan);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "mName=" << mName;
		buffer << ",mPid=" << mPid;
		buffer << ",mJob=" << mJob;
		buffer << ",mGender=" << mGender;
		buffer << ",cloth=" << cloth;
		buffer << ",wing=" << wing;
		buffer << ",weapon=" << weapon;
		buffer << ",hat=" << hat;
		buffer << ",chenghao=" << chenghao;
		buffer << ",chenghao2=" << chenghao2;
		buffer << ",chenghao3=" << chenghao3;
		buffer << ",chenghao4=" << chenghao4;
		buffer << ",chenghao5=" << chenghao5;
		buffer << ",jingling=" << jingling;
		buffer << ",hunhuan=" << hunhuan;
	}

public:
	std::string mName;
	int mPid;
	char mJob;
	char mGender;
	int cloth;
	int wing;
	int weapon;
	int hat;
	int chenghao;
	int chenghao2;
	int chenghao3;
	int chenghao4;
	int chenghao5;
	int jingling;
	int hunhuan;
};

class MsgUpdPlayerCombatDataAllNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 7 };

	MsgUpdPlayerCombatDataAllNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgUpdPlayerCombatDataAllNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		length += combatdata.size() * 4;
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short combatdata_vector_size = (short)combatdata.size();
		s << combatdata_vector_size;
		if (combatdata_vector_size > 0)
		{
			for (auto it = combatdata.begin(); it != combatdata.end(); ++it)
			{
				s << *it;
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int combatdata_vector_size = s.read_int16();
		combatdata.clear();
		while (combatdata_vector_size > 0)
		{
			combatdata_vector_size--;
			int val;
			s >> val;
			combatdata.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < combatdata.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, combatdata[i]);
		}
		lua::settable(L, -2, "combatdata");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "combatdata=[";
		for (size_t i = 0; i < combatdata.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << combatdata[i];
		}
		buffer << "]";
	}

public:
	std::vector<int> combatdata;
};

class MsgUpdPlayerCombatDataNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 10 };

	MsgUpdPlayerCombatDataNotify() :
		Message(Category, Id)
	{
		opcode = 0;
		type = 0;
		data = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdPlayerCombatDataNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		s << type;
		s << data;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		s >> type;
		s >> data;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "data", data);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",type=" << type;
		buffer << ",data=" << data;
	}

public:
	int opcode;
	short type;
	int data;
};

class MsgUpdPlayerPropsDataRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 12 };

	MsgUpdPlayerPropsDataRequest() :
		Message(Category, Id)
	{
		opcode = 0;
		type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdPlayerPropsDataRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		s << type;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		s >> type;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "type", type);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",type=" << type;
	}

public:
	int opcode;
	short type;
};

class MsgUpdPlayerPropsDataNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 13 };

	MsgUpdPlayerPropsDataNotify() :
		Message(Category, Id)
	{
		opcode = 0;
		type = 0;
		data = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdPlayerPropsDataNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		s << type;
		s << data;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		s >> type;
		s >> data;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "data", data);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",type=" << type;
		buffer << ",data=" << data;
	}

public:
	int opcode;
	short type;
	int data;
};

class MsgUpdPlayerSkillDataNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 14 };

	MsgUpdPlayerSkillDataNotify() :
		Message(Category, Id)
	{
		opcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdPlayerSkillDataNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short);
		for (size_t i = 0; i < skilldata.size(); ++i)
		{
			length += skilldata[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		short skilldata_vector_size = (short)skilldata.size();
		s << skilldata_vector_size;
		if (skilldata_vector_size > 0)
		{
			for (auto it = skilldata.begin(); it != skilldata.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		int skilldata_vector_size = s.read_int16();
		skilldata.clear();
		while (skilldata_vector_size > 0)
		{
			skilldata_vector_size--;
			SkillInfo val;
			val.unserialize(s, false);
			skilldata.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		lua::newtable(lua::L);
		for (size_t i = 0; i < skilldata.size(); ++i)
		{
			skilldata[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "skilldata");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",skilldata=[";
		for (size_t i = 0; i < skilldata.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			skilldata[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int opcode;
	std::vector<SkillInfo> skilldata;
};

class MsgUpdPlayerLvlExpNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 15 };

	MsgUpdPlayerLvlExpNotify() :
		Message(Category, Id)
	{
		opcode = 0;
		mExperience = 0;
		mExperienceNext = 0;
		mLevel = 0;
		oldlvl = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdPlayerLvlExpNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 26;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		s << mExperience;
		s << mExperienceNext;
		s << mLevel;
		s << oldlvl;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		s >> mExperience;
		s >> mExperienceNext;
		s >> mLevel;
		s >> oldlvl;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "mExperience", mExperience);
		lua::settable(L, -1, "mExperienceNext", mExperienceNext);
		lua::settable(L, -1, "mLevel", mLevel);
		lua::settable(L, -1, "oldlvl", oldlvl);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",mExperience=" << mExperience;
		buffer << ",mExperienceNext=" << mExperienceNext;
		buffer << ",mLevel=" << mLevel;
		buffer << ",oldlvl=" << oldlvl;
	}

public:
	int opcode;
	long long mExperience;
	long long mExperienceNext;
	short mLevel;
	int oldlvl;
};

class MsgUpdPlayerHPNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 29 };

	MsgUpdPlayerHPNotify() :
		Message(Category, Id)
	{
		hp = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdPlayerHPNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << hp;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> hp;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "hp", hp);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "hp=" << hp;
	}

public:
	int hp;
};

class MsgUpdPlayerMPNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 28 };

	MsgUpdPlayerMPNotify() :
		Message(Category, Id)
	{
		mp = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdPlayerMPNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << mp;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> mp;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "mp", mp);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "mp=" << mp;
	}

public:
	int mp;
};

class MsgUpdPlayerDetailNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 30 };

	MsgUpdPlayerDetailNotify() :
		Message(Category, Id)
	{
		bagslot = 0;
		storeslot = 0;
		lingfu = 0;
		ingot = 0;
		boundlingfu = 0;
		boundingot = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdPlayerDetailNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 28;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << bagslot;
		s << storeslot;
		s << lingfu;
		s << ingot;
		s << boundlingfu;
		s << boundingot;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> bagslot;
		s >> storeslot;
		s >> lingfu;
		s >> ingot;
		s >> boundlingfu;
		s >> boundingot;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "bagslot", bagslot);
		lua::settable(L, -1, "storeslot", storeslot);
		lua::settable(L, -1, "lingfu", lingfu);
		lua::settable(L, -1, "ingot", ingot);
		lua::settable(L, -1, "boundlingfu", boundlingfu);
		lua::settable(L, -1, "boundingot", boundingot);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "bagslot=" << bagslot;
		buffer << ",storeslot=" << storeslot;
		buffer << ",lingfu=" << lingfu;
		buffer << ",ingot=" << ingot;
		buffer << ",boundlingfu=" << boundlingfu;
		buffer << ",boundingot=" << boundingot;
	}

public:
	short bagslot;
	short storeslot;
	int lingfu;
	long long ingot;
	int boundlingfu;
	long long boundingot;
};

class MsgUpdPlayerCapitalNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 35 };

	MsgUpdPlayerCapitalNotify() :
		Message(Category, Id)
	{
		opcode = 0;
		type = 0;
		oldcount = 0;
		newcount = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdPlayerCapitalNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 24;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		s << type;
		s << oldcount;
		s << newcount;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		s >> type;
		s >> oldcount;
		s >> newcount;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "oldcount", oldcount);
		lua::settable(L, -1, "newcount", newcount);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",type=" << type;
		buffer << ",oldcount=" << oldcount;
		buffer << ",newcount=" << newcount;
	}

public:
	int opcode;
	int type;
	long long oldcount;
	long long newcount;
};

class MsgUpdPlayerHonorNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 39 };

	MsgUpdPlayerHonorNotify() :
		Message(Category, Id)
	{
		opcode = 0;
		honor = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdPlayerHonorNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		s << honor;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		s >> honor;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "honor", honor);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",honor=" << honor;
	}

public:
	int opcode;
	int honor;
};

class MsgUpdPlayerGongxunNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 40 };

	MsgUpdPlayerGongxunNotify() :
		Message(Category, Id)
	{
		opcode = 0;
		gongxun = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdPlayerGongxunNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		s << gongxun;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		s >> gongxun;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "gongxun", gongxun);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",gongxun=" << gongxun;
	}

public:
	int opcode;
	int gongxun;
};

class MsgUpdPlayerMohunNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 41 };

	MsgUpdPlayerMohunNotify() :
		Message(Category, Id)
	{
		opcode = 0;
		mohun = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdPlayerMohunNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		s << mohun;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		s >> mohun;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "mohun", mohun);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",mohun=" << mohun;
	}

public:
	int opcode;
	int mohun;
};

class MsgUpdPlayerHudunNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 42 };

	MsgUpdPlayerHudunNotify() :
		Message(Category, Id)
	{
		opcode = 0;
		hudun = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdPlayerHudunNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		s << hudun;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		s >> hudun;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "hudun", hudun);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",hudun=" << hudun;
	}

public:
	int opcode;
	int hudun;
};

class MsgUpdPlayerBsscNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 43 };

	MsgUpdPlayerBsscNotify() :
		Message(Category, Id)
	{
		opcode = 0;
		bssc = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdPlayerBsscNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		s << bssc;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		s >> bssc;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "bssc", bssc);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",bssc=" << bssc;
	}

public:
	int opcode;
	int bssc;
};

class MsgAddSkillNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 61 };

	MsgAddSkillNotify() :
		Message(Category, Id)
	{
		opcode = 0;
		sid = 0;
		lvl = 0;
	}

	virtual const char *getName() const
	{
		return "MsgAddSkillNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		s << sid;
		s << lvl;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		s >> sid;
		s >> lvl;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "lvl", lvl);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",sid=" << sid;
		buffer << ",lvl=" << lvl;
	}

public:
	short opcode;
	int sid;
	int lvl;
};

class MsgRmvSkillNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 63 };

	MsgRmvSkillNotify() :
		Message(Category, Id)
	{
		opcode = 0;
		sid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRmvSkillNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		s << sid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		s >> sid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "sid", sid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",sid=" << sid;
	}

public:
	short opcode;
	int sid;
};

class MsgUpdSkillExpNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 65 };

	MsgUpdSkillExpNotify() :
		Message(Category, Id)
	{
		opcode = 0;
		sid = 0;
		exp = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdSkillExpNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		s << sid;
		s << exp;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		s >> sid;
		s >> exp;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "exp", exp);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",sid=" << sid;
		buffer << ",exp=" << exp;
	}

public:
	int opcode;
	int sid;
	int exp;
};

class MsgUpdSkillCoolDownNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 66 };

	MsgUpdSkillCoolDownNotify() :
		Message(Category, Id)
	{
		sid = 0;
		cooldown = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdSkillCoolDownNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << sid;
		s << cooldown;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> sid;
		s >> cooldown;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "cooldown", cooldown);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "sid=" << sid;
		buffer << ",cooldown=" << cooldown;
	}

public:
	int sid;
	int cooldown;
};

class MsgGetOfflineExpRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 98 };

	MsgGetOfflineExpRequest() :
		Message(Category, Id)
	{
		type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetOfflineExpRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << type;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> type;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
	}

public:
	short type;
};

class MsgGetOfflineExpResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 99 };

	MsgGetOfflineExpResponse() :
		Message(Category, Id)
	{
		type = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetOfflineExpResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << type;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> type;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
		buffer << ",errcode=" << errcode;
	}

public:
	short type;
	short errcode;
};

class MsgSpecialQuestCountResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 100 };

	MsgSpecialQuestCountResponse() :
		Message(Category, Id)
	{
		qtype = 0;
		count = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSpecialQuestCountResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << qtype;
		s << count;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> qtype;
		s >> count;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "qtype", qtype);
		lua::settable(L, -1, "count", count);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "qtype=" << qtype;
		buffer << ",count=" << count;
	}

public:
	short qtype;
	short count;
};

class MsgPlayerSyncAllGeneNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 149 };

	MsgPlayerSyncAllGeneNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgPlayerSyncAllGeneNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < genes.size(); ++i)
		{
			length += genes[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short genes_vector_size = (short)genes.size();
		s << genes_vector_size;
		if (genes_vector_size > 0)
		{
			for (auto it = genes.begin(); it != genes.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int genes_vector_size = s.read_int16();
		genes.clear();
		while (genes_vector_size > 0)
		{
			genes_vector_size--;
			GeneInfo val;
			val.unserialize(s, false);
			genes.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < genes.size(); ++i)
		{
			genes[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "genes");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "genes=[";
		for (size_t i = 0; i < genes.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			genes[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<GeneInfo> genes;
};

class MsgPlayerUpdGeneNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 150 };

	MsgPlayerUpdGeneNotify() :
		Message(Category, Id)
	{
		gid = 0;
		duration = 0;
		datax = 0;
		datay = 0;
		dataz = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerUpdGeneNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 20;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << gid;
		s << duration;
		s << datax;
		s << datay;
		s << dataz;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> gid;
		s >> duration;
		s >> datax;
		s >> datay;
		s >> dataz;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "gid", gid);
		lua::settable(L, -1, "duration", duration);
		lua::settable(L, -1, "datax", datax);
		lua::settable(L, -1, "datay", datay);
		lua::settable(L, -1, "dataz", dataz);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "gid=" << gid;
		buffer << ",duration=" << duration;
		buffer << ",datax=" << datax;
		buffer << ",datay=" << datay;
		buffer << ",dataz=" << dataz;
	}

public:
	int gid;
	int duration;
	int datax;
	int datay;
	int dataz;
};

class MsgPlayerRmvGeneNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 151 };

	MsgPlayerRmvGeneNotify() :
		Message(Category, Id)
	{
		gid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerRmvGeneNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << gid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> gid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "gid", gid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "gid=" << gid;
	}

public:
	int gid;
};

class MsgSetPlayerPkModeRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 160 };

	MsgSetPlayerPkModeRequest() :
		Message(Category, Id)
	{
		pkmode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSetPlayerPkModeRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pkmode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pkmode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pkmode", pkmode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pkmode=" << pkmode;
	}

public:
	int pkmode;
};

class MsgSetPlayerPkModeResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 161 };

	MsgSetPlayerPkModeResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSetPlayerPkModeResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgSyncPlayerStringPropNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 164 };

	MsgSyncPlayerStringPropNotify() :
		Message(Category, Id)
	{
		keyid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncPlayerStringPropNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short) + data.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << keyid;
		s << data;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> keyid;
		s >> data;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "keyid", keyid);
		lua::settable(L, -1, "data", data);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "keyid=" << keyid;
		buffer << ",data=" << data;
	}

public:
	int keyid;
	std::string data;
};

struct chatPlayerProp
{
public:
	chatPlayerProp()
	{
		type = 0;
		value = 0;
	}

	size_t getLength(bool ex) const
	{
		return 8;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << type;
		s << value;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> type;
		s >> value;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "value", value);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
		buffer << ",value=" << value;
	}

public:
	int type;
	int value;
};

class MsgChatNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 200 };

	MsgChatNotify() :
		Message(Category, Id)
	{
		chatType = 0;
		pid = 0;
		gender = 0;
		vipLevel = 0;
		level = 0;
		job = 0;
		position = 0;
		redID = 0;
		targetPid = 0;
		serverid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgChatNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 28;
		length += sizeof(short) + playerName.size();
		length += sizeof(short) + chatText.size();
		length += sizeof(short) + guildName.size();
		length += sizeof(short);
		for (size_t i = 0; i < props.size(); ++i)
		{
			length += props[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << chatType;
		s << pid;
		s << playerName;
		s << gender;
		s << vipLevel;
		s << chatText;
		s << level;
		s << job;
		s << position;
		s << redID;
		s << targetPid;
		s << guildName;
		s << serverid;
		short props_vector_size = (short)props.size();
		s << props_vector_size;
		if (props_vector_size > 0)
		{
			for (auto it = props.begin(); it != props.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> chatType;
		s >> pid;
		s >> playerName;
		s >> gender;
		s >> vipLevel;
		s >> chatText;
		s >> level;
		s >> job;
		s >> position;
		s >> redID;
		s >> targetPid;
		s >> guildName;
		s >> serverid;
		int props_vector_size = s.read_int16();
		props.clear();
		while (props_vector_size > 0)
		{
			props_vector_size--;
			chatPlayerProp val;
			val.unserialize(s, false);
			props.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "chatType", chatType);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "playerName", playerName);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "vipLevel", vipLevel);
		lua::settable(L, -1, "chatText", chatText);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "job", job);
		lua::settable(L, -1, "position", position);
		lua::settable(L, -1, "redID", redID);
		lua::settable(L, -1, "targetPid", targetPid);
		lua::settable(L, -1, "guildName", guildName);
		lua::settable(L, -1, "serverid", serverid);
		lua::newtable(lua::L);
		for (size_t i = 0; i < props.size(); ++i)
		{
			props[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "props");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "chatType=" << chatType;
		buffer << ",pid=" << pid;
		buffer << ",playerName=" << playerName;
		buffer << ",gender=" << gender;
		buffer << ",vipLevel=" << vipLevel;
		buffer << ",chatText=" << chatText;
		buffer << ",level=" << level;
		buffer << ",job=" << job;
		buffer << ",position=" << position;
		buffer << ",redID=" << redID;
		buffer << ",targetPid=" << targetPid;
		buffer << ",guildName=" << guildName;
		buffer << ",serverid=" << serverid;
		buffer << ",props=[";
		for (size_t i = 0; i < props.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			props[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	short chatType;
	int pid;
	std::string playerName;
	short gender;
	short vipLevel;
	std::string chatText;
	short level;
	short job;
	short position;
	int redID;
	int targetPid;
	std::string guildName;
	int serverid;
	std::vector<chatPlayerProp> props;
};

class MsgChatRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 201 };

	MsgChatRequest() :
		Message(Category, Id)
	{
		chatType = 0;
		partnerPid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgChatRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 6;
		length += sizeof(short) + chatText.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << chatType;
		s << partnerPid;
		s << chatText;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> chatType;
		s >> partnerPid;
		s >> chatText;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "chatType", chatType);
		lua::settable(L, -1, "partnerPid", partnerPid);
		lua::settable(L, -1, "chatText", chatText);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "chatType=" << chatType;
		buffer << ",partnerPid=" << partnerPid;
		buffer << ",chatText=" << chatText;
	}

public:
	short chatType;
	int partnerPid;
	std::string chatText;
};

class MsgChatResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 202 };

	MsgChatResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgChatResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgExchangeRebornPointsRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 227 };

	MsgExchangeRebornPointsRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgExchangeRebornPointsRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgExchangeRebornPointsResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 228 };

	MsgExchangeRebornPointsResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgExchangeRebornPointsResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgRebornRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 229 };

	MsgRebornRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgRebornRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgRebornResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 230 };

	MsgRebornResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRebornResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgSamsaraRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 231 };

	MsgSamsaraRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgSamsaraRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgSamsaraResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 232 };

	MsgSamsaraResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSamsaraResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgExchangeSamsaraPointsRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 233 };

	MsgExchangeSamsaraPointsRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgExchangeSamsaraPointsRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgExchangeSamsaraPointsResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 234 };

	MsgExchangeSamsaraPointsResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgExchangeSamsaraPointsResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgSyncPlayerEventDataNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 250 };

	MsgSyncPlayerEventDataNotify() :
		Message(Category, Id)
	{
		eventid = 0;
		datax = 0;
		datay = 0;
		dataz = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncPlayerEventDataNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 16;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eventid;
		s << datax;
		s << datay;
		s << dataz;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eventid;
		s >> datax;
		s >> datay;
		s >> dataz;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eventid", eventid);
		lua::settable(L, -1, "datax", datax);
		lua::settable(L, -1, "datay", datay);
		lua::settable(L, -1, "dataz", dataz);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eventid=" << eventid;
		buffer << ",datax=" << datax;
		buffer << ",datay=" << datay;
		buffer << ",dataz=" << dataz;
	}

public:
	int eventid;
	int datax;
	int datay;
	int dataz;
};

class MsgSyncPlayerEventDataRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 251 };

	MsgSyncPlayerEventDataRequest() :
		Message(Category, Id)
	{
		eventid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncPlayerEventDataRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eventid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eventid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eventid", eventid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eventid=" << eventid;
	}

public:
	int eventid;
};

class MsgSyncPlayerEventDataResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 252 };

	MsgSyncPlayerEventDataResponse() :
		Message(Category, Id)
	{
		eventid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncPlayerEventDataResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short);
		length += moredata.size() * 4;
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eventid;
		short moredata_vector_size = (short)moredata.size();
		s << moredata_vector_size;
		if (moredata_vector_size > 0)
		{
			for (auto it = moredata.begin(); it != moredata.end(); ++it)
			{
				s << *it;
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eventid;
		int moredata_vector_size = s.read_int16();
		moredata.clear();
		while (moredata_vector_size > 0)
		{
			moredata_vector_size--;
			int val;
			s >> val;
			moredata.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eventid", eventid);
		lua::newtable(lua::L);
		for (size_t i = 0; i < moredata.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, moredata[i]);
		}
		lua::settable(L, -2, "moredata");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eventid=" << eventid;
		buffer << ",moredata=[";
		for (size_t i = 0; i < moredata.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << moredata[i];
		}
		buffer << "]";
	}

public:
	int eventid;
	std::vector<int> moredata;
};

class MsgPlayerDeadInfoNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 280 };

	MsgPlayerDeadInfoNotify() :
		Message(Category, Id)
	{
		killertype = 0;
		killsid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerDeadInfoNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 6;
		length += sizeof(short) + killname.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << killertype;
		s << killsid;
		s << killname;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> killertype;
		s >> killsid;
		s >> killname;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "killertype", killertype);
		lua::settable(L, -1, "killsid", killsid);
		lua::settable(L, -1, "killname", killname);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "killertype=" << killertype;
		buffer << ",killsid=" << killsid;
		buffer << ",killname=" << killname;
	}

public:
	short killertype;
	int killsid;
	std::string killname;
};

class MsgGetOtherPlayerDataRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 300 };

	MsgGetOtherPlayerDataRequest() :
		Message(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetOtherPlayerDataRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
	}

public:
	int pid;
};

class MsgGetOtherPlayerDataResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 301 };

	MsgGetOtherPlayerDataResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetOtherPlayerDataResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgSyncOtherPlayerDataNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 302 };

	MsgSyncOtherPlayerDataNotify() :
		Message(Category, Id)
	{
		pid = 0;
		gender = 0;
		job = 0;
		lvl = 0;
		reborn = 0;
		honor = 0;
		pkvalue = 0;
		combatdatanum = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncOtherPlayerDataNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 24;
		length += sizeof(short) + name.size();
		length += sizeof(short);
		length += combatdata.size() * 4;
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << name;
		s << gender;
		s << job;
		s << lvl;
		s << reborn;
		s << honor;
		s << pkvalue;
		s << combatdatanum;
		short combatdata_vector_size = (short)combatdata.size();
		s << combatdata_vector_size;
		if (combatdata_vector_size > 0)
		{
			for (auto it = combatdata.begin(); it != combatdata.end(); ++it)
			{
				s << *it;
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> name;
		s >> gender;
		s >> job;
		s >> lvl;
		s >> reborn;
		s >> honor;
		s >> pkvalue;
		s >> combatdatanum;
		int combatdata_vector_size = s.read_int16();
		combatdata.clear();
		while (combatdata_vector_size > 0)
		{
			combatdata_vector_size--;
			int val;
			s >> val;
			combatdata.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "job", job);
		lua::settable(L, -1, "lvl", lvl);
		lua::settable(L, -1, "reborn", reborn);
		lua::settable(L, -1, "honor", honor);
		lua::settable(L, -1, "pkvalue", pkvalue);
		lua::settable(L, -1, "combatdatanum", combatdatanum);
		lua::newtable(lua::L);
		for (size_t i = 0; i < combatdata.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, combatdata[i]);
		}
		lua::settable(L, -2, "combatdata");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",gender=" << gender;
		buffer << ",job=" << job;
		buffer << ",lvl=" << lvl;
		buffer << ",reborn=" << reborn;
		buffer << ",honor=" << honor;
		buffer << ",pkvalue=" << pkvalue;
		buffer << ",combatdatanum=" << combatdatanum;
		buffer << ",combatdata=[";
		for (size_t i = 0; i < combatdata.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << combatdata[i];
		}
		buffer << "]";
	}

public:
	int pid;
	std::string name;
	short gender;
	short job;
	short lvl;
	short reborn;
	int honor;
	int pkvalue;
	int combatdatanum;
	std::vector<int> combatdata;
};

class MsgGetGiftRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 330 };

	MsgGetGiftRequest() :
		Message(Category, Id)
	{
		GiftCate = 0;
		GiftType = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetGiftRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << GiftCate;
		s << GiftType;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> GiftCate;
		s >> GiftType;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "GiftCate", GiftCate);
		lua::settable(L, -1, "GiftType", GiftType);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "GiftCate=" << GiftCate;
		buffer << ",GiftType=" << GiftType;
	}

public:
	short GiftCate;
	short GiftType;
};

class MsgGetGiftResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 331 };

	MsgGetGiftResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		GiftCate = 0;
		GiftType = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetGiftResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << GiftCate;
		s << GiftType;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> GiftCate;
		s >> GiftType;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "GiftCate", GiftCate);
		lua::settable(L, -1, "GiftType", GiftType);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",GiftCate=" << GiftCate;
		buffer << ",GiftType=" << GiftType;
	}

public:
	short errcode;
	short GiftCate;
	short GiftType;
};

class MsgFuncDataNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 342 };

	MsgFuncDataNotify() :
		Message(Category, Id)
	{
		funcid = 0;
		datax = 0;
		datay = 0;
		dataz = 0;
	}

	virtual const char *getName() const
	{
		return "MsgFuncDataNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 14;
		length += sizeof(short) + datas.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << funcid;
		s << datax;
		s << datay;
		s << dataz;
		s << datas;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> funcid;
		s >> datax;
		s >> datay;
		s >> dataz;
		s >> datas;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "funcid", funcid);
		lua::settable(L, -1, "datax", datax);
		lua::settable(L, -1, "datay", datay);
		lua::settable(L, -1, "dataz", dataz);
		lua::settable(L, -1, "datas", datas);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "funcid=" << funcid;
		buffer << ",datax=" << datax;
		buffer << ",datay=" << datay;
		buffer << ",dataz=" << dataz;
		buffer << ",datas=" << datas;
	}

public:
	short funcid;
	int datax;
	int datay;
	int dataz;
	std::string datas;
};

class MsgFuncDataOperatorRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 343 };

	MsgFuncDataOperatorRequest() :
		Message(Category, Id)
	{
		funcid = 0;
		datax = 0;
		datay = 0;
		dataz = 0;
	}

	virtual const char *getName() const
	{
		return "MsgFuncDataOperatorRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 14;
		length += sizeof(short) + datas.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << funcid;
		s << datax;
		s << datay;
		s << dataz;
		s << datas;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> funcid;
		s >> datax;
		s >> datay;
		s >> dataz;
		s >> datas;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "funcid", funcid);
		lua::settable(L, -1, "datax", datax);
		lua::settable(L, -1, "datay", datay);
		lua::settable(L, -1, "dataz", dataz);
		lua::settable(L, -1, "datas", datas);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "funcid=" << funcid;
		buffer << ",datax=" << datax;
		buffer << ",datay=" << datay;
		buffer << ",dataz=" << dataz;
		buffer << ",datas=" << datas;
	}

public:
	short funcid;
	int datax;
	int datay;
	int dataz;
	std::string datas;
};

class MsgFuncDataOperatorResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 344 };

	MsgFuncDataOperatorResponse() :
		Message(Category, Id)
	{
		funcid = 0;
		errcode = 0;
		datax = 0;
		datay = 0;
		dataz = 0;
	}

	virtual const char *getName() const
	{
		return "MsgFuncDataOperatorResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 16;
		length += sizeof(short) + datas.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << funcid;
		s << errcode;
		s << datax;
		s << datay;
		s << dataz;
		s << datas;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> funcid;
		s >> errcode;
		s >> datax;
		s >> datay;
		s >> dataz;
		s >> datas;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "funcid", funcid);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "datax", datax);
		lua::settable(L, -1, "datay", datay);
		lua::settable(L, -1, "dataz", dataz);
		lua::settable(L, -1, "datas", datas);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "funcid=" << funcid;
		buffer << ",errcode=" << errcode;
		buffer << ",datax=" << datax;
		buffer << ",datay=" << datay;
		buffer << ",dataz=" << dataz;
		buffer << ",datas=" << datas;
	}

public:
	short funcid;
	short errcode;
	int datax;
	int datay;
	int dataz;
	std::string datas;
};

class MsgOpenHeadTitleRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 350 };

	MsgOpenHeadTitleRequest() :
		Message(Category, Id)
	{
		idx = 0;
	}

	virtual const char *getName() const
	{
		return "MsgOpenHeadTitleRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << idx;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> idx;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "idx", idx);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "idx=" << idx;
	}

public:
	short idx;
};

class MsgCloseHeadTitleRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 351 };

	MsgCloseHeadTitleRequest() :
		Message(Category, Id)
	{
		idx = 0;
	}

	virtual const char *getName() const
	{
		return "MsgCloseHeadTitleRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << idx;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> idx;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "idx", idx);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "idx=" << idx;
	}

public:
	short idx;
};

class MsgHeadTitleOperationResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 352 };

	MsgHeadTitleOperationResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgHeadTitleOperationResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgRenameRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 360 };

	MsgRenameRequest() :
		Message(Category, Id)
	{
		type = 0;
		flags = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRenameRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short) + newname.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << type;
		s << newname;
		s << flags;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> type;
		s >> newname;
		s >> flags;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "newname", newname);
		lua::settable(L, -1, "flags", flags);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
		buffer << ",newname=" << newname;
		buffer << ",flags=" << flags;
	}

public:
	short type;
	std::string newname;
	short flags;
};

class MsgRenameResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 361 };

	MsgRenameResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRenameResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << type;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> type;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "type", type);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",type=" << type;
	}

public:
	short errcode;
	short type;
};

struct OtherEquipInfo
{
public:
	OtherEquipInfo()
	{
		pos = 0;
		sid = 0;
		iid = 0;
		bind = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 16;
		length += ex ? sizeof(int) : sizeof(short);
		length += props.size() * 4;
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << pos;
		s << sid;
		s << iid;
		s << bind;
		int props_vector_size = ex ? (int)props.size() : (short)props.size();
		if (ex)
		{
			s << props_vector_size;
		}
		else
		{
			s << (short)props_vector_size;
		}
		if (props_vector_size > 0)
		{
			for (auto it = props.begin(); it != props.end(); ++it)
			{
				s << *it;
			}
		}
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> pos;
		s >> sid;
		s >> iid;
		s >> bind;
		int props_vector_size = ex ? s.read_int32() : s.read_int16();
		props.clear();
		while (props_vector_size > 0)
		{
			props_vector_size--;
			int val;
			s >> val;
			props.push_back(val);
		}
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pos", pos);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "bind", bind);
		lua::newtable(lua::L);
		for (size_t i = 0; i < props.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, props[i]);
		}
		lua::settable(L, -2, "props");
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "pos=" << pos;
		buffer << ",sid=" << sid;
		buffer << ",iid=" << iid;
		buffer << ",bind=" << bind;
		buffer << ",props=[";
		for (size_t i = 0; i < props.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << props[i];
		}
		buffer << "]";
	}

public:
	int pos;
	int sid;
	int iid;
	int bind;
	std::vector<int> props;
};

class MsgCheckEquipRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 370 };

	MsgCheckEquipRequest() :
		Message(Category, Id)
	{
		pid = 0;
		serverid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgCheckEquipRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << serverid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> serverid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "serverid", serverid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",serverid=" << serverid;
	}

public:
	int pid;
	int serverid;
};

struct OtherEntityProp
{
public:
	OtherEntityProp()
	{
		type = 0;
		value = 0;
	}

	size_t getLength(bool ex) const
	{
		return 8;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << type;
		s << value;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> type;
		s >> value;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "value", value);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
		buffer << ",value=" << value;
	}

public:
	int type;
	int value;
};

struct OtherEntityStringProp
{
public:
	OtherEntityStringProp()
	{
		type = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 4;
		length += sizeof(short) + value.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << type;
		s << value;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> type;
		s >> value;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "value", value);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
		buffer << ",value=" << value;
	}

public:
	int type;
	std::string value;
};

class MsgCheckEquipResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 371 };

	MsgCheckEquipResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		pid = 0;
		gender = 0;
		clazz = 0;
		reborn = 0;
		level = 0;
		cloth = 0;
		weapon = 0;
		wings = 0;
		zhanli = 0;
		godLevel = 0;
		enhanceExLevel = 0;
		soulExLevel = 0;
		moshiLevel = 0;
		honor = 0;
		pkvalue = 0;
		rebornsoul = 0;
		stonepoint = 0;
		xiliansuit = 0;
		heji = 0;
		exMaxLvl = 0;
		hide_moguan = 0;
		dress_cloth = 0;
	}

	virtual const char *getName() const
	{
		return "MsgCheckEquipResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 84;
		length += sizeof(short) + name.size();
		length += sizeof(short) + guild.size();
		length += sizeof(short);
		length += vcombat.size() * 4;
		length += sizeof(short);
		for (size_t i = 0; i < equips.size(); ++i)
		{
			length += equips[i].getLength(false);
		}
		length += sizeof(short);
		for (size_t i = 0; i < prop.size(); ++i)
		{
			length += prop[i].getLength(false);
		}
		length += sizeof(short);
		for (size_t i = 0; i < sprop.size(); ++i)
		{
			length += sprop[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << pid;
		s << name;
		s << gender;
		s << clazz;
		s << reborn;
		s << level;
		s << cloth;
		s << weapon;
		s << wings;
		s << guild;
		s << zhanli;
		s << godLevel;
		s << enhanceExLevel;
		s << soulExLevel;
		s << moshiLevel;
		s << honor;
		s << pkvalue;
		s << rebornsoul;
		s << stonepoint;
		s << xiliansuit;
		s << heji;
		s << exMaxLvl;
		s << hide_moguan;
		s << dress_cloth;
		short vcombat_vector_size = (short)vcombat.size();
		s << vcombat_vector_size;
		if (vcombat_vector_size > 0)
		{
			for (auto it = vcombat.begin(); it != vcombat.end(); ++it)
			{
				s << *it;
			}
		}
		short equips_vector_size = (short)equips.size();
		s << equips_vector_size;
		if (equips_vector_size > 0)
		{
			for (auto it = equips.begin(); it != equips.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		short prop_vector_size = (short)prop.size();
		s << prop_vector_size;
		if (prop_vector_size > 0)
		{
			for (auto it = prop.begin(); it != prop.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		short sprop_vector_size = (short)sprop.size();
		s << sprop_vector_size;
		if (sprop_vector_size > 0)
		{
			for (auto it = sprop.begin(); it != sprop.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> pid;
		s >> name;
		s >> gender;
		s >> clazz;
		s >> reborn;
		s >> level;
		s >> cloth;
		s >> weapon;
		s >> wings;
		s >> guild;
		s >> zhanli;
		s >> godLevel;
		s >> enhanceExLevel;
		s >> soulExLevel;
		s >> moshiLevel;
		s >> honor;
		s >> pkvalue;
		s >> rebornsoul;
		s >> stonepoint;
		s >> xiliansuit;
		s >> heji;
		s >> exMaxLvl;
		s >> hide_moguan;
		s >> dress_cloth;
		int vcombat_vector_size = s.read_int16();
		vcombat.clear();
		while (vcombat_vector_size > 0)
		{
			vcombat_vector_size--;
			int val;
			s >> val;
			vcombat.push_back(val);
		}
		int equips_vector_size = s.read_int16();
		equips.clear();
		while (equips_vector_size > 0)
		{
			equips_vector_size--;
			OtherEquipInfo val;
			val.unserialize(s, false);
			equips.push_back(val);
		}
		int prop_vector_size = s.read_int16();
		prop.clear();
		while (prop_vector_size > 0)
		{
			prop_vector_size--;
			OtherEntityProp val;
			val.unserialize(s, false);
			prop.push_back(val);
		}
		int sprop_vector_size = s.read_int16();
		sprop.clear();
		while (sprop_vector_size > 0)
		{
			sprop_vector_size--;
			OtherEntityStringProp val;
			val.unserialize(s, false);
			sprop.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "clazz", clazz);
		lua::settable(L, -1, "reborn", reborn);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "cloth", cloth);
		lua::settable(L, -1, "weapon", weapon);
		lua::settable(L, -1, "wings", wings);
		lua::settable(L, -1, "guild", guild);
		lua::settable(L, -1, "zhanli", zhanli);
		lua::settable(L, -1, "godLevel", godLevel);
		lua::settable(L, -1, "enhanceExLevel", enhanceExLevel);
		lua::settable(L, -1, "soulExLevel", soulExLevel);
		lua::settable(L, -1, "moshiLevel", moshiLevel);
		lua::settable(L, -1, "honor", honor);
		lua::settable(L, -1, "pkvalue", pkvalue);
		lua::settable(L, -1, "rebornsoul", rebornsoul);
		lua::settable(L, -1, "stonepoint", stonepoint);
		lua::settable(L, -1, "xiliansuit", xiliansuit);
		lua::settable(L, -1, "heji", heji);
		lua::settable(L, -1, "exMaxLvl", exMaxLvl);
		lua::settable(L, -1, "hide_moguan", hide_moguan);
		lua::settable(L, -1, "dress_cloth", dress_cloth);
		lua::newtable(lua::L);
		for (size_t i = 0; i < vcombat.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, vcombat[i]);
		}
		lua::settable(L, -2, "vcombat");
		lua::newtable(lua::L);
		for (size_t i = 0; i < equips.size(); ++i)
		{
			equips[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "equips");
		lua::newtable(lua::L);
		for (size_t i = 0; i < prop.size(); ++i)
		{
			prop[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "prop");
		lua::newtable(lua::L);
		for (size_t i = 0; i < sprop.size(); ++i)
		{
			sprop[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "sprop");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",gender=" << gender;
		buffer << ",clazz=" << clazz;
		buffer << ",reborn=" << reborn;
		buffer << ",level=" << level;
		buffer << ",cloth=" << cloth;
		buffer << ",weapon=" << weapon;
		buffer << ",wings=" << wings;
		buffer << ",guild=" << guild;
		buffer << ",zhanli=" << zhanli;
		buffer << ",godLevel=" << godLevel;
		buffer << ",enhanceExLevel=" << enhanceExLevel;
		buffer << ",soulExLevel=" << soulExLevel;
		buffer << ",moshiLevel=" << moshiLevel;
		buffer << ",honor=" << honor;
		buffer << ",pkvalue=" << pkvalue;
		buffer << ",rebornsoul=" << rebornsoul;
		buffer << ",stonepoint=" << stonepoint;
		buffer << ",xiliansuit=" << xiliansuit;
		buffer << ",heji=" << heji;
		buffer << ",exMaxLvl=" << exMaxLvl;
		buffer << ",hide_moguan=" << hide_moguan;
		buffer << ",dress_cloth=" << dress_cloth;
		buffer << ",vcombat=[";
		for (size_t i = 0; i < vcombat.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << vcombat[i];
		}
		buffer << "]";
		buffer << ",equips=[";
		for (size_t i = 0; i < equips.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			equips[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
		buffer << ",prop=[";
		for (size_t i = 0; i < prop.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			prop[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
		buffer << ",sprop=[";
		for (size_t i = 0; i < sprop.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			sprop[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	short errcode;
	int pid;
	std::string name;
	char gender;
	char clazz;
	int reborn;
	int level;
	int cloth;
	int weapon;
	int wings;
	std::string guild;
	int zhanli;
	int godLevel;
	int enhanceExLevel;
	int soulExLevel;
	int moshiLevel;
	int honor;
	int pkvalue;
	int rebornsoul;
	int stonepoint;
	int xiliansuit;
	int heji;
	int exMaxLvl;
	int hide_moguan;
	int dress_cloth;
	std::vector<int> vcombat;
	std::vector<OtherEquipInfo> equips;
	std::vector<OtherEntityProp> prop;
	std::vector<OtherEntityStringProp> sprop;
};

class MsgCheckSoulStoneRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 372 };

	MsgCheckSoulStoneRequest() :
		Message(Category, Id)
	{
		pid = 0;
		pos = 0;
	}

	virtual const char *getName() const
	{
		return "MsgCheckSoulStoneRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << pos;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> pos;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "pos", pos);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",pos=" << pos;
	}

public:
	int pid;
	int pos;
};

class MsgCheckSoulStoneResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 373 };

	MsgCheckSoulStoneResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		pid = 0;
		pos = 0;
	}

	virtual const char *getName() const
	{
		return "MsgCheckSoulStoneResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 10;
		length += sizeof(short);
		length += vsoul.size() * 4;
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << pid;
		s << pos;
		short vsoul_vector_size = (short)vsoul.size();
		s << vsoul_vector_size;
		if (vsoul_vector_size > 0)
		{
			for (auto it = vsoul.begin(); it != vsoul.end(); ++it)
			{
				s << *it;
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> pid;
		s >> pos;
		int vsoul_vector_size = s.read_int16();
		vsoul.clear();
		while (vsoul_vector_size > 0)
		{
			vsoul_vector_size--;
			int val;
			s >> val;
			vsoul.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "pos", pos);
		lua::newtable(lua::L);
		for (size_t i = 0; i < vsoul.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, vsoul[i]);
		}
		lua::settable(L, -2, "vsoul");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",pid=" << pid;
		buffer << ",pos=" << pos;
		buffer << ",vsoul=[";
		for (size_t i = 0; i < vsoul.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << vsoul[i];
		}
		buffer << "]";
	}

public:
	short errcode;
	int pid;
	int pos;
	std::vector<int> vsoul;
};

class MsgEventDataRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 374 };

	MsgEventDataRequest() :
		Message(Category, Id)
	{
		id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEventDataRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
	}

public:
	int id;
};

class MsgShutUpRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 384 };

	MsgShutUpRequest() :
		Message(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgShutUpRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
	}

public:
	int pid;
};

class MsgShutUpResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 385 };

	MsgShutUpResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgShutUpResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgExerciseRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 386 };

	MsgExerciseRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgExerciseRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgExerciseResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 387 };

	MsgExerciseResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		level = 0;
		curExercise = 0;
	}

	virtual const char *getName() const
	{
		return "MsgExerciseResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << level;
		s << curExercise;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> level;
		s >> curExercise;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "curExercise", curExercise);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",level=" << level;
		buffer << ",curExercise=" << curExercise;
	}

public:
	short errcode;
	short level;
	long long curExercise;
};

class MsgExerciseUpdataRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 388 };

	MsgExerciseUpdataRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgExerciseUpdataRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgExerciseUpdataResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 389 };

	MsgExerciseUpdataResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		level = 0;
		curExercise = 0;
	}

	virtual const char *getName() const
	{
		return "MsgExerciseUpdataResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << level;
		s << curExercise;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> level;
		s >> curExercise;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "curExercise", curExercise);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",level=" << level;
		buffer << ",curExercise=" << curExercise;
	}

public:
	short errcode;
	short level;
	long long curExercise;
};

class MsgExerciseNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 390 };

	MsgExerciseNotify() :
		Message(Category, Id)
	{
		opcode = 0;
		data = 0;
	}

	virtual const char *getName() const
	{
		return "MsgExerciseNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		s << data;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		s >> data;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "data", data);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",data=" << data;
	}

public:
	int opcode;
	long long data;
};

class MsgOpenWingsRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 410 };

	MsgOpenWingsRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgOpenWingsRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgUpdataWingsRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 412 };

	MsgUpdataWingsRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgUpdataWingsRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgUpdataWingsResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 413 };

	MsgUpdataWingsResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdataWingsResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgUpdataBossScoreRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 416 };

	MsgUpdataBossScoreRequest() :
		Message(Category, Id)
	{
		level = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdataBossScoreRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << level;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> level;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "level", level);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "level=" << level;
	}

public:
	short level;
};

class MsgUpdataBossScoreResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 417 };

	MsgUpdataBossScoreResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdataBossScoreResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgUpdataBsscCnRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 418 };

	MsgUpdataBsscCnRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgUpdataBsscCnRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgUpdataBsscCnResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 419 };

	MsgUpdataBsscCnResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdataBsscCnResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgOpenAutoAtkMapRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 420 };

	MsgOpenAutoAtkMapRequest() :
		Message(Category, Id)
	{
		sceneId = 0;
	}

	virtual const char *getName() const
	{
		return "MsgOpenAutoAtkMapRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << sceneId;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> sceneId;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sceneId", sceneId);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "sceneId=" << sceneId;
	}

public:
	int sceneId;
};

class MsgOpenAutoAtkMapResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 421 };

	MsgOpenAutoAtkMapResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgOpenAutoAtkMapResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgGetVipExpBuffRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 422 };

	MsgGetVipExpBuffRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGetVipExpBuffRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgGetVipExpBuffResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 423 };

	MsgGetVipExpBuffResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetVipExpBuffResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgOfflineTakeRewardRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 426 };

	MsgOfflineTakeRewardRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgOfflineTakeRewardRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgOfflineTakeRewardResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 427 };

	MsgOfflineTakeRewardResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgOfflineTakeRewardResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgOfflineVipRewardRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 428 };

	MsgOfflineVipRewardRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgOfflineVipRewardRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgOfflineVipRewardResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 429 };

	MsgOfflineVipRewardResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgOfflineVipRewardResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

struct OfflineItem
{
public:
	OfflineItem()
	{
		sid = 0;
		count = 0;
	}

	size_t getLength(bool ex) const
	{
		return 8;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << sid;
		s << count;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> sid;
		s >> count;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "count", count);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "sid=" << sid;
		buffer << ",count=" << count;
	}

public:
	int sid;
	int count;
};

class MsgOfflineExpOtherNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 431 };

	MsgOfflineExpOtherNotify() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgOfflineExpOtherNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 2;
		length += sizeof(short);
		for (size_t i = 0; i < offItem.size(); ++i)
		{
			length += offItem[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		short offItem_vector_size = (short)offItem.size();
		s << offItem_vector_size;
		if (offItem_vector_size > 0)
		{
			for (auto it = offItem.begin(); it != offItem.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		int offItem_vector_size = s.read_int16();
		offItem.clear();
		while (offItem_vector_size > 0)
		{
			offItem_vector_size--;
			OfflineItem val;
			val.unserialize(s, false);
			offItem.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::newtable(lua::L);
		for (size_t i = 0; i < offItem.size(); ++i)
		{
			offItem[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "offItem");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",offItem=[";
		for (size_t i = 0; i < offItem.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			offItem[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	short errcode;
	std::vector<OfflineItem> offItem;
};

class MsgStartOffLineRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 432 };

	MsgStartOffLineRequest() :
		Message(Category, Id)
	{
		sid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgStartOffLineRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << sid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> sid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sid", sid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "sid=" << sid;
	}

public:
	int sid;
};

class MsgStartOffLineResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 433 };

	MsgStartOffLineResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		sid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgStartOffLineResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << sid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> sid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "sid", sid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",sid=" << sid;
	}

public:
	short errcode;
	int sid;
};

class MsgOpenOffLineRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 434 };

	MsgOpenOffLineRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgOpenOffLineRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgOpenOffLineResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 435 };

	MsgOpenOffLineResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		sid = 0;
		swit = 0;
		offtime = 0;
	}

	virtual const char *getName() const
	{
		return "MsgOpenOffLineResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 14;
		length += sizeof(short);
		for (size_t i = 0; i < offItem.size(); ++i)
		{
			length += offItem[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << sid;
		s << swit;
		s << offtime;
		short offItem_vector_size = (short)offItem.size();
		s << offItem_vector_size;
		if (offItem_vector_size > 0)
		{
			for (auto it = offItem.begin(); it != offItem.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> sid;
		s >> swit;
		s >> offtime;
		int offItem_vector_size = s.read_int16();
		offItem.clear();
		while (offItem_vector_size > 0)
		{
			offItem_vector_size--;
			OfflineItem val;
			val.unserialize(s, false);
			offItem.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "swit", swit);
		lua::settable(L, -1, "offtime", offtime);
		lua::newtable(lua::L);
		for (size_t i = 0; i < offItem.size(); ++i)
		{
			offItem[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "offItem");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",sid=" << sid;
		buffer << ",swit=" << swit;
		buffer << ",offtime=" << offtime;
		buffer << ",offItem=[";
		for (size_t i = 0; i < offItem.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			offItem[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	short errcode;
	int sid;
	int swit;
	int offtime;
	std::vector<OfflineItem> offItem;
};

class MsgCloseOffLineRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 436 };

	MsgCloseOffLineRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgCloseOffLineRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgCloseOffLineResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 437 };

	MsgCloseOffLineResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgCloseOffLineResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgOfflineExpGeneNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 439 };

	MsgOfflineExpGeneNotify() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgOfflineExpGeneNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 2;
		length += sizeof(short);
		for (size_t i = 0; i < offItem.size(); ++i)
		{
			length += offItem[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		short offItem_vector_size = (short)offItem.size();
		s << offItem_vector_size;
		if (offItem_vector_size > 0)
		{
			for (auto it = offItem.begin(); it != offItem.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		int offItem_vector_size = s.read_int16();
		offItem.clear();
		while (offItem_vector_size > 0)
		{
			offItem_vector_size--;
			OfflineItem val;
			val.unserialize(s, false);
			offItem.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::newtable(lua::L);
		for (size_t i = 0; i < offItem.size(); ++i)
		{
			offItem[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "offItem");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",offItem=[";
		for (size_t i = 0; i < offItem.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			offItem[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	short errcode;
	std::vector<OfflineItem> offItem;
};

class MsgRefreshEventDataRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 440 };

	MsgRefreshEventDataRequest() :
		Message(Category, Id)
	{
		eid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRefreshEventDataRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
	}

public:
	int eid;
};

class MsgRefreshEventDataResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 441 };

	MsgRefreshEventDataResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRefreshEventDataResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

struct Damage
{
public:
	Damage()
	{
		pid = 0;
		level = 0;
		job = 0;
		gender = 0;
		damage = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 14;
		length += sizeof(short) + name.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << pid;
		s << level;
		s << job;
		s << gender;
		s << damage;
		s << name;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> pid;
		s >> level;
		s >> job;
		s >> gender;
		s >> damage;
		s >> name;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "job", job);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "damage", damage);
		lua::settable(L, -1, "name", name);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",level=" << level;
		buffer << ",job=" << job;
		buffer << ",gender=" << gender;
		buffer << ",damage=" << damage;
		buffer << ",name=" << name;
	}

public:
	int pid;
	short level;
	short job;
	short gender;
	int damage;
	std::string name;
};

class MsgAttackDamageListNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 442 };

	MsgAttackDamageListNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgAttackDamageListNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < DamageList.size(); ++i)
		{
			length += DamageList[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short DamageList_vector_size = (short)DamageList.size();
		s << DamageList_vector_size;
		if (DamageList_vector_size > 0)
		{
			for (auto it = DamageList.begin(); it != DamageList.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int DamageList_vector_size = s.read_int16();
		DamageList.clear();
		while (DamageList_vector_size > 0)
		{
			DamageList_vector_size--;
			Damage val;
			val.unserialize(s, false);
			DamageList.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < DamageList.size(); ++i)
		{
			DamageList[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "DamageList");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "DamageList=[";
		for (size_t i = 0; i < DamageList.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			DamageList[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<Damage> DamageList;
};

class MsgStoryStartNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 443 };

	MsgStoryStartNotify() :
		Message(Category, Id)
	{
		errcode = 0;
		storyId = 0;
	}

	virtual const char *getName() const
	{
		return "MsgStoryStartNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << storyId;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> storyId;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "storyId", storyId);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",storyId=" << storyId;
	}

public:
	short errcode;
	int storyId;
};

class MsgGetLevelRewardRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 444 };

	MsgGetLevelRewardRequest() :
		Message(Category, Id)
	{
		id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetLevelRewardRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
	}

public:
	int id;
};

class MsgGetLevelRewardResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 445 };

	MsgGetLevelRewardResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetLevelRewardResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "id", id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",id=" << id;
	}

public:
	int errcode;
	int id;
};

class MsgGetUpgradeGiftRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 446 };

	MsgGetUpgradeGiftRequest() :
		Message(Category, Id)
	{
		id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetUpgradeGiftRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
	}

public:
	int id;
};

class MsgNotifyReward : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 450 };

	MsgNotifyReward() :
		Message(Category, Id)
	{
		opcode = 0;
		type = 0;
		value = 0;
	}

	virtual const char *getName() const
	{
		return "MsgNotifyReward";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		s << type;
		s << value;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		s >> type;
		s >> value;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "value", value);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",type=" << type;
		buffer << ",value=" << value;
	}

public:
	int opcode;
	int type;
	int value;
};

class MsgOpenSpecialRingRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 451 };

	MsgOpenSpecialRingRequest() :
		Message(Category, Id)
	{
		index = 0;
	}

	virtual const char *getName() const
	{
		return "MsgOpenSpecialRingRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << index;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> index;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "index", index);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "index=" << index;
	}

public:
	int index;
};

class MsgOpenSpecialRingResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 452 };

	MsgOpenSpecialRingResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		index = 0;
	}

	virtual const char *getName() const
	{
		return "MsgOpenSpecialRingResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << index;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> index;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "index", index);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",index=" << index;
	}

public:
	int errcode;
	int index;
};

class MsgCheckOnAutoPickMoney : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 453 };

	MsgCheckOnAutoPickMoney() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgCheckOnAutoPickMoney";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgAskForRewardRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 454 };

	MsgAskForRewardRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgAskForRewardRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgTTSYGuWuRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 455 };

	MsgTTSYGuWuRequest() :
		Message(Category, Id)
	{
		index = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTTSYGuWuRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << index;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> index;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "index", index);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "index=" << index;
	}

public:
	int index;
};

class MsgTTSYGuWuResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 456 };

	MsgTTSYGuWuResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		index = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTTSYGuWuResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << index;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> index;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "index", index);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",index=" << index;
	}

public:
	int errcode;
	int index;
};

class MsgPlayerLvChangeCultRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 457 };

	MsgPlayerLvChangeCultRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgPlayerLvChangeCultRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgPlayerLvChangeCultResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 458 };

	MsgPlayerLvChangeCultResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerLvChangeCultResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgEnhancePosRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 459 };

	MsgEnhancePosRequest() :
		Message(Category, Id)
	{
		type = 0;
		pos = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEnhancePosRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << type;
		s << pos;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> type;
		s >> pos;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "pos", pos);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
		buffer << ",pos=" << pos;
	}

public:
	int type;
	int pos;
};

class MsgEnhancePosResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 460 };

	MsgEnhancePosResponse() :
		Message(Category, Id)
	{
		type = 0;
		pos = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEnhancePosResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << type;
		s << pos;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> type;
		s >> pos;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "pos", pos);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
		buffer << ",pos=" << pos;
		buffer << ",errcode=" << errcode;
	}

public:
	int type;
	int pos;
	short errcode;
};

struct dress
{
public:
	dress()
	{
		dressid = 0;
		status = 0;
		etime = 0;
		lvl = 0;
	}

	size_t getLength(bool ex) const
	{
		return 16;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << dressid;
		s << status;
		s << etime;
		s << lvl;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> dressid;
		s >> status;
		s >> etime;
		s >> lvl;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "dressid", dressid);
		lua::settable(L, -1, "status", status);
		lua::settable(L, -1, "etime", etime);
		lua::settable(L, -1, "lvl", lvl);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "dressid=" << dressid;
		buffer << ",status=" << status;
		buffer << ",etime=" << etime;
		buffer << ",lvl=" << lvl;
	}

public:
	int dressid;
	int status;
	int etime;
	int lvl;
};

class MsgPlayerAllDressNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 461 };

	MsgPlayerAllDressNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgPlayerAllDressNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < DressList.size(); ++i)
		{
			length += DressList[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short DressList_vector_size = (short)DressList.size();
		s << DressList_vector_size;
		if (DressList_vector_size > 0)
		{
			for (auto it = DressList.begin(); it != DressList.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int DressList_vector_size = s.read_int16();
		DressList.clear();
		while (DressList_vector_size > 0)
		{
			DressList_vector_size--;
			dress val;
			val.unserialize(s, false);
			DressList.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < DressList.size(); ++i)
		{
			DressList[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "DressList");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "DressList=[";
		for (size_t i = 0; i < DressList.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			DressList[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<dress> DressList;
};

class MsgPlayerDressStatusNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 462 };

	MsgPlayerDressStatusNotify() :
		Message(Category, Id)
	{
		dressid = 0;
		status = 0;
		etime = 0;
		lvl = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerDressStatusNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 16;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << dressid;
		s << status;
		s << etime;
		s << lvl;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> dressid;
		s >> status;
		s >> etime;
		s >> lvl;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "dressid", dressid);
		lua::settable(L, -1, "status", status);
		lua::settable(L, -1, "etime", etime);
		lua::settable(L, -1, "lvl", lvl);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "dressid=" << dressid;
		buffer << ",status=" << status;
		buffer << ",etime=" << etime;
		buffer << ",lvl=" << lvl;
	}

public:
	int dressid;
	int status;
	int etime;
	int lvl;
};

class MsgPlayerDressAddNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 463 };

	MsgPlayerDressAddNotify() :
		Message(Category, Id)
	{
		dressid = 0;
		status = 0;
		etime = 0;
		lvl = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerDressAddNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 16;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << dressid;
		s << status;
		s << etime;
		s << lvl;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> dressid;
		s >> status;
		s >> etime;
		s >> lvl;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "dressid", dressid);
		lua::settable(L, -1, "status", status);
		lua::settable(L, -1, "etime", etime);
		lua::settable(L, -1, "lvl", lvl);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "dressid=" << dressid;
		buffer << ",status=" << status;
		buffer << ",etime=" << etime;
		buffer << ",lvl=" << lvl;
	}

public:
	int dressid;
	int status;
	int etime;
	int lvl;
};

class MsgPlayerDressOperatorRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 464 };

	MsgPlayerDressOperatorRequest() :
		Message(Category, Id)
	{
		op = 0;
		type = 0;
		id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerDressOperatorRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << op;
		s << type;
		s << id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> op;
		s >> type;
		s >> id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "op", op);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "id", id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "op=" << op;
		buffer << ",type=" << type;
		buffer << ",id=" << id;
	}

public:
	short op; //1 ���� 2 ���� 
	short type;
	int id;
};

class MsgPlayerDressOperatorResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 465 };

	MsgPlayerDressOperatorResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		op = 0;
		id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerDressOperatorResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << op;
		s << id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> op;
		s >> id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "op", op);
		lua::settable(L, -1, "id", id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",op=" << op;
		buffer << ",id=" << id;
	}

public:
	short errcode; //������ 
	short op; //1 ���� 2 ���� 
	int id;
};

class MsgExchangeSkillBookRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 466 };

	MsgExchangeSkillBookRequest() :
		Message(Category, Id)
	{
		exchageType = 0;
		exchageId = 0;
	}

	virtual const char *getName() const
	{
		return "MsgExchangeSkillBookRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << exchageType;
		s << exchageId;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> exchageType;
		s >> exchageId;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "exchageType", exchageType);
		lua::settable(L, -1, "exchageId", exchageId);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "exchageType=" << exchageType;
		buffer << ",exchageId=" << exchageId;
	}

public:
	short exchageType;
	int exchageId;
};

class MsgExchangeSkillBookResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 467 };

	MsgExchangeSkillBookResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		exchageType = 0;
		exchageId = 0;
	}

	virtual const char *getName() const
	{
		return "MsgExchangeSkillBookResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << exchageType;
		s << exchageId;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> exchageType;
		s >> exchageId;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "exchageType", exchageType);
		lua::settable(L, -1, "exchageId", exchageId);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",exchageType=" << exchageType;
		buffer << ",exchageId=" << exchageId;
	}

public:
	short errcode;
	short exchageType;
	short exchageId;
};

class MsgStonePosRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 470 };

	MsgStonePosRequest() :
		Message(Category, Id)
	{
		partpos = 0;
		stonepos = 0;
		typeId = 0;
	}

	virtual const char *getName() const
	{
		return "MsgStonePosRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << partpos;
		s << stonepos;
		s << typeId;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> partpos;
		s >> stonepos;
		s >> typeId;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "partpos", partpos);
		lua::settable(L, -1, "stonepos", stonepos);
		lua::settable(L, -1, "typeId", typeId);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "partpos=" << partpos;
		buffer << ",stonepos=" << stonepos;
		buffer << ",typeId=" << typeId;
	}

public:
	int partpos;
	int stonepos;
	int typeId;
};

class MsgStonePosResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 471 };

	MsgStonePosResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		partpos = 0;
		stonepos = 0;
	}

	virtual const char *getName() const
	{
		return "MsgStonePosResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << partpos;
		s << stonepos;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> partpos;
		s >> stonepos;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "partpos", partpos);
		lua::settable(L, -1, "stonepos", stonepos);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",partpos=" << partpos;
		buffer << ",stonepos=" << stonepos;
	}

public:
	short errcode;
	int partpos;
	int stonepos;
};

class MsgUpdateCSRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 473 };

	MsgUpdateCSRequest() :
		Message(Category, Id)
	{
		pos = 0;
		typeId = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdateCSRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pos;
		s << typeId;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pos;
		s >> typeId;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pos", pos);
		lua::settable(L, -1, "typeId", typeId);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pos=" << pos;
		buffer << ",typeId=" << typeId;
	}

public:
	int pos;
	int typeId;
};

class MsgUpdateCSResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 474 };

	MsgUpdateCSResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		pos = 0;
		typeId = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdateCSResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << pos;
		s << typeId;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> pos;
		s >> typeId;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "pos", pos);
		lua::settable(L, -1, "typeId", typeId);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",pos=" << pos;
		buffer << ",typeId=" << typeId;
	}

public:
	short errcode;
	int pos;
	int typeId;
};

class MsgSetDressStatusRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 475 };

	MsgSetDressStatusRequest() :
		Message(Category, Id)
	{
		status = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSetDressStatusRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << status;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> status;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "status", status);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "status=" << status;
	}

public:
	int status; //0 ���� 1 ��ʾ 
};

class MsgSetDressStatusResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 476 };

	MsgSetDressStatusResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSetDressStatusResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgVipServiceShowCheckRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 479 };

	MsgVipServiceShowCheckRequest() :
		Message(Category, Id)
	{
		showflag = 0;
	}

	virtual const char *getName() const
	{
		return "MsgVipServiceShowCheckRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << showflag;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> showflag;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "showflag", showflag);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "showflag=" << showflag;
	}

public:
	int showflag;
};

class MsgNearbyPlayerRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 480 };

	MsgNearbyPlayerRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgNearbyPlayerRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

struct NearPlayerInfo
{
public:
	NearPlayerInfo()
	{
		pid = 0;
		level = 0;
		reborn = 0;
		distance = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 16;
		length += sizeof(short) + name.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << pid;
		s << name;
		s << level;
		s << reborn;
		s << distance;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> pid;
		s >> name;
		s >> level;
		s >> reborn;
		s >> distance;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "reborn", reborn);
		lua::settable(L, -1, "distance", distance);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",level=" << level;
		buffer << ",reborn=" << reborn;
		buffer << ",distance=" << distance;
	}

public:
	int pid;
	std::string name;
	int level;
	int reborn;
	int distance;
};

class MsgNearbyPlayerResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 481 };

	MsgNearbyPlayerResponse() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgNearbyPlayerResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < playerlist.size(); ++i)
		{
			length += playerlist[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short playerlist_vector_size = (short)playerlist.size();
		s << playerlist_vector_size;
		if (playerlist_vector_size > 0)
		{
			for (auto it = playerlist.begin(); it != playerlist.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int playerlist_vector_size = s.read_int16();
		playerlist.clear();
		while (playerlist_vector_size > 0)
		{
			playerlist_vector_size--;
			NearPlayerInfo val;
			val.unserialize(s, false);
			playerlist.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < playerlist.size(); ++i)
		{
			playerlist[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "playerlist");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "playerlist=[";
		for (size_t i = 0; i < playerlist.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			playerlist[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<NearPlayerInfo> playerlist;
};

class MsgNearbyPlayerCheckRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 482 };

	MsgNearbyPlayerCheckRequest() :
		Message(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgNearbyPlayerCheckRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
	}

public:
	int pid;
};

class MsgNearbyCheckPlayerResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 483 };

	MsgNearbyCheckPlayerResponse() :
		Message(Category, Id)
	{
		repcode = 0;
		reppid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgNearbyCheckPlayerResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << repcode;
		s << reppid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> repcode;
		s >> reppid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "repcode", repcode);
		lua::settable(L, -1, "reppid", reppid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "repcode=" << repcode;
		buffer << ",reppid=" << reppid;
	}

public:
	int repcode;
	int reppid;
};

class MsgCreateRoleCodeInfoRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 484 };

	MsgCreateRoleCodeInfoRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgCreateRoleCodeInfoRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgCreateRoleCodeInfoResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 485 };

	MsgCreateRoleCodeInfoResponse() :
		Message(Category, Id)
	{
		count = 0;
	}

	virtual const char *getName() const
	{
		return "MsgCreateRoleCodeInfoResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short) + code.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << count;
		s << code;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> count;
		s >> code;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "count", count);
		lua::settable(L, -1, "code", code);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "count=" << count;
		buffer << ",code=" << code;
	}

public:
	int count;
	std::string code;
};

class MsgCreateRoleCodeRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 486 };

	MsgCreateRoleCodeRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgCreateRoleCodeRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgCreateRoleCodeResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 487 };

	MsgCreateRoleCodeResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgCreateRoleCodeResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 2;
		length += sizeof(short) + code.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << code;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> code;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "code", code);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",code=" << code;
	}

public:
	short errcode;
	std::string code;
};

class MsgGetMasterRewardRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 499 };

	MsgGetMasterRewardRequest() :
		Message(Category, Id)
	{
		index = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetMasterRewardRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << index;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> index;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "index", index);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "index=" << index;
	}

public:
	short index;
};

class MsgGetMasterRewardResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 500 };

	MsgGetMasterRewardResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetMasterRewardResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgOpenPrivilegeRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 501 };

	MsgOpenPrivilegeRequest() :
		Message(Category, Id)
	{
		index = 0;
	}

	virtual const char *getName() const
	{
		return "MsgOpenPrivilegeRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << index;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> index;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "index", index);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "index=" << index;
	}

public:
	short index;
};

class MsgOpenPrivilegeResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 502 };

	MsgOpenPrivilegeResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgOpenPrivilegeResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgGetPrivilegeRewardRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 504 };

	MsgGetPrivilegeRewardRequest() :
		Message(Category, Id)
	{
		index = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetPrivilegeRewardRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << index;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> index;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "index", index);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "index=" << index;
	}

public:
	short index;
};

class MsgGetPrivilegeRewardResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 505 };

	MsgGetPrivilegeRewardResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetPrivilegeRewardResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgRenewPrivilegeRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 506 };

	MsgRenewPrivilegeRequest() :
		Message(Category, Id)
	{
		index = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRenewPrivilegeRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << index;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> index;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "index", index);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "index=" << index;
	}

public:
	short index;
};

class MsgRenewPrivilegeResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 507 };

	MsgRenewPrivilegeResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRenewPrivilegeResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgUpdateXSRWTaskStateRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 508 };

	MsgUpdateXSRWTaskStateRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgUpdateXSRWTaskStateRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgUpdateXSRWTaskStateResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 509 };

	MsgUpdateXSRWTaskStateResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdateXSRWTaskStateResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgOnChallengeTowerRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 510 };

	MsgOnChallengeTowerRequest() :
		Message(Category, Id)
	{
		index = 0;
	}

	virtual const char *getName() const
	{
		return "MsgOnChallengeTowerRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << index;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> index;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "index", index);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "index=" << index;
	}

public:
	short index;
};

class MsgOnChallengeTowerResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 511 };

	MsgOnChallengeTowerResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgOnChallengeTowerResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgGetTowerRewardRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 512 };

	MsgGetTowerRewardRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGetTowerRewardRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgBuyDailyItemRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 513 };

	MsgBuyDailyItemRequest() :
		Message(Category, Id)
	{
		bigindex = 0;
		smallindex = 0;
	}

	virtual const char *getName() const
	{
		return "MsgBuyDailyItemRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << bigindex;
		s << smallindex;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> bigindex;
		s >> smallindex;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "bigindex", bigindex);
		lua::settable(L, -1, "smallindex", smallindex);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "bigindex=" << bigindex;
		buffer << ",smallindex=" << smallindex;
	}

public:
	short bigindex;
	short smallindex;
};

class MsgBuyDailyItemResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 514 };

	MsgBuyDailyItemResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgBuyDailyItemResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgCalcMyBossTimesRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 515 };

	MsgCalcMyBossTimesRequest() :
		Message(Category, Id)
	{
		eventid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgCalcMyBossTimesRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eventid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eventid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eventid", eventid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eventid=" << eventid;
	}

public:
	int eventid;
};

class MsgCalcMyBossTimesResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 516 };

	MsgCalcMyBossTimesResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgCalcMyBossTimesResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgGetTowerSweepRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 517 };

	MsgGetTowerSweepRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGetTowerSweepRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgGetTowerSweepResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 518 };

	MsgGetTowerSweepResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetTowerSweepResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgBossBoxDigRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 519 };

	MsgBossBoxDigRequest() :
		Message(Category, Id)
	{
		eid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgBossBoxDigRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
	}

public:
	int eid;
};

class MsgBossBoxDigResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 520 };

	MsgBossBoxDigResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgBossBoxDigResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgUpdateShopGuideRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 521 };

	MsgUpdateShopGuideRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgUpdateShopGuideRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgUpdateShopGuideResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 522 };

	MsgUpdateShopGuideResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdateShopGuideResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgStoneTransNpcNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 523 };

	MsgStoneTransNpcNotify() :
		Message(Category, Id)
	{
		npcid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgStoneTransNpcNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << npcid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> npcid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "npcid", npcid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "npcid=" << npcid;
	}

public:
	int npcid;
};

class MsgBossScoreAddNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 526 };

	MsgBossScoreAddNotify() :
		Message(Category, Id)
	{
		data = 0;
		typeId = 0;
	}

	virtual const char *getName() const
	{
		return "MsgBossScoreAddNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << data;
		s << typeId;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> data;
		s >> typeId;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "data", data);
		lua::settable(L, -1, "typeId", typeId);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "data=" << data;
		buffer << ",typeId=" << typeId;
	}

public:
	int data;
	int typeId;
};

class MsgBailRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 527 };

	MsgBailRequest() :
		Message(Category, Id)
	{
		money_type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgBailRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << money_type;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> money_type;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "money_type", money_type);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "money_type=" << money_type;
	}

public:
	short money_type;
};

class MsgBailResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 528 };

	MsgBailResponse() :
		Message(Category, Id)
	{
		sub_type = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgBailResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << sub_type;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> sub_type;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sub_type", sub_type);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "sub_type=" << sub_type;
		buffer << ",errcode=" << errcode;
	}

public:
	short sub_type;
	short errcode;
};

class MsgUpdateComposeStateRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 529 };

	MsgUpdateComposeStateRequest() :
		Message(Category, Id)
	{
		mode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdateComposeStateRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << mode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> mode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "mode", mode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "mode=" << mode;
	}

public:
	short mode;
};

class MsgMRDTTimuRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 530 };

	MsgMRDTTimuRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgMRDTTimuRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgMRDTTimuResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 531 };

	MsgMRDTTimuResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		id = 0;
		startTime = 0;
		curIndex = 0;
		curRight = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMRDTTimuResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 9;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << id;
		s << startTime;
		s << curIndex;
		s << curRight;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> id;
		s >> startTime;
		s >> curIndex;
		s >> curRight;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "startTime", startTime);
		lua::settable(L, -1, "curIndex", curIndex);
		lua::settable(L, -1, "curRight", curRight);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",id=" << id;
		buffer << ",startTime=" << startTime;
		buffer << ",curIndex=" << curIndex;
		buffer << ",curRight=" << curRight;
	}

public:
	short errcode;
	char id;
	int startTime;
	char curIndex;
	char curRight;
};

class MsgMRDTAnserRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 532 };

	MsgMRDTAnserRequest() :
		Message(Category, Id)
	{
		id = 0;
		answer = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMRDTAnserRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		s << answer;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		s >> answer;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "answer", answer);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",answer=" << answer;
	}

public:
	char id;
	char answer;
};

class MsgMRDTAnserResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 533 };

	MsgMRDTAnserResponse() :
		Message(Category, Id)
	{
		result = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMRDTAnserResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 1;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << result;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> result;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "result", result);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "result=" << result;
	}

public:
	char result;
};

class MsgMRDTRewardRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 534 };

	MsgMRDTRewardRequest() :
		Message(Category, Id)
	{
		rewardid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMRDTRewardRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << rewardid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> rewardid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "rewardid", rewardid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "rewardid=" << rewardid;
	}

public:
	int rewardid;
};

class MsgMRDTQIUZHURequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 535 };

	MsgMRDTQIUZHURequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgMRDTQIUZHURequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgFulingRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 536 };

	MsgFulingRequest() :
		Message(Category, Id)
	{
		equipId = 0;
		matEquipCount = 0;
	}

	virtual const char *getName() const
	{
		return "MsgFulingRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 8;
		length += sizeof(short);
		length += matEquipId.size() * 4;
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << equipId;
		short matEquipId_vector_size = (short)matEquipId.size();
		s << matEquipId_vector_size;
		if (matEquipId_vector_size > 0)
		{
			for (auto it = matEquipId.begin(); it != matEquipId.end(); ++it)
			{
				s << *it;
			}
		}
		s << matEquipCount;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> equipId;
		int matEquipId_vector_size = s.read_int16();
		matEquipId.clear();
		while (matEquipId_vector_size > 0)
		{
			matEquipId_vector_size--;
			int val;
			s >> val;
			matEquipId.push_back(val);
		}
		s >> matEquipCount;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "equipId", equipId);
		lua::newtable(lua::L);
		for (size_t i = 0; i < matEquipId.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, matEquipId[i]);
		}
		lua::settable(L, -2, "matEquipId");
		lua::settable(L, -1, "matEquipCount", matEquipCount);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "equipId=" << equipId;
		buffer << ",matEquipId=[";
		for (size_t i = 0; i < matEquipId.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << matEquipId[i];
		}
		buffer << "]";
		buffer << ",matEquipCount=" << matEquipCount;
	}

public:
	int equipId;
	std::vector<int> matEquipId;
	int matEquipCount;
};

class MsgFulingResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 537 };

	MsgFulingResponse() :
		Message(Category, Id)
	{
		equipId = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgFulingResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << equipId;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> equipId;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "equipId", equipId);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "equipId=" << equipId;
		buffer << ",errcode=" << errcode;
	}

public:
	int equipId;
	short errcode;
};

class MsgFulingZYRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 538 };

	MsgFulingZYRequest() :
		Message(Category, Id)
	{
		equipId = 0;
		targetEquipId = 0;
	}

	virtual const char *getName() const
	{
		return "MsgFulingZYRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << equipId;
		s << targetEquipId;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> equipId;
		s >> targetEquipId;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "equipId", equipId);
		lua::settable(L, -1, "targetEquipId", targetEquipId);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "equipId=" << equipId;
		buffer << ",targetEquipId=" << targetEquipId;
	}

public:
	int equipId;
	int targetEquipId;
};

class MsgFulingZYResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 539 };

	MsgFulingZYResponse() :
		Message(Category, Id)
	{
		equipId = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgFulingZYResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << equipId;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> equipId;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "equipId", equipId);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "equipId=" << equipId;
		buffer << ",errcode=" << errcode;
	}

public:
	int equipId;
	short errcode;
};

class MsgAskforSoulSystemInfoRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 540 };

	MsgAskforSoulSystemInfoRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgAskforSoulSystemInfoRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgAskforSoulSystemInfoResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 541 };

	MsgAskforSoulSystemInfoResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgAskforSoulSystemInfoResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgImproveSoulRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 542 };

	MsgImproveSoulRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgImproveSoulRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgImproveSoulResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 543 };

	MsgImproveSoulResponse() :
		Message(Category, Id)
	{
		type = 0;
		levelUp = 0;
		gradeUp = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgImproveSoulResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << type;
		s << levelUp;
		s << gradeUp;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> type;
		s >> levelUp;
		s >> gradeUp;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "levelUp", levelUp);
		lua::settable(L, -1, "gradeUp", gradeUp);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
		buffer << ",levelUp=" << levelUp;
		buffer << ",gradeUp=" << gradeUp;
		buffer << ",errcode=" << errcode;
	}

public:
	short type;
	short levelUp;
	short gradeUp;
	short errcode;
};

class MsgExchangeSoulRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 544 };

	MsgExchangeSoulRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgExchangeSoulRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgExchangeSoulResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 545 };

	MsgExchangeSoulResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgExchangeSoulResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgBossUpdateTimeRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 546 };

	MsgBossUpdateTimeRequest() :
		Message(Category, Id)
	{
		powerkey = 0;
	}

	virtual const char *getName() const
	{
		return "MsgBossUpdateTimeRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << powerkey;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> powerkey;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "powerkey", powerkey);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "powerkey=" << powerkey;
	}

public:
	int powerkey;
};

class MsgOpenSecondWareRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 547 };

	MsgOpenSecondWareRequest() :
		Message(Category, Id)
	{
		gridKey = 0;
	}

	virtual const char *getName() const
	{
		return "MsgOpenSecondWareRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << gridKey;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> gridKey;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "gridKey", gridKey);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "gridKey=" << gridKey;
	}

public:
	int gridKey;
};

class MsgOpenSecondWareResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 548 };

	MsgOpenSecondWareResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		beginPos = 0;
		endPos = 0;
	}

	virtual const char *getName() const
	{
		return "MsgOpenSecondWareResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << beginPos;
		s << endPos;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> beginPos;
		s >> endPos;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "beginPos", beginPos);
		lua::settable(L, -1, "endPos", endPos);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",beginPos=" << beginPos;
		buffer << ",endPos=" << endPos;
	}

public:
	short errcode;
	short beginPos;
	short endPos;
};

class MsgQuickUseItemsRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 549 };

	MsgQuickUseItemsRequest() :
		Message(Category, Id)
	{
		totalIndex = 0;
	}

	virtual const char *getName() const
	{
		return "MsgQuickUseItemsRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << totalIndex;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> totalIndex;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "totalIndex", totalIndex);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "totalIndex=" << totalIndex;
	}

public:
	long long totalIndex;
};

class MsgInviteFriendsToSameGuildResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 553 };

	MsgInviteFriendsToSameGuildResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		leaveCD = 0;
	}

	virtual const char *getName() const
	{
		return "MsgInviteFriendsToSameGuildResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << leaveCD;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> leaveCD;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "leaveCD", leaveCD);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",leaveCD=" << leaveCD;
	}

public:
	short errcode;
	int leaveCD;
};

class MsgQuickUseItemsResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 550 };

	MsgQuickUseItemsResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgQuickUseItemsResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgInviteFriendsToSameGuildRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 551 };

	MsgInviteFriendsToSameGuildRequest() :
		Message(Category, Id)
	{
		palyerPid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgInviteFriendsToSameGuildRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << palyerPid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> palyerPid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "palyerPid", palyerPid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "palyerPid=" << palyerPid;
	}

public:
	int palyerPid;
};

class MsgTellInvitedFriendToGuildNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 552 };

	MsgTellInvitedFriendToGuildNotify() :
		Message(Category, Id)
	{
		playerID = 0;
		guildID = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTellInvitedFriendToGuildNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 8;
		length += sizeof(short) + playerName.size();
		length += sizeof(short) + guildName.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << playerName;
		s << playerID;
		s << guildName;
		s << guildID;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> playerName;
		s >> playerID;
		s >> guildName;
		s >> guildID;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "playerName", playerName);
		lua::settable(L, -1, "playerID", playerID);
		lua::settable(L, -1, "guildName", guildName);
		lua::settable(L, -1, "guildID", guildID);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "playerName=" << playerName;
		buffer << ",playerID=" << playerID;
		buffer << ",guildName=" << guildName;
		buffer << ",guildID=" << guildID;
	}

public:
	std::string playerName;
	int playerID;
	std::string guildName;
	int guildID;
};

class MsgDecomposeDressRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 554 };

	MsgDecomposeDressRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgDecomposeDressRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		length += itemList.size() * 4;
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short itemList_vector_size = (short)itemList.size();
		s << itemList_vector_size;
		if (itemList_vector_size > 0)
		{
			for (auto it = itemList.begin(); it != itemList.end(); ++it)
			{
				s << *it;
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int itemList_vector_size = s.read_int16();
		itemList.clear();
		while (itemList_vector_size > 0)
		{
			itemList_vector_size--;
			int val;
			s >> val;
			itemList.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < itemList.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, itemList[i]);
		}
		lua::settable(L, -2, "itemList");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "itemList=[";
		for (size_t i = 0; i < itemList.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << itemList[i];
		}
		buffer << "]";
	}

public:
	std::vector<int> itemList;
};

class MsgDecomposeDressResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 555 };

	MsgDecomposeDressResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDecomposeDressResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgSyntheticRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 556 };

	MsgSyntheticRequest() :
		Message(Category, Id)
	{
		targetItemCounts = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyntheticRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << targetItemCounts;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> targetItemCounts;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "targetItemCounts", targetItemCounts);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "targetItemCounts=" << targetItemCounts;
	}

public:
	int targetItemCounts;
};

class MsgSyntheticResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 557 };

	MsgSyntheticResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyntheticResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

struct DamageShow
{
public:
	DamageShow()
	{
		DamageValue = 0;
		DamageType = 0;
	}

	size_t getLength(bool ex) const
	{
		return 8;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << DamageValue;
		s << DamageType;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> DamageValue;
		s >> DamageType;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "DamageValue", DamageValue);
		lua::settable(L, -1, "DamageType", DamageType);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "DamageValue=" << DamageValue;
		buffer << ",DamageType=" << DamageType;
	}

public:
	int DamageValue;
	int DamageType;
};

class MsgFloatWordMessageResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 558 };

	MsgFloatWordMessageResponse() :
		Message(Category, Id)
	{
		dstEid = 0;
		delay = 0;
	}

	virtual const char *getName() const
	{
		return "MsgFloatWordMessageResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 8;
		length += sizeof(short);
		for (size_t i = 0; i < damage.size(); ++i)
		{
			length += damage[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << dstEid;
		short damage_vector_size = (short)damage.size();
		s << damage_vector_size;
		if (damage_vector_size > 0)
		{
			for (auto it = damage.begin(); it != damage.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		s << delay;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> dstEid;
		int damage_vector_size = s.read_int16();
		damage.clear();
		while (damage_vector_size > 0)
		{
			damage_vector_size--;
			DamageShow val;
			val.unserialize(s, false);
			damage.push_back(val);
		}
		s >> delay;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "dstEid", dstEid);
		lua::newtable(lua::L);
		for (size_t i = 0; i < damage.size(); ++i)
		{
			damage[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "damage");
		lua::settable(L, -1, "delay", delay);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "dstEid=" << dstEid;
		buffer << ",damage=[";
		for (size_t i = 0; i < damage.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			damage[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
		buffer << ",delay=" << delay;
	}

public:
	int dstEid;
	std::vector<DamageShow> damage;
	int delay;
};

class MsgEnterCrossServerNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 559 };

	MsgEnterCrossServerNotify() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgEnterCrossServerNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgUpdServerNameRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 560 };

	MsgUpdServerNameRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgUpdServerNameRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short) + serverName.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << serverName;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> serverName;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "serverName", serverName);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "serverName=" << serverName;
	}

public:
	std::string serverName;
};

class MsgPlayerLevelUpRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 561 };

	MsgPlayerLevelUpRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgPlayerLevelUpRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgPlayerLevelUpResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 562 };

	MsgPlayerLevelUpResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerLevelUpResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgSmeltRefreshRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 565 };

	MsgSmeltRefreshRequest() :
		Message(Category, Id)
	{
		ItemId = 0;
		lockedNums = 0;
		lockedFlag = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSmeltRefreshRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << ItemId;
		s << lockedNums;
		s << lockedFlag;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> ItemId;
		s >> lockedNums;
		s >> lockedFlag;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "ItemId", ItemId);
		lua::settable(L, -1, "lockedNums", lockedNums);
		lua::settable(L, -1, "lockedFlag", lockedFlag);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "ItemId=" << ItemId;
		buffer << ",lockedNums=" << lockedNums;
		buffer << ",lockedFlag=" << lockedFlag;
	}

public:
	int ItemId;
	int lockedNums;
	int lockedFlag;
};

class MsgSmeltRefreshResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 566 };

	MsgSmeltRefreshResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSmeltRefreshResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgSmeltReplaceRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 567 };

	MsgSmeltReplaceRequest() :
		Message(Category, Id)
	{
		ItemId = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSmeltReplaceRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << ItemId;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> ItemId;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "ItemId", ItemId);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "ItemId=" << ItemId;
	}

public:
	int ItemId;
};

class MsgSmeltReplaceResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 568 };

	MsgSmeltReplaceResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSmeltReplaceResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgSpiritStoneRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 569 };

	MsgSpiritStoneRequest() :
		Message(Category, Id)
	{
		wearType = 0;
		equipIndex = 0;
		stoneSid = 0;
		itemId = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSpiritStoneRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 14;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << wearType;
		s << equipIndex;
		s << stoneSid;
		s << itemId;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> wearType;
		s >> equipIndex;
		s >> stoneSid;
		s >> itemId;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "wearType", wearType);
		lua::settable(L, -1, "equipIndex", equipIndex);
		lua::settable(L, -1, "stoneSid", stoneSid);
		lua::settable(L, -1, "itemId", itemId);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "wearType=" << wearType;
		buffer << ",equipIndex=" << equipIndex;
		buffer << ",stoneSid=" << stoneSid;
		buffer << ",itemId=" << itemId;
	}

public:
	short wearType;
	int equipIndex;
	int stoneSid;
	int itemId;
};

class MsgSpiritStoneResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 570 };

	MsgSpiritStoneResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		equipIndex = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSpiritStoneResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << equipIndex;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> equipIndex;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "equipIndex", equipIndex);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",equipIndex=" << equipIndex;
	}

public:
	int errcode;
	int equipIndex;
};

class MsgSpiritStoneMakeRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 571 };

	MsgSpiritStoneMakeRequest() :
		Message(Category, Id)
	{
		equipIndex = 0;
		stoneType = 0;
		stoneLevel = 0;
		stoneNum = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSpiritStoneMakeRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << equipIndex;
		s << stoneType;
		s << stoneLevel;
		s << stoneNum;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> equipIndex;
		s >> stoneType;
		s >> stoneLevel;
		s >> stoneNum;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "equipIndex", equipIndex);
		lua::settable(L, -1, "stoneType", stoneType);
		lua::settable(L, -1, "stoneLevel", stoneLevel);
		lua::settable(L, -1, "stoneNum", stoneNum);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "equipIndex=" << equipIndex;
		buffer << ",stoneType=" << stoneType;
		buffer << ",stoneLevel=" << stoneLevel;
		buffer << ",stoneNum=" << stoneNum;
	}

public:
	short equipIndex;
	short stoneType;
	int stoneLevel;
	int stoneNum;
};

class MsgStoneMakeResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 572 };

	MsgStoneMakeResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		equipIndex = 0;
	}

	virtual const char *getName() const
	{
		return "MsgStoneMakeResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << equipIndex;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> equipIndex;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "equipIndex", equipIndex);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",equipIndex=" << equipIndex;
	}

public:
	int errcode;
	short equipIndex;
};

class MsgFabaoUpRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 652 };

	MsgFabaoUpRequest() :
		Message(Category, Id)
	{
		id = 0;
		opt = 0;
	}

	virtual const char *getName() const
	{
		return "MsgFabaoUpRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		s << opt;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		s >> opt;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "opt", opt);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",opt=" << opt;
	}

public:
	int id;
	int opt;
};

class MsgFabaoUpResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 653 };

	MsgFabaoUpResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		opt = 0;
	}

	virtual const char *getName() const
	{
		return "MsgFabaoUpResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << opt;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> opt;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "opt", opt);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",opt=" << opt;
	}

public:
	int errcode;
	int opt;
};

class MsgChangeWingDressRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 712 };

	MsgChangeWingDressRequest() :
		Message(Category, Id)
	{
		wingIndex = 0;
	}

	virtual const char *getName() const
	{
		return "MsgChangeWingDressRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << wingIndex;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> wingIndex;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "wingIndex", wingIndex);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "wingIndex=" << wingIndex;
	}

public:
	short wingIndex;
};

class MsgChangeWingDressResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 713 };

	MsgChangeWingDressResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgChangeWingDressResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgImproveWingRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 714 };

	MsgImproveWingRequest() :
		Message(Category, Id)
	{
		index = 0;
	}

	virtual const char *getName() const
	{
		return "MsgImproveWingRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << index;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> index;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "index", index);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "index=" << index;
	}

public:
	short index;
};

class MsgImproveWingResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 715 };

	MsgImproveWingResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgImproveWingResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgUpdatePlayerSkillRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 716 };

	MsgUpdatePlayerSkillRequest() :
		Message(Category, Id)
	{
		skillid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdatePlayerSkillRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << skillid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> skillid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "skillid", skillid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "skillid=" << skillid;
	}

public:
	int skillid;
};

class MsgUpdatePlayerSkillResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 717 };

	MsgUpdatePlayerSkillResponse() :
		Message(Category, Id)
	{
		skillid = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdatePlayerSkillResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << skillid;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> skillid;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "skillid", skillid);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "skillid=" << skillid;
		buffer << ",errcode=" << errcode;
	}

public:
	int skillid;
	int errcode;
};

class MsgTriggerDragonSkillNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 722 };

	MsgTriggerDragonSkillNotify() :
		Message(Category, Id)
	{
		skillId = 0;
		targetEid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTriggerDragonSkillNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << skillId;
		s << targetEid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> skillId;
		s >> targetEid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "skillId", skillId);
		lua::settable(L, -1, "targetEid", targetEid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "skillId=" << skillId;
		buffer << ",targetEid=" << targetEid;
	}

public:
	int skillId;
	int targetEid;
};

class MsgExchangeHegemonEquipShowRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 723 };

	MsgExchangeHegemonEquipShowRequest() :
		Message(Category, Id)
	{
		exchageType = 0;
	}

	virtual const char *getName() const
	{
		return "MsgExchangeHegemonEquipShowRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << exchageType;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> exchageType;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "exchageType", exchageType);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "exchageType=" << exchageType;
	}

public:
	short exchageType;
};

class MsgPlayerDressWardrobeLvlUpRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 726 };

	MsgPlayerDressWardrobeLvlUpRequest() :
		Message(Category, Id)
	{
		value = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerDressWardrobeLvlUpRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short);
		length += itemList.size() * 4;
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << value;
		short itemList_vector_size = (short)itemList.size();
		s << itemList_vector_size;
		if (itemList_vector_size > 0)
		{
			for (auto it = itemList.begin(); it != itemList.end(); ++it)
			{
				s << *it;
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> value;
		int itemList_vector_size = s.read_int16();
		itemList.clear();
		while (itemList_vector_size > 0)
		{
			itemList_vector_size--;
			int val;
			s >> val;
			itemList.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "value", value);
		lua::newtable(lua::L);
		for (size_t i = 0; i < itemList.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, itemList[i]);
		}
		lua::settable(L, -2, "itemList");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "value=" << value;
		buffer << ",itemList=[";
		for (size_t i = 0; i < itemList.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << itemList[i];
		}
		buffer << "]";
	}

public:
	int value;
	std::vector<int> itemList;
};

class MsgPlayerDressWardrobeLvlUpResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 727 };

	MsgPlayerDressWardrobeLvlUpResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerDressWardrobeLvlUpResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgPlayerTherionLevelRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 731 };

	MsgPlayerTherionLevelRequest() :
		Message(Category, Id)
	{
		index = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerTherionLevelRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << index;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> index;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "index", index);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "index=" << index;
	}

public:
	int index;
};

class MsgPlayerTherionLevelResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 732 };

	MsgPlayerTherionLevelResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerTherionLevelResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgPlayerLovelyPetRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 733 };

	MsgPlayerLovelyPetRequest() :
		Message(Category, Id)
	{
		type = 0;
		petid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerLovelyPetRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << type;
		s << petid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> type;
		s >> petid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "petid", petid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
		buffer << ",petid=" << petid;
	}

public:
	int type;
	int petid;
};

class MsgPlayerLovelyPetResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 734 };

	MsgPlayerLovelyPetResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerLovelyPetResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgPlayerLoadPetRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 736 };

	MsgPlayerLoadPetRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgPlayerLoadPetRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgKeepMsgRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 737 };

	MsgKeepMsgRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgKeepMsgRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

struct stcChatKeepInfo
{
public:
	stcChatKeepInfo()
	{
		chatType = 0;
		pid = 0;
		gender = 0;
		vipLevel = 0;
		level = 0;
		job = 0;
		position = 0;
		redID = 0;
		targetPid = 0;
		keepTime = 0;
		serverid = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 32;
		length += sizeof(short) + playerName.size();
		length += sizeof(short) + chatText.size();
		length += sizeof(short) + guildName.size();
		length += ex ? sizeof(int) : sizeof(short);
		for (size_t i = 0; i < props.size(); ++i)
		{
			length += props[i].getLength(ex);
		}
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << chatType;
		s << pid;
		s << playerName;
		s << gender;
		s << vipLevel;
		s << chatText;
		s << level;
		s << job;
		s << position;
		s << redID;
		s << targetPid;
		s << guildName;
		s << keepTime;
		s << serverid;
		int props_vector_size = ex ? (int)props.size() : (short)props.size();
		if (ex)
		{
			s << props_vector_size;
		}
		else
		{
			s << (short)props_vector_size;
		}
		if (props_vector_size > 0)
		{
			for (auto it = props.begin(); it != props.end(); ++it)
			{
				(*it).serialize(s, ex);
			}
		}
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> chatType;
		s >> pid;
		s >> playerName;
		s >> gender;
		s >> vipLevel;
		s >> chatText;
		s >> level;
		s >> job;
		s >> position;
		s >> redID;
		s >> targetPid;
		s >> guildName;
		s >> keepTime;
		s >> serverid;
		int props_vector_size = ex ? s.read_int32() : s.read_int16();
		props.clear();
		while (props_vector_size > 0)
		{
			props_vector_size--;
			chatPlayerProp val;
			val.unserialize(s, ex);
			props.push_back(val);
		}
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "chatType", chatType);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "playerName", playerName);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "vipLevel", vipLevel);
		lua::settable(L, -1, "chatText", chatText);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "job", job);
		lua::settable(L, -1, "position", position);
		lua::settable(L, -1, "redID", redID);
		lua::settable(L, -1, "targetPid", targetPid);
		lua::settable(L, -1, "guildName", guildName);
		lua::settable(L, -1, "keepTime", keepTime);
		lua::settable(L, -1, "serverid", serverid);
		lua::newtable(lua::L);
		for (size_t i = 0; i < props.size(); ++i)
		{
			props[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "props");
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "chatType=" << chatType;
		buffer << ",pid=" << pid;
		buffer << ",playerName=" << playerName;
		buffer << ",gender=" << gender;
		buffer << ",vipLevel=" << vipLevel;
		buffer << ",chatText=" << chatText;
		buffer << ",level=" << level;
		buffer << ",job=" << job;
		buffer << ",position=" << position;
		buffer << ",redID=" << redID;
		buffer << ",targetPid=" << targetPid;
		buffer << ",guildName=" << guildName;
		buffer << ",keepTime=" << keepTime;
		buffer << ",serverid=" << serverid;
		buffer << ",props=[";
		for (size_t i = 0; i < props.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			props[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	short chatType;
	int pid;
	std::string playerName;
	short gender;
	short vipLevel;
	std::string chatText;
	short level;
	short job;
	short position;
	int redID;
	int targetPid;
	std::string guildName;
	int keepTime;
	int serverid;
	std::vector<chatPlayerProp> props;
};

class MsgKeepMsgResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 738 };

	MsgKeepMsgResponse() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgKeepMsgResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < WorldArray.size(); ++i)
		{
			length += WorldArray[i].getLength(false);
		}
		length += sizeof(short);
		for (size_t i = 0; i < TheaterArray.size(); ++i)
		{
			length += TheaterArray[i].getLength(false);
		}
		length += sizeof(short);
		for (size_t i = 0; i < GuildArray.size(); ++i)
		{
			length += GuildArray[i].getLength(false);
		}
		length += sizeof(short);
		for (size_t i = 0; i < PrivateArray.size(); ++i)
		{
			length += PrivateArray[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short WorldArray_vector_size = (short)WorldArray.size();
		s << WorldArray_vector_size;
		if (WorldArray_vector_size > 0)
		{
			for (auto it = WorldArray.begin(); it != WorldArray.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		short TheaterArray_vector_size = (short)TheaterArray.size();
		s << TheaterArray_vector_size;
		if (TheaterArray_vector_size > 0)
		{
			for (auto it = TheaterArray.begin(); it != TheaterArray.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		short GuildArray_vector_size = (short)GuildArray.size();
		s << GuildArray_vector_size;
		if (GuildArray_vector_size > 0)
		{
			for (auto it = GuildArray.begin(); it != GuildArray.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		short PrivateArray_vector_size = (short)PrivateArray.size();
		s << PrivateArray_vector_size;
		if (PrivateArray_vector_size > 0)
		{
			for (auto it = PrivateArray.begin(); it != PrivateArray.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int WorldArray_vector_size = s.read_int16();
		WorldArray.clear();
		while (WorldArray_vector_size > 0)
		{
			WorldArray_vector_size--;
			stcChatKeepInfo val;
			val.unserialize(s, false);
			WorldArray.push_back(val);
		}
		int TheaterArray_vector_size = s.read_int16();
		TheaterArray.clear();
		while (TheaterArray_vector_size > 0)
		{
			TheaterArray_vector_size--;
			stcChatKeepInfo val;
			val.unserialize(s, false);
			TheaterArray.push_back(val);
		}
		int GuildArray_vector_size = s.read_int16();
		GuildArray.clear();
		while (GuildArray_vector_size > 0)
		{
			GuildArray_vector_size--;
			stcChatKeepInfo val;
			val.unserialize(s, false);
			GuildArray.push_back(val);
		}
		int PrivateArray_vector_size = s.read_int16();
		PrivateArray.clear();
		while (PrivateArray_vector_size > 0)
		{
			PrivateArray_vector_size--;
			stcChatKeepInfo val;
			val.unserialize(s, false);
			PrivateArray.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < WorldArray.size(); ++i)
		{
			WorldArray[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "WorldArray");
		lua::newtable(lua::L);
		for (size_t i = 0; i < TheaterArray.size(); ++i)
		{
			TheaterArray[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "TheaterArray");
		lua::newtable(lua::L);
		for (size_t i = 0; i < GuildArray.size(); ++i)
		{
			GuildArray[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "GuildArray");
		lua::newtable(lua::L);
		for (size_t i = 0; i < PrivateArray.size(); ++i)
		{
			PrivateArray[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "PrivateArray");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "WorldArray=[";
		for (size_t i = 0; i < WorldArray.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			WorldArray[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
		buffer << ",TheaterArray=[";
		for (size_t i = 0; i < TheaterArray.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			TheaterArray[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
		buffer << ",GuildArray=[";
		for (size_t i = 0; i < GuildArray.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			GuildArray[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
		buffer << ",PrivateArray=[";
		for (size_t i = 0; i < PrivateArray.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			PrivateArray[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<stcChatKeepInfo> WorldArray;
	std::vector<stcChatKeepInfo> TheaterArray;
	std::vector<stcChatKeepInfo> GuildArray;
	std::vector<stcChatKeepInfo> PrivateArray;
};

class MsgPlayerGetBaoBaoSkillRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 739 };

	MsgPlayerGetBaoBaoSkillRequest() :
		Message(Category, Id)
	{
		bagid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerGetBaoBaoSkillRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << bagid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> bagid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "bagid", bagid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "bagid=" << bagid;
	}

public:
	int bagid;
};

class MsgPlayerGetBaoBaoSkillResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 740 };

	MsgPlayerGetBaoBaoSkillResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerGetBaoBaoSkillResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

struct WarZoneDropDetail
{
public:
	WarZoneDropDetail()
	{
		killerPid = 0;
		mapId = 0;
		monsterId = 0;
		dropItemId = 0;
		dropTime = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 20;
		length += sizeof(short) + killerName.size();
		length += sizeof(short) + gameServerName.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << killerPid;
		s << killerName;
		s << gameServerName;
		s << mapId;
		s << monsterId;
		s << dropItemId;
		s << dropTime;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> killerPid;
		s >> killerName;
		s >> gameServerName;
		s >> mapId;
		s >> monsterId;
		s >> dropItemId;
		s >> dropTime;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "killerPid", killerPid);
		lua::settable(L, -1, "killerName", killerName);
		lua::settable(L, -1, "gameServerName", gameServerName);
		lua::settable(L, -1, "mapId", mapId);
		lua::settable(L, -1, "monsterId", monsterId);
		lua::settable(L, -1, "dropItemId", dropItemId);
		lua::settable(L, -1, "dropTime", dropTime);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "killerPid=" << killerPid;
		buffer << ",killerName=" << killerName;
		buffer << ",gameServerName=" << gameServerName;
		buffer << ",mapId=" << mapId;
		buffer << ",monsterId=" << monsterId;
		buffer << ",dropItemId=" << dropItemId;
		buffer << ",dropTime=" << dropTime;
	}

public:
	int killerPid;
	std::string killerName;
	std::string gameServerName;
	int mapId;
	int monsterId;
	int dropItemId;
	int dropTime;
};

class MsgSyncWarZoneDropInfoToPlayer : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 743 };

	MsgSyncWarZoneDropInfoToPlayer() :
		Message(Category, Id)
	{
		reload = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncWarZoneDropInfoToPlayer";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 2;
		length += sizeof(short);
		for (size_t i = 0; i < topDropInfoList.size(); ++i)
		{
			length += topDropInfoList[i].getLength(false);
		}
		length += sizeof(short);
		for (size_t i = 0; i < dropInfoList.size(); ++i)
		{
			length += dropInfoList[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << reload;
		short topDropInfoList_vector_size = (short)topDropInfoList.size();
		s << topDropInfoList_vector_size;
		if (topDropInfoList_vector_size > 0)
		{
			for (auto it = topDropInfoList.begin(); it != topDropInfoList.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		short dropInfoList_vector_size = (short)dropInfoList.size();
		s << dropInfoList_vector_size;
		if (dropInfoList_vector_size > 0)
		{
			for (auto it = dropInfoList.begin(); it != dropInfoList.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> reload;
		int topDropInfoList_vector_size = s.read_int16();
		topDropInfoList.clear();
		while (topDropInfoList_vector_size > 0)
		{
			topDropInfoList_vector_size--;
			WarZoneDropDetail val;
			val.unserialize(s, false);
			topDropInfoList.push_back(val);
		}
		int dropInfoList_vector_size = s.read_int16();
		dropInfoList.clear();
		while (dropInfoList_vector_size > 0)
		{
			dropInfoList_vector_size--;
			WarZoneDropDetail val;
			val.unserialize(s, false);
			dropInfoList.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "reload", reload);
		lua::newtable(lua::L);
		for (size_t i = 0; i < topDropInfoList.size(); ++i)
		{
			topDropInfoList[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "topDropInfoList");
		lua::newtable(lua::L);
		for (size_t i = 0; i < dropInfoList.size(); ++i)
		{
			dropInfoList[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "dropInfoList");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "reload=" << reload;
		buffer << ",topDropInfoList=[";
		for (size_t i = 0; i < topDropInfoList.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			topDropInfoList[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
		buffer << ",dropInfoList=[";
		for (size_t i = 0; i < dropInfoList.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			dropInfoList[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	short reload;
	std::vector<WarZoneDropDetail> topDropInfoList;
	std::vector<WarZoneDropDetail> dropInfoList;
};

class MsgPlayerGetTrainingRewardRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 744 };

	MsgPlayerGetTrainingRewardRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgPlayerGetTrainingRewardRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgTrainingChallengeNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 745 };

	MsgTrainingChallengeNotify() :
		Message(Category, Id)
	{
		state = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTrainingChallengeNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << state;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> state;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "state", state);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "state=" << state;
	}

public:
	int state;
};

class MsgPlayerGetSpecialRingGiftRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 746 };

	MsgPlayerGetSpecialRingGiftRequest() :
		Message(Category, Id)
	{
		index = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerGetSpecialRingGiftRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << index;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> index;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "index", index);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "index=" << index;
	}

public:
	int index;
};

class MsgPlayerGetSpecialRingGiftResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 747 };

	MsgPlayerGetSpecialRingGiftResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerGetSpecialRingGiftResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgExchangeIngotRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 748 };

	MsgExchangeIngotRequest() :
		Message(Category, Id)
	{
		count = 0;
	}

	virtual const char *getName() const
	{
		return "MsgExchangeIngotRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << count;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> count;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "count", count);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "count=" << count;
	}

public:
	int count; //��ʯ���� 
};

class MsgExchangeIngotResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 749 };

	MsgExchangeIngotResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgExchangeIngotResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgBigBangItemResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 750 };

	MsgBigBangItemResponse() :
		Message(Category, Id)
	{
		itemId = 0;
	}

	virtual const char *getName() const
	{
		return "MsgBigBangItemResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << itemId;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> itemId;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "itemId", itemId);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "itemId=" << itemId;
	}

public:
	int itemId;
};

class MsgBigBangUpLevelResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 751 };

	MsgBigBangUpLevelResponse() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgBigBangUpLevelResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgRoastPigRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 752 };

	MsgRoastPigRequest() :
		Message(Category, Id)
	{
		type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRoastPigRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << type;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> type;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
	}

public:
	int type; //�������ͣ�1-��ʼ�й� 2-��ȡ���� 
};

class MsgRoastPigResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 753 };

	MsgRoastPigResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRoastPigResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgVipFireRainResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 755 };

	MsgVipFireRainResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgVipFireRainResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgMonthCardGetRewardRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 756 };

	MsgMonthCardGetRewardRequest() :
		Message(Category, Id)
	{
		type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMonthCardGetRewardRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << type;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> type;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
	}

public:
	int type; //�������ͣ�1-�¿� 2-�ܿ� 
};

class MsgMemberOpeartionRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 757 };

	MsgMemberOpeartionRequest() :
		Message(Category, Id)
	{
		type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMemberOpeartionRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << type;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> type;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
	}

public:
	int type; //�������ͣ�1-�����Ա 2-��ȡ���� 
};

class MsgMemberOpeartionResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 758 };

	MsgMemberOpeartionResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMemberOpeartionResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgNewVipActiveRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 759 };

	MsgNewVipActiveRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgNewVipActiveRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgNewVipActiveResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 760 };

	MsgNewVipActiveResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgNewVipActiveResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgNewVipLvlUpRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 761 };

	MsgNewVipLvlUpRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgNewVipLvlUpRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgNewVipLvlUpResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 762 };

	MsgNewVipLvlUpResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgNewVipLvlUpResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgNewVipChallengeRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 763 };

	MsgNewVipChallengeRequest() :
		Message(Category, Id)
	{
		index = 0;
	}

	virtual const char *getName() const
	{
		return "MsgNewVipChallengeRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << index;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> index;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "index", index);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "index=" << index;
	}

public:
	int index;
};

class MsgNewVipChallengeResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 764 };

	MsgNewVipChallengeResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgNewVipChallengeResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgRobResultResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 765 };

	MsgRobResultResponse() :
		Message(Category, Id)
	{
		pid = 0;
		lode_lvl = 0;
		owner_lvl = 0;
		result = 0;
		owner_power = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRobResultResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 20;
		length += sizeof(short) + owner_name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << lode_lvl;
		s << owner_lvl;
		s << result;
		s << owner_name;
		s << owner_power;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> lode_lvl;
		s >> owner_lvl;
		s >> result;
		s >> owner_name;
		s >> owner_power;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "lode_lvl", lode_lvl);
		lua::settable(L, -1, "owner_lvl", owner_lvl);
		lua::settable(L, -1, "result", result);
		lua::settable(L, -1, "owner_name", owner_name);
		lua::settable(L, -1, "owner_power", owner_power);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",lode_lvl=" << lode_lvl;
		buffer << ",owner_lvl=" << owner_lvl;
		buffer << ",result=" << result;
		buffer << ",owner_name=" << owner_name;
		buffer << ",owner_power=" << owner_power;
	}

public:
	int pid;
	int lode_lvl;
	int owner_lvl;
	int result;
	std::string owner_name;
	int owner_power;
};

struct SyncRobbingInfo
{
public:
	SyncRobbingInfo()
	{
		owner_id = 0;
		owner_lvl = 0;
		lode_lvl = 0;
		robber_id = 0;
		robber_power = 0;
		rob_time = 0;
		retake_time = 0;
		retake_result = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 32;
		length += sizeof(short) + owner_name.size();
		length += sizeof(short) + robber_name.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << owner_id;
		s << owner_name;
		s << owner_lvl;
		s << lode_lvl;
		s << robber_id;
		s << robber_power;
		s << robber_name;
		s << rob_time;
		s << retake_time;
		s << retake_result;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> owner_id;
		s >> owner_name;
		s >> owner_lvl;
		s >> lode_lvl;
		s >> robber_id;
		s >> robber_power;
		s >> robber_name;
		s >> rob_time;
		s >> retake_time;
		s >> retake_result;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "owner_id", owner_id);
		lua::settable(L, -1, "owner_name", owner_name);
		lua::settable(L, -1, "owner_lvl", owner_lvl);
		lua::settable(L, -1, "lode_lvl", lode_lvl);
		lua::settable(L, -1, "robber_id", robber_id);
		lua::settable(L, -1, "robber_power", robber_power);
		lua::settable(L, -1, "robber_name", robber_name);
		lua::settable(L, -1, "rob_time", rob_time);
		lua::settable(L, -1, "retake_time", retake_time);
		lua::settable(L, -1, "retake_result", retake_result);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "owner_id=" << owner_id;
		buffer << ",owner_name=" << owner_name;
		buffer << ",owner_lvl=" << owner_lvl;
		buffer << ",lode_lvl=" << lode_lvl;
		buffer << ",robber_id=" << robber_id;
		buffer << ",robber_power=" << robber_power;
		buffer << ",robber_name=" << robber_name;
		buffer << ",rob_time=" << rob_time;
		buffer << ",retake_time=" << retake_time;
		buffer << ",retake_result=" << retake_result;
	}

public:
	int owner_id;
	std::string owner_name;
	int owner_lvl;
	int lode_lvl;
	int robber_id;
	int robber_power;
	std::string robber_name;
	int rob_time;
	int retake_time;
	int retake_result;
};

class MsgSyncRobRecordResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 766 };

	MsgSyncRobRecordResponse() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgSyncRobRecordResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < info_list.size(); ++i)
		{
			length += info_list[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short info_list_vector_size = (short)info_list.size();
		s << info_list_vector_size;
		if (info_list_vector_size > 0)
		{
			for (auto it = info_list.begin(); it != info_list.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int info_list_vector_size = s.read_int16();
		info_list.clear();
		while (info_list_vector_size > 0)
		{
			info_list_vector_size--;
			SyncRobbingInfo val;
			val.unserialize(s, false);
			info_list.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < info_list.size(); ++i)
		{
			info_list[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "info_list");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "info_list=[";
		for (size_t i = 0; i < info_list.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			info_list[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<SyncRobbingInfo> info_list;
};

class MsgOpenTheasureMapRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 767 };

	MsgOpenTheasureMapRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgOpenTheasureMapRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgOpenTheasureMapResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 768 };

	MsgOpenTheasureMapResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		eventIndex = 0;
	}

	virtual const char *getName() const
	{
		return "MsgOpenTheasureMapResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << eventIndex;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> eventIndex;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "eventIndex", eventIndex);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",eventIndex=" << eventIndex;
	}

public:
	int errcode;
	int eventIndex;
};

class MsgOpenTheasureMapGetAwardRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 769 };

	MsgOpenTheasureMapGetAwardRequest() :
		Message(Category, Id)
	{
		eid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgOpenTheasureMapGetAwardRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
	}

public:
	int eid;
};

class MsgOpenTheasureMapGetAwardResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 770 };

	MsgOpenTheasureMapGetAwardResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		index = 0;
	}

	virtual const char *getName() const
	{
		return "MsgOpenTheasureMapGetAwardResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << index;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> index;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "index", index);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",index=" << index;
	}

public:
	int errcode;
	int index;
};

class MsgGetTheasureMapPosRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 771 };

	MsgGetTheasureMapPosRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGetTheasureMapPosRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgGetTheasureMapPosResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 772 };

	MsgGetTheasureMapPosResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetTheasureMapPosResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgIntoTheasureMapPosResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 773 };

	MsgIntoTheasureMapPosResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgIntoTheasureMapPosResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgSyncPlayerAllIntPropsNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 774 };

	MsgSyncPlayerAllIntPropsNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgSyncPlayerAllIntPropsNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < proplist.size(); ++i)
		{
			length += proplist[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short proplist_vector_size = (short)proplist.size();
		s << proplist_vector_size;
		if (proplist_vector_size > 0)
		{
			for (auto it = proplist.begin(); it != proplist.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int proplist_vector_size = s.read_int16();
		proplist.clear();
		while (proplist_vector_size > 0)
		{
			proplist_vector_size--;
			OtherEntityProp val;
			val.unserialize(s, false);
			proplist.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < proplist.size(); ++i)
		{
			proplist[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "proplist");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "proplist=[";
		for (size_t i = 0; i < proplist.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			proplist[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<OtherEntityProp> proplist;
};

struct AffiliationItem
{
public:
	AffiliationItem()
	{
		sid = 0;
		count = 0;
		bind = 0;
	}

	size_t getLength(bool ex) const
	{
		return 12;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << sid;
		s << count;
		s << bind;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> sid;
		s >> count;
		s >> bind;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "count", count);
		lua::settable(L, -1, "bind", bind);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "sid=" << sid;
		buffer << ",count=" << count;
		buffer << ",bind=" << bind;
	}

public:
	int sid;
	int count;
	int bind;
};

class MsgSyncPlayerAffiliationItemInfosNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 775 };

	MsgSyncPlayerAffiliationItemInfosNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgSyncPlayerAffiliationItemInfosNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < items.size(); ++i)
		{
			length += items[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short items_vector_size = (short)items.size();
		s << items_vector_size;
		if (items_vector_size > 0)
		{
			for (auto it = items.begin(); it != items.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int items_vector_size = s.read_int16();
		items.clear();
		while (items_vector_size > 0)
		{
			items_vector_size--;
			AffiliationItem val;
			val.unserialize(s, false);
			items.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < items.size(); ++i)
		{
			items[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "items");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "items=[";
		for (size_t i = 0; i < items.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			items[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<AffiliationItem> items;
};

class MsgGetXiYouRewardCountRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 776 };

	MsgGetXiYouRewardCountRequest() :
		Message(Category, Id)
	{
		type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetXiYouRewardCountRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << type;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> type;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
	}

public:
	int type;
};

class MsgGetXiYouRewardCountResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 777 };

	MsgGetXiYouRewardCountResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetXiYouRewardCountResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgTreasureMapDropNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 778 };

	MsgTreasureMapDropNotify() :
		Message(Category, Id)
	{
		itemId = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTreasureMapDropNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << itemId;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> itemId;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "itemId", itemId);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "itemId=" << itemId;
	}

public:
	int itemId;
};

class MsgTortoiseEquipLevelNeedNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 779 };

	MsgTortoiseEquipLevelNeedNotify() :
		Message(Category, Id)
	{
		level = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTortoiseEquipLevelNeedNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << level;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> level;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "level", level);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "level=" << level;
	}

public:
	int level;
};

class MsgAttackBossLimitNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 780 };

	MsgAttackBossLimitNotify() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgAttackBossLimitNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgExpRoadRewardRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 781 };

	MsgExpRoadRewardRequest() :
		Message(Category, Id)
	{
		type = 0;
		index = 0;
	}

	virtual const char *getName() const
	{
		return "MsgExpRoadRewardRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << type;
		s << index;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> type;
		s >> index;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "index", index);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
		buffer << ",index=" << index;
	}

public:
	int type;
	int index;
};

class MsgExpRoadRewardResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 782 };

	MsgExpRoadRewardResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		index = 0;
	}

	virtual const char *getName() const
	{
		return "MsgExpRoadRewardResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << index;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> index;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "index", index);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",index=" << index;
	}

public:
	int errcode;
	int index;
};

class MsgPrivateChatOnlineCheckRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 783 };

	MsgPrivateChatOnlineCheckRequest() :
		Message(Category, Id)
	{
		playerid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPrivateChatOnlineCheckRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short) + name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << playerid;
		s << name;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> playerid;
		s >> name;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "playerid", playerid);
		lua::settable(L, -1, "name", name);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "playerid=" << playerid;
		buffer << ",name=" << name;
	}

public:
	int playerid;
	std::string name;
};

class MsgPrivateChatOnlineCheckResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 784 };

	MsgPrivateChatOnlineCheckResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		playerid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPrivateChatOnlineCheckResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 8;
		length += sizeof(short) + name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << playerid;
		s << name;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> playerid;
		s >> name;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "playerid", playerid);
		lua::settable(L, -1, "name", name);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",playerid=" << playerid;
		buffer << ",name=" << name;
	}

public:
	int errcode;
	int playerid;
	std::string name;
};

class MsgLuckyImmedFullLevelRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 786 };

	MsgLuckyImmedFullLevelRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgLuckyImmedFullLevelRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgLuckyImmedFullLevelResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 787 };

	MsgLuckyImmedFullLevelResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgLuckyImmedFullLevelResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgTgmjTowerClearRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 789 };

	MsgTgmjTowerClearRequest() :
		Message(Category, Id)
	{
		clearType = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTgmjTowerClearRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << clearType;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> clearType;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "clearType", clearType);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "clearType=" << clearType;
	}

public:
	int clearType;
};

class MsgTgmjTowerClearResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 790 };

	MsgTgmjTowerClearResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTgmjTowerClearResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgBloodUpdateRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 792 };

	MsgBloodUpdateRequest() :
		Message(Category, Id)
	{
		BloodType = 0;
	}

	virtual const char *getName() const
	{
		return "MsgBloodUpdateRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << BloodType;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> BloodType;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "BloodType", BloodType);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "BloodType=" << BloodType;
	}

public:
	int BloodType;
};

class MsgBloodUpdateResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 793 };

	MsgBloodUpdateResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgBloodUpdateResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgSYNCTABRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 794 };

	MsgSYNCTABRequest() :
		Message(Category, Id)
	{
		syncType = 0;
		syncCode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSYNCTABRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << syncType;
		s << syncCode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> syncType;
		s >> syncCode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "syncType", syncType);
		lua::settable(L, -1, "syncCode", syncCode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "syncType=" << syncType;
		buffer << ",syncCode=" << syncCode;
	}

public:
	int syncType;
	int syncCode;
};

class MsgSvrToClientNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 795 };

	MsgSvrToClientNotify() :
		Message(Category, Id)
	{
		funcId = 0;
		datax = 0;
		datay = 0;
		dataz = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSvrToClientNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 16;
		length += sizeof(short) + datas.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << funcId;
		s << datax;
		s << datay;
		s << dataz;
		s << datas;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> funcId;
		s >> datax;
		s >> datay;
		s >> dataz;
		s >> datas;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "funcId", funcId);
		lua::settable(L, -1, "datax", datax);
		lua::settable(L, -1, "datay", datay);
		lua::settable(L, -1, "dataz", dataz);
		lua::settable(L, -1, "datas", datas);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "funcId=" << funcId;
		buffer << ",datax=" << datax;
		buffer << ",datay=" << datay;
		buffer << ",dataz=" << dataz;
		buffer << ",datas=" << datas;
	}

public:
	int funcId;
	int datax;
	int datay;
	int dataz;
	std::string datas;
};

class MsgMolingBossNeedGetTipsNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 803 };

	MsgMolingBossNeedGetTipsNotify() :
		Message(Category, Id)
	{
		boss_id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMolingBossNeedGetTipsNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << boss_id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> boss_id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "boss_id", boss_id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "boss_id=" << boss_id;
	}

public:
	int boss_id;
};

class MsgNewVipGetStarRewardRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 804 };

	MsgNewVipGetStarRewardRequest() :
		Message(Category, Id)
	{
		map_page = 0;
		index = 0;
	}

	virtual const char *getName() const
	{
		return "MsgNewVipGetStarRewardRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << map_page;
		s << index;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> map_page;
		s >> index;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "map_page", map_page);
		lua::settable(L, -1, "index", index);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "map_page=" << map_page;
		buffer << ",index=" << index;
	}

public:
	int map_page;
	int index;
};

class MsgNewVipGetStarRewardResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 805 };

	MsgNewVipGetStarRewardResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		map_page = 0;
	}

	virtual const char *getName() const
	{
		return "MsgNewVipGetStarRewardResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << map_page;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> map_page;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "map_page", map_page);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",map_page=" << map_page;
	}

public:
	int errcode;
	int map_page;
};

class MsgPlayerGetTrainingRewardResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 806 };

	MsgPlayerGetTrainingRewardResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerGetTrainingRewardResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgNewVipSubmitQuestRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 807 };

	MsgNewVipSubmitQuestRequest() :
		Message(Category, Id)
	{
		quest_type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgNewVipSubmitQuestRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << quest_type;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> quest_type;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "quest_type", quest_type);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "quest_type=" << quest_type;
	}

public:
	int quest_type;
};

class MsgNewVipSubmitQuestResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 808 };

	MsgNewVipSubmitQuestResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		quest_type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgNewVipSubmitQuestResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << quest_type;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> quest_type;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "quest_type", quest_type);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",quest_type=" << quest_type;
	}

public:
	int errcode;
	int quest_type;
};

class MsgActiveQiLingRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 809 };

	MsgActiveQiLingRequest() :
		Message(Category, Id)
	{
		id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgActiveQiLingRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
	}

public:
	int id;
};

class MsgActiveQiLingNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 810 };

	MsgActiveQiLingNotify() :
		Message(Category, Id)
	{
		id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgActiveQiLingNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
	}

public:
	int id;
};

class MsgActiveQiLingResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 811 };

	MsgActiveQiLingResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgActiveQiLingResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "id", id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",id=" << id;
	}

public:
	int errcode;
	int id;
};

class MsgUpdPlayerSpecialDiamondNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 812 };

	MsgUpdPlayerSpecialDiamondNotify() :
		Message(Category, Id)
	{
		opcode = 0;
		ingot = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdPlayerSpecialDiamondNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		s << ingot;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		s >> ingot;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "ingot", ingot);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",ingot=" << ingot;
	}

public:
	int opcode;
	int ingot;
};

class MsgSmeltClearNewAttrsRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 813 };

	MsgSmeltClearNewAttrsRequest() :
		Message(Category, Id)
	{
		equipIndex = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSmeltClearNewAttrsRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << equipIndex;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> equipIndex;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "equipIndex", equipIndex);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "equipIndex=" << equipIndex;
	}

public:
	int equipIndex;
};

class MsgFinishPigSmNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 814 };

	MsgFinishPigSmNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgFinishPigSmNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgPlayerJuHePayRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 815 };

	MsgPlayerJuHePayRequest() :
		Message(Category, Id)
	{
		appId = 0;
		packageId = 0;
		aid = 0;
		sdkId = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerJuHePayRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 16;
		length += sizeof(short) + deviceId.size();
		length += sizeof(short) + money.size();
		length += sizeof(short) + ip.size();
		length += sizeof(short) + cpExt.size();
		length += sizeof(short) + serverName.size();
		length += sizeof(short) + roleName.size();
		length += sizeof(short) + openId.size();
		length += sizeof(short) + appKey.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << appId;
		s << packageId;
		s << deviceId;
		s << aid;
		s << money;
		s << ip;
		s << cpExt;
		s << serverName;
		s << roleName;
		s << sdkId;
		s << openId;
		s << appKey;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> appId;
		s >> packageId;
		s >> deviceId;
		s >> aid;
		s >> money;
		s >> ip;
		s >> cpExt;
		s >> serverName;
		s >> roleName;
		s >> sdkId;
		s >> openId;
		s >> appKey;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "appId", appId);
		lua::settable(L, -1, "packageId", packageId);
		lua::settable(L, -1, "deviceId", deviceId);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "money", money);
		lua::settable(L, -1, "ip", ip);
		lua::settable(L, -1, "cpExt", cpExt);
		lua::settable(L, -1, "serverName", serverName);
		lua::settable(L, -1, "roleName", roleName);
		lua::settable(L, -1, "sdkId", sdkId);
		lua::settable(L, -1, "openId", openId);
		lua::settable(L, -1, "appKey", appKey);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "appId=" << appId;
		buffer << ",packageId=" << packageId;
		buffer << ",deviceId=" << deviceId;
		buffer << ",aid=" << aid;
		buffer << ",money=" << money;
		buffer << ",ip=" << ip;
		buffer << ",cpExt=" << cpExt;
		buffer << ",serverName=" << serverName;
		buffer << ",roleName=" << roleName;
		buffer << ",sdkId=" << sdkId;
		buffer << ",openId=" << openId;
		buffer << ",appKey=" << appKey;
	}

public:
	int appId; //Ӧ�ñ�� 
	int packageId; //�ְ���� 
	std::string deviceId; //�豸id 
	int aid; //ip��ַ 
	std::string money; //ip��ַ 
	std::string ip; //ip��ַ 
	std::string cpExt; //json���� 
	std::string serverName; //�˺�Ψһ��ʶ 
	std::string roleName; //��ͨ��ƾ֤ 
	int sdkId; //sdk��� 
	std::string openId; //��ͨ��ƾ֤ 
	std::string appKey; //sdk��� 
};

class MsgPlayerJuHePayResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 816 };

	MsgPlayerJuHePayResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerJuHePayResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short) + orderId.size();
		length += sizeof(short) + msg.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << orderId;
		s << errcode;
		s << msg;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> orderId;
		s >> errcode;
		s >> msg;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "orderId", orderId);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "msg", msg);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "orderId=" << orderId;
		buffer << ",errcode=" << errcode;
		buffer << ",msg=" << msg;
	}

public:
	std::string orderId; //������� 
	int errcode;
	std::string msg; //��ʾ��Ϣ 
};

class MsgPlayerAutoAttackNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 817 };

	MsgPlayerAutoAttackNotify() :
		Message(Category, Id)
	{
		id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerAutoAttackNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
	}

public:
	int id;
};

class MsgPlayerChatVeriPhoneRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 818 };

	MsgPlayerChatVeriPhoneRequest() :
		Message(Category, Id)
	{
		appId = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerChatVeriPhoneRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short) + openId.size();
		length += sizeof(short) + mobile.size();
		length += sizeof(short) + verifyCode.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << appId;
		s << openId;
		s << mobile;
		s << verifyCode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> appId;
		s >> openId;
		s >> mobile;
		s >> verifyCode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "appId", appId);
		lua::settable(L, -1, "openId", openId);
		lua::settable(L, -1, "mobile", mobile);
		lua::settable(L, -1, "verifyCode", verifyCode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "appId=" << appId;
		buffer << ",openId=" << openId;
		buffer << ",mobile=" << mobile;
		buffer << ",verifyCode=" << verifyCode;
	}

public:
	int appId; //������� 
	std::string openId;
	std::string mobile; //�ֻ��� 
	std::string verifyCode; //�ֻ��� 
};

class MsgPlayerChatVeriPhoneResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 819 };

	MsgPlayerChatVeriPhoneResponse() :
		Message(Category, Id)
	{
		error = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerChatVeriPhoneResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short) + message.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << error;
		s << message;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> error;
		s >> message;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "error", error);
		lua::settable(L, -1, "message", message);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "error=" << error;
		buffer << ",message=" << message;
	}

public:
	int error;
	std::string message;
};

class MsgPlayerChatVeriCodeRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 820 };

	MsgPlayerChatVeriCodeRequest() :
		Message(Category, Id)
	{
		appId = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerChatVeriCodeRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short) + openId.size();
		length += sizeof(short) + mobile.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << appId;
		s << openId;
		s << mobile;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> appId;
		s >> openId;
		s >> mobile;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "appId", appId);
		lua::settable(L, -1, "openId", openId);
		lua::settable(L, -1, "mobile", mobile);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "appId=" << appId;
		buffer << ",openId=" << openId;
		buffer << ",mobile=" << mobile;
	}

public:
	int appId; //������� 
	std::string openId;
	std::string mobile; //�ֻ��� 
};

class MsgPlayerChatVeriCodeResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 821 };

	MsgPlayerChatVeriCodeResponse() :
		Message(Category, Id)
	{
		error = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPlayerChatVeriCodeResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short) + message.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << error;
		s << message;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> error;
		s >> message;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "error", error);
		lua::settable(L, -1, "message", message);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "error=" << error;
		buffer << ",message=" << message;
	}

public:
	int error;
	std::string message;
};

class MsgIOSRechargeSuccessNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 822 };

	MsgIOSRechargeSuccessNotify() :
		Message(Category, Id)
	{
		sid = 0;
		cnt = 0;
		pid = 0;
		type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgIOSRechargeSuccessNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 16;
		length += sizeof(short) + orderid.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << sid;
		s << cnt;
		s << pid;
		s << type;
		s << orderid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> sid;
		s >> cnt;
		s >> pid;
		s >> type;
		s >> orderid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "cnt", cnt);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "orderid", orderid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "sid=" << sid;
		buffer << ",cnt=" << cnt;
		buffer << ",pid=" << pid;
		buffer << ",type=" << type;
		buffer << ",orderid=" << orderid;
	}

public:
	int sid;
	int cnt;
	int pid;
	int type;
	std::string orderid;
};

struct Combatprop
{
public:
	Combatprop()
	{
		type = 0;
		value = 0;
	}

	size_t getLength(bool ex) const
	{
		return 8;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << type;
		s << value;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> type;
		s >> value;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "value", value);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
		buffer << ",value=" << value;
	}

public:
	int type;
	int value;
};

class MsgUpPlayerCombatPropNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 823 };

	MsgUpPlayerCombatPropNotify() :
		Message(Category, Id)
	{
		opcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpPlayerCombatPropNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short);
		for (size_t i = 0; i < combatprop.size(); ++i)
		{
			length += combatprop[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		short combatprop_vector_size = (short)combatprop.size();
		s << combatprop_vector_size;
		if (combatprop_vector_size > 0)
		{
			for (auto it = combatprop.begin(); it != combatprop.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		int combatprop_vector_size = s.read_int16();
		combatprop.clear();
		while (combatprop_vector_size > 0)
		{
			combatprop_vector_size--;
			Combatprop val;
			val.unserialize(s, false);
			combatprop.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		lua::newtable(lua::L);
		for (size_t i = 0; i < combatprop.size(); ++i)
		{
			combatprop[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "combatprop");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",combatprop=[";
		for (size_t i = 0; i < combatprop.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			combatprop[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int opcode;
	std::vector<Combatprop> combatprop;
};

class MsgCommonOperatorRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 824 };

	MsgCommonOperatorRequest() :
		Message(Category, Id)
	{
		funcid = 0;
		datax = 0;
		datay = 0;
		dataz = 0;
	}

	virtual const char *getName() const
	{
		return "MsgCommonOperatorRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = 14;
		length += sizeof(short) + datas.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << funcid;
		s << datax;
		s << datay;
		s << dataz;
		s << datas;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> funcid;
		s >> datax;
		s >> datay;
		s >> dataz;
		s >> datas;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "funcid", funcid);
		lua::settable(L, -1, "datax", datax);
		lua::settable(L, -1, "datay", datay);
		lua::settable(L, -1, "dataz", dataz);
		lua::settable(L, -1, "datas", datas);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "funcid=" << funcid;
		buffer << ",datax=" << datax;
		buffer << ",datay=" << datay;
		buffer << ",dataz=" << dataz;
		buffer << ",datas=" << datas;
	}

public:
	short funcid;
	int datax;
	int datay;
	int dataz;
	std::string datas;
};

class MsgCommonOperatorResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 825 };

	MsgCommonOperatorResponse() :
		Message(Category, Id)
	{
		funcid = 0;
		errcode = 0;
		datax = 0;
		datay = 0;
		dataz = 0;
	}

	virtual const char *getName() const
	{
		return "MsgCommonOperatorResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 16;
		length += sizeof(short) + datas.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << funcid;
		s << errcode;
		s << datax;
		s << datay;
		s << dataz;
		s << datas;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> funcid;
		s >> errcode;
		s >> datax;
		s >> datay;
		s >> dataz;
		s >> datas;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "funcid", funcid);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "datax", datax);
		lua::settable(L, -1, "datay", datay);
		lua::settable(L, -1, "dataz", dataz);
		lua::settable(L, -1, "datas", datas);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "funcid=" << funcid;
		buffer << ",errcode=" << errcode;
		buffer << ",datax=" << datax;
		buffer << ",datay=" << datay;
		buffer << ",dataz=" << dataz;
		buffer << ",datas=" << datas;
	}

public:
	short funcid;
	short errcode;
	int datax;
	int datay;
	int dataz;
	std::string datas;
};

class MsgGetMapStatisticsDataRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 826 };

	MsgGetMapStatisticsDataRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGetMapStatisticsDataRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgGetMapStatisticsDataResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 827 };

	MsgGetMapStatisticsDataResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetMapStatisticsDataResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 2;
		length += sizeof(short);
		for (size_t i = 0; i < data_list.size(); ++i)
		{
			length += data_list[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		short data_list_vector_size = (short)data_list.size();
		s << data_list_vector_size;
		if (data_list_vector_size > 0)
		{
			for (auto it = data_list.begin(); it != data_list.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		int data_list_vector_size = s.read_int16();
		data_list.clear();
		while (data_list_vector_size > 0)
		{
			data_list_vector_size--;
			OtherEntityProp val;
			val.unserialize(s, false);
			data_list.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::newtable(lua::L);
		for (size_t i = 0; i < data_list.size(); ++i)
		{
			data_list[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "data_list");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",data_list=[";
		for (size_t i = 0; i < data_list.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			data_list[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	short errcode;
	std::vector<OtherEntityProp> data_list;
};

struct OtherItemProp
{
public:
	OtherItemProp()
	{
		idx = 0;
		data = 0;
	}

	size_t getLength(bool ex) const
	{
		return 8;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << idx;
		s << data;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> idx;
		s >> data;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "idx", idx);
		lua::settable(L, -1, "data", data);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "idx=" << idx;
		buffer << ",data=" << data;
	}

public:
	int idx;
	int data;
};

struct OtherPlayerEquip
{
public:
	OtherPlayerEquip()
	{
		sid = 0;
		iid = 0;
		pos = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 12;
		length += sizeof(short) + firstowner.size();
		length += sizeof(short) + appraiser.size();
		length += ex ? sizeof(int) : sizeof(short);
		for (size_t i = 0; i < props.size(); ++i)
		{
			length += props[i].getLength(ex);
		}
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << sid;
		s << iid;
		s << pos;
		s << firstowner;
		s << appraiser;
		int props_vector_size = ex ? (int)props.size() : (short)props.size();
		if (ex)
		{
			s << props_vector_size;
		}
		else
		{
			s << (short)props_vector_size;
		}
		if (props_vector_size > 0)
		{
			for (auto it = props.begin(); it != props.end(); ++it)
			{
				(*it).serialize(s, ex);
			}
		}
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> sid;
		s >> iid;
		s >> pos;
		s >> firstowner;
		s >> appraiser;
		int props_vector_size = ex ? s.read_int32() : s.read_int16();
		props.clear();
		while (props_vector_size > 0)
		{
			props_vector_size--;
			OtherItemProp val;
			val.unserialize(s, ex);
			props.push_back(val);
		}
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "pos", pos);
		lua::settable(L, -1, "firstowner", firstowner);
		lua::settable(L, -1, "appraiser", appraiser);
		lua::newtable(lua::L);
		for (size_t i = 0; i < props.size(); ++i)
		{
			props[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "props");
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "sid=" << sid;
		buffer << ",iid=" << iid;
		buffer << ",pos=" << pos;
		buffer << ",firstowner=" << firstowner;
		buffer << ",appraiser=" << appraiser;
		buffer << ",props=[";
		for (size_t i = 0; i < props.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			props[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int sid;
	int iid;
	int pos;
	std::string firstowner;
	std::string appraiser;
	std::vector<OtherItemProp> props;
};

struct OtherPlayerSkill
{
public:
	OtherPlayerSkill()
	{
		id = 0;
		level = 0;
	}

	size_t getLength(bool ex) const
	{
		return 8;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << id;
		s << level;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> id;
		s >> level;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "level", level);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",level=" << level;
	}

public:
	int id;
	int level;
};

class MsgNewCheckEquipResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 840 };

	MsgNewCheckEquipResponse() :
		Message(Category, Id)
	{
		pid = 0;
		gender = 0;
		level = 0;
		exp = 0;
		cloth = 0;
		weapon = 0;
		wings = 0;
		zhanli = 0;
		lingwen = 0;
		guildpost = 0;
		job = 0;
		reborn = 0;
	}

	virtual const char *getName() const
	{
		return "MsgNewCheckEquipResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 49;
		length += sizeof(short) + name.size();
		length += sizeof(short) + guild.size();
		length += sizeof(short);
		for (size_t i = 0; i < equips.size(); ++i)
		{
			length += equips[i].getLength(false);
		}
		length += sizeof(short);
		for (size_t i = 0; i < prop.size(); ++i)
		{
			length += prop[i].getLength(false);
		}
		length += sizeof(short);
		for (size_t i = 0; i < sprop.size(); ++i)
		{
			length += sprop[i].getLength(false);
		}
		length += sizeof(short);
		for (size_t i = 0; i < skill.size(); ++i)
		{
			length += skill[i].getLength(false);
		}
		length += sizeof(short);
		length += vcombat.size() * 4;
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << gender;
		s << level;
		s << exp;
		s << cloth;
		s << weapon;
		s << wings;
		s << zhanli;
		s << name;
		s << guild;
		s << lingwen;
		s << guildpost;
		s << job;
		s << reborn;
		short equips_vector_size = (short)equips.size();
		s << equips_vector_size;
		if (equips_vector_size > 0)
		{
			for (auto it = equips.begin(); it != equips.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		short prop_vector_size = (short)prop.size();
		s << prop_vector_size;
		if (prop_vector_size > 0)
		{
			for (auto it = prop.begin(); it != prop.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		short sprop_vector_size = (short)sprop.size();
		s << sprop_vector_size;
		if (sprop_vector_size > 0)
		{
			for (auto it = sprop.begin(); it != sprop.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		short skill_vector_size = (short)skill.size();
		s << skill_vector_size;
		if (skill_vector_size > 0)
		{
			for (auto it = skill.begin(); it != skill.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		short vcombat_vector_size = (short)vcombat.size();
		s << vcombat_vector_size;
		if (vcombat_vector_size > 0)
		{
			for (auto it = vcombat.begin(); it != vcombat.end(); ++it)
			{
				s << *it;
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> gender;
		s >> level;
		s >> exp;
		s >> cloth;
		s >> weapon;
		s >> wings;
		s >> zhanli;
		s >> name;
		s >> guild;
		s >> lingwen;
		s >> guildpost;
		s >> job;
		s >> reborn;
		int equips_vector_size = s.read_int16();
		equips.clear();
		while (equips_vector_size > 0)
		{
			equips_vector_size--;
			OtherPlayerEquip val;
			val.unserialize(s, false);
			equips.push_back(val);
		}
		int prop_vector_size = s.read_int16();
		prop.clear();
		while (prop_vector_size > 0)
		{
			prop_vector_size--;
			OtherEntityProp val;
			val.unserialize(s, false);
			prop.push_back(val);
		}
		int sprop_vector_size = s.read_int16();
		sprop.clear();
		while (sprop_vector_size > 0)
		{
			sprop_vector_size--;
			OtherEntityStringProp val;
			val.unserialize(s, false);
			sprop.push_back(val);
		}
		int skill_vector_size = s.read_int16();
		skill.clear();
		while (skill_vector_size > 0)
		{
			skill_vector_size--;
			OtherPlayerSkill val;
			val.unserialize(s, false);
			skill.push_back(val);
		}
		int vcombat_vector_size = s.read_int16();
		vcombat.clear();
		while (vcombat_vector_size > 0)
		{
			vcombat_vector_size--;
			int val;
			s >> val;
			vcombat.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "exp", exp);
		lua::settable(L, -1, "cloth", cloth);
		lua::settable(L, -1, "weapon", weapon);
		lua::settable(L, -1, "wings", wings);
		lua::settable(L, -1, "zhanli", zhanli);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "guild", guild);
		lua::settable(L, -1, "lingwen", lingwen);
		lua::settable(L, -1, "guildpost", guildpost);
		lua::settable(L, -1, "job", job);
		lua::settable(L, -1, "reborn", reborn);
		lua::newtable(lua::L);
		for (size_t i = 0; i < equips.size(); ++i)
		{
			equips[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "equips");
		lua::newtable(lua::L);
		for (size_t i = 0; i < prop.size(); ++i)
		{
			prop[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "prop");
		lua::newtable(lua::L);
		for (size_t i = 0; i < sprop.size(); ++i)
		{
			sprop[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "sprop");
		lua::newtable(lua::L);
		for (size_t i = 0; i < skill.size(); ++i)
		{
			skill[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "skill");
		lua::newtable(lua::L);
		for (size_t i = 0; i < vcombat.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, vcombat[i]);
		}
		lua::settable(L, -2, "vcombat");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",gender=" << gender;
		buffer << ",level=" << level;
		buffer << ",exp=" << exp;
		buffer << ",cloth=" << cloth;
		buffer << ",weapon=" << weapon;
		buffer << ",wings=" << wings;
		buffer << ",zhanli=" << zhanli;
		buffer << ",name=" << name;
		buffer << ",guild=" << guild;
		buffer << ",lingwen=" << lingwen;
		buffer << ",guildpost=" << guildpost;
		buffer << ",job=" << job;
		buffer << ",reborn=" << reborn;
		buffer << ",equips=[";
		for (size_t i = 0; i < equips.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			equips[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
		buffer << ",prop=[";
		for (size_t i = 0; i < prop.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			prop[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
		buffer << ",sprop=[";
		for (size_t i = 0; i < sprop.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			sprop[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
		buffer << ",skill=[";
		for (size_t i = 0; i < skill.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			skill[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
		buffer << ",vcombat=[";
		for (size_t i = 0; i < vcombat.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << vcombat[i];
		}
		buffer << "]";
	}

public:
	int pid;
	char gender;
	int level;
	long long exp;
	int cloth;
	int weapon;
	int wings;
	int zhanli;
	std::string name;
	std::string guild;
	int lingwen;
	int guildpost;
	int job;
	int reborn;
	std::vector<OtherPlayerEquip> equips;
	std::vector<OtherEntityProp> prop;
	std::vector<OtherEntityStringProp> sprop;
	std::vector<OtherPlayerSkill> skill;
	std::vector<int> vcombat;
};

class MsgSyncExDropNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 841 };

	MsgSyncExDropNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgSyncExDropNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgDreamLandBossRefreshNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 842 };

	MsgDreamLandBossRefreshNotify() :
		Message(Category, Id)
	{
		boss_id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDreamLandBossRefreshNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << boss_id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> boss_id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "boss_id", boss_id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "boss_id=" << boss_id;
	}

public:
	int boss_id;
};

class MsgLodeOccupyDataRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 843 };

	MsgLodeOccupyDataRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgLodeOccupyDataRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

struct LodeOccupy
{
public:
	LodeOccupy()
	{
		lode_lvl = 0;
		count = 0;
	}

	size_t getLength(bool ex) const
	{
		return 8;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << lode_lvl;
		s << count;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> lode_lvl;
		s >> count;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "lode_lvl", lode_lvl);
		lua::settable(L, -1, "count", count);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "lode_lvl=" << lode_lvl;
		buffer << ",count=" << count;
	}

public:
	int lode_lvl;
	int count;
};

class MsgLodeOccupyDataResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 844 };

	MsgLodeOccupyDataResponse() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgLodeOccupyDataResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < lodeOccupyData.size(); ++i)
		{
			length += lodeOccupyData[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short lodeOccupyData_vector_size = (short)lodeOccupyData.size();
		s << lodeOccupyData_vector_size;
		if (lodeOccupyData_vector_size > 0)
		{
			for (auto it = lodeOccupyData.begin(); it != lodeOccupyData.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int lodeOccupyData_vector_size = s.read_int16();
		lodeOccupyData.clear();
		while (lodeOccupyData_vector_size > 0)
		{
			lodeOccupyData_vector_size--;
			LodeOccupy val;
			val.unserialize(s, false);
			lodeOccupyData.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < lodeOccupyData.size(); ++i)
		{
			lodeOccupyData[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "lodeOccupyData");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "lodeOccupyData=[";
		for (size_t i = 0; i < lodeOccupyData.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			lodeOccupyData[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<LodeOccupy> lodeOccupyData;
};

class MsgGetBossCntInMapRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 845 };

	MsgGetBossCntInMapRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGetBossCntInMapRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		length += maps.size() * 4;
		length += sizeof(short) + targetName.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short maps_vector_size = (short)maps.size();
		s << maps_vector_size;
		if (maps_vector_size > 0)
		{
			for (auto it = maps.begin(); it != maps.end(); ++it)
			{
				s << *it;
			}
		}
		s << targetName;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int maps_vector_size = s.read_int16();
		maps.clear();
		while (maps_vector_size > 0)
		{
			maps_vector_size--;
			int val;
			s >> val;
			maps.push_back(val);
		}
		s >> targetName;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < maps.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, maps[i]);
		}
		lua::settable(L, -2, "maps");
		lua::settable(L, -1, "targetName", targetName);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "maps=[";
		for (size_t i = 0; i < maps.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << maps[i];
		}
		buffer << "]";
		buffer << ",targetName=" << targetName;
	}

public:
	std::vector<int> maps;
	std::string targetName;
};

struct MapBossInfo
{
public:
	MapBossInfo()
	{
		mid = 0;
		count = 0;
	}

	size_t getLength(bool ex) const
	{
		return 8;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << mid;
		s << count;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> mid;
		s >> count;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "mid", mid);
		lua::settable(L, -1, "count", count);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "mid=" << mid;
		buffer << ",count=" << count;
	}

public:
	int mid;
	int count;
};

struct MapBossCount
{
public:
	MapBossCount()
	{
		index = 0;
		count = 0;
		sceneId = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 10;
		length += ex ? sizeof(int) : sizeof(short);
		for (size_t i = 0; i < boss_list.size(); ++i)
		{
			length += boss_list[i].getLength(ex);
		}
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << index;
		s << count;
		s << sceneId;
		int boss_list_vector_size = ex ? (int)boss_list.size() : (short)boss_list.size();
		if (ex)
		{
			s << boss_list_vector_size;
		}
		else
		{
			s << (short)boss_list_vector_size;
		}
		if (boss_list_vector_size > 0)
		{
			for (auto it = boss_list.begin(); it != boss_list.end(); ++it)
			{
				(*it).serialize(s, ex);
			}
		}
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> index;
		s >> count;
		s >> sceneId;
		int boss_list_vector_size = ex ? s.read_int32() : s.read_int16();
		boss_list.clear();
		while (boss_list_vector_size > 0)
		{
			boss_list_vector_size--;
			MapBossInfo val;
			val.unserialize(s, ex);
			boss_list.push_back(val);
		}
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "index", index);
		lua::settable(L, -1, "count", count);
		lua::settable(L, -1, "sceneId", sceneId);
		lua::newtable(lua::L);
		for (size_t i = 0; i < boss_list.size(); ++i)
		{
			boss_list[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "boss_list");
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "index=" << index;
		buffer << ",count=" << count;
		buffer << ",sceneId=" << sceneId;
		buffer << ",boss_list=[";
		for (size_t i = 0; i < boss_list.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			boss_list[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	short index;
	int count;
	int sceneId;
	std::vector<MapBossInfo> boss_list;
};

class MsgGetBossCntInMapNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 846 };

	MsgGetBossCntInMapNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGetBossCntInMapNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < boss_cnts.size(); ++i)
		{
			length += boss_cnts[i].getLength(false);
		}
		length += sizeof(short) + targetName.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short boss_cnts_vector_size = (short)boss_cnts.size();
		s << boss_cnts_vector_size;
		if (boss_cnts_vector_size > 0)
		{
			for (auto it = boss_cnts.begin(); it != boss_cnts.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		s << targetName;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int boss_cnts_vector_size = s.read_int16();
		boss_cnts.clear();
		while (boss_cnts_vector_size > 0)
		{
			boss_cnts_vector_size--;
			MapBossCount val;
			val.unserialize(s, false);
			boss_cnts.push_back(val);
		}
		s >> targetName;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < boss_cnts.size(); ++i)
		{
			boss_cnts[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "boss_cnts");
		lua::settable(L, -1, "targetName", targetName);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "boss_cnts=[";
		for (size_t i = 0; i < boss_cnts.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			boss_cnts[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
		buffer << ",targetName=" << targetName;
	}

public:
	std::vector<MapBossCount> boss_cnts;
	std::string targetName;
};

class MsgFinishWantedTaskRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 847 };

	MsgFinishWantedTaskRequest() :
		Message(Category, Id)
	{
		taskindex = 0;
	}

	virtual const char *getName() const
	{
		return "MsgFinishWantedTaskRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << taskindex;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> taskindex;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "taskindex", taskindex);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "taskindex=" << taskindex;
	}

public:
	int taskindex;
};

class MsgFinishWantedTaskResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 848 };

	MsgFinishWantedTaskResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgFinishWantedTaskResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgGetWantedRewardRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 849 };

	MsgGetWantedRewardRequest() :
		Message(Category, Id)
	{
		gradeindex = 0;
		type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetWantedRewardRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << gradeindex;
		s << type;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> gradeindex;
		s >> type;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "gradeindex", gradeindex);
		lua::settable(L, -1, "type", type);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "gradeindex=" << gradeindex;
		buffer << ",type=" << type;
	}

public:
	int gradeindex;
	int type;
};

class MsgGetWantedRewardResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 850 };

	MsgGetWantedRewardResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetWantedRewardResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgSyncDoubleDropNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 851 };

	MsgSyncDoubleDropNotify() :
		Message(Category, Id)
	{
		eid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncDoubleDropNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
	}

public:
	int eid;
};

class MsgSyncBDZZDropNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 852 };

	MsgSyncBDZZDropNotify() :
		Message(Category, Id)
	{
		eid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncBDZZDropNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
	}

public:
	int eid;
};

class MsgOpenQiRiShengFenNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 875 };

	MsgOpenQiRiShengFenNotify() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgOpenQiRiShengFenNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgStopQiRiShengFenNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 876 };

	MsgStopQiRiShengFenNotify() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgStopQiRiShengFenNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgOperationRecordNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 879 };

	MsgOperationRecordNotify() :
		Message(Category, Id)
	{
		code = 0;
		platformId = 0;
		datax = 0;
		datay = 0;
		dataz = 0;
	}

	virtual const char *getName() const
	{
		return "MsgOperationRecordNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 20;
		length += sizeof(short) + datas.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << code;
		s << platformId;
		s << datax;
		s << datay;
		s << dataz;
		s << datas;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> code;
		s >> platformId;
		s >> datax;
		s >> datay;
		s >> dataz;
		s >> datas;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "code", code);
		lua::settable(L, -1, "platformId", platformId);
		lua::settable(L, -1, "datax", datax);
		lua::settable(L, -1, "datay", datay);
		lua::settable(L, -1, "dataz", dataz);
		lua::settable(L, -1, "datas", datas);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "code=" << code;
		buffer << ",platformId=" << platformId;
		buffer << ",datax=" << datax;
		buffer << ",datay=" << datay;
		buffer << ",dataz=" << dataz;
		buffer << ",datas=" << datas;
	}

public:
	int code;
	int platformId;
	int datax;
	int datay;
	int dataz;
	std::string datas;
};

class MsgHideCrossActivityNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 880 };

	MsgHideCrossActivityNotify() :
		Message(Category, Id)
	{
		type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgHideCrossActivityNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << type;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> type;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
	}

public:
	int type;
};

class MsgShenBingFuseRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 881 };

	MsgShenBingFuseRequest() :
		Message(Category, Id)
	{
		iid1 = 0;
		iid2 = 0;
	}

	virtual const char *getName() const
	{
		return "MsgShenBingFuseRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid1;
		s << iid2;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid1;
		s >> iid2;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid1", iid1);
		lua::settable(L, -1, "iid2", iid2);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid1=" << iid1;
		buffer << ",iid2=" << iid2;
	}

public:
	int iid1;
	int iid2;
};

class MsgShenBingFuseResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 882 };

	MsgShenBingFuseResponse() :
		Message(Category, Id)
	{
		iid = 0;
		code = 0;
	}

	virtual const char *getName() const
	{
		return "MsgShenBingFuseResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		s << code;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		s >> code;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "code", code);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",code=" << code;
	}

public:
	int iid;
	int code;
};

class MsgDoctorRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 883 };

	MsgDoctorRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgDoctorRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgDoctorResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 884 };

	MsgDoctorResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDoctorResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgNoviceNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 885 };

	MsgNoviceNotify() :
		Message(Category, Id)
	{
		id = 0;
		step = 0;
	}

	virtual const char *getName() const
	{
		return "MsgNoviceNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		s << step;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		s >> step;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "step", step);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",step=" << step;
	}

public:
	int id;
	int step;
};

class MsgChangeJobNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 886 };

	MsgChangeJobNotify() :
		Message(Category, Id)
	{
		errcode = 0;
		job = 0;
	}

	virtual const char *getName() const
	{
		return "MsgChangeJobNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << job;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> job;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "job", job);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",job=" << job;
	}

public:
	int errcode;
	int job;
};

class MsgToushiRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 891 };

	MsgToushiRequest() :
		Message(Category, Id)
	{
		monsterId = 0;
	}

	virtual const char *getName() const
	{
		return "MsgToushiRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << monsterId;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> monsterId;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "monsterId", monsterId);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "monsterId=" << monsterId;
	}

public:
	int monsterId;
};

class MsgToushiResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 892 };

	MsgToushiResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		monsterId = 0;
	}

	virtual const char *getName() const
	{
		return "MsgToushiResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 8;
		length += sizeof(short) + itemList.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << monsterId;
		s << itemList;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> monsterId;
		s >> itemList;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "monsterId", monsterId);
		lua::settable(L, -1, "itemList", itemList);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",monsterId=" << monsterId;
		buffer << ",itemList=" << itemList;
	}

public:
	int errcode;
	int monsterId;
	std::string itemList;
};

class MsgGuildBossChangeOwnerNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 895 };

	MsgGuildBossChangeOwnerNotify() :
		Message(Category, Id)
	{
		mid = 0;
		ownPid = 0;
		ownGid = 0;
		killCount = 0;
		status = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildBossChangeOwnerNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 20;
		length += sizeof(short) + playerName.size();
		length += sizeof(short) + guildName.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << mid;
		s << ownPid;
		s << ownGid;
		s << killCount;
		s << status;
		s << playerName;
		s << guildName;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> mid;
		s >> ownPid;
		s >> ownGid;
		s >> killCount;
		s >> status;
		s >> playerName;
		s >> guildName;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "mid", mid);
		lua::settable(L, -1, "ownPid", ownPid);
		lua::settable(L, -1, "ownGid", ownGid);
		lua::settable(L, -1, "killCount", killCount);
		lua::settable(L, -1, "status", status);
		lua::settable(L, -1, "playerName", playerName);
		lua::settable(L, -1, "guildName", guildName);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "mid=" << mid;
		buffer << ",ownPid=" << ownPid;
		buffer << ",ownGid=" << ownGid;
		buffer << ",killCount=" << killCount;
		buffer << ",status=" << status;
		buffer << ",playerName=" << playerName;
		buffer << ",guildName=" << guildName;
	}

public:
	int mid;
	int ownPid;
	int ownGid;
	int killCount;
	int status;
	std::string playerName;
	std::string guildName;
};

class MsgGetPlayerBaseInfoRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 896 };

	MsgGetPlayerBaseInfoRequest() :
		Message(Category, Id)
	{
		pid = 0;
		serverid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetPlayerBaseInfoRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << serverid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> serverid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "serverid", serverid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",serverid=" << serverid;
	}

public:
	int pid;
	int serverid;
};

class MsgGetPlayerBaseInfoResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 897 };

	MsgGetPlayerBaseInfoResponse() :
		Message(Category, Id)
	{
		pid = 0;
		gender = 0;
		job = 0;
		weapon = 0;
		dress_weapon = 0;
		cloth = 0;
		dress_cloth = 0;
		hat = 0;
		shield = 0;
		guard_level = 0;
		hunhuan = 0;
		jingling = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetPlayerBaseInfoResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 48;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << gender;
		s << job;
		s << weapon;
		s << dress_weapon;
		s << cloth;
		s << dress_cloth;
		s << hat;
		s << shield;
		s << guard_level;
		s << hunhuan;
		s << jingling;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> gender;
		s >> job;
		s >> weapon;
		s >> dress_weapon;
		s >> cloth;
		s >> dress_cloth;
		s >> hat;
		s >> shield;
		s >> guard_level;
		s >> hunhuan;
		s >> jingling;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "job", job);
		lua::settable(L, -1, "weapon", weapon);
		lua::settable(L, -1, "dress_weapon", dress_weapon);
		lua::settable(L, -1, "cloth", cloth);
		lua::settable(L, -1, "dress_cloth", dress_cloth);
		lua::settable(L, -1, "hat", hat);
		lua::settable(L, -1, "shield", shield);
		lua::settable(L, -1, "guard_level", guard_level);
		lua::settable(L, -1, "hunhuan", hunhuan);
		lua::settable(L, -1, "jingling", jingling);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",gender=" << gender;
		buffer << ",job=" << job;
		buffer << ",weapon=" << weapon;
		buffer << ",dress_weapon=" << dress_weapon;
		buffer << ",cloth=" << cloth;
		buffer << ",dress_cloth=" << dress_cloth;
		buffer << ",hat=" << hat;
		buffer << ",shield=" << shield;
		buffer << ",guard_level=" << guard_level;
		buffer << ",hunhuan=" << hunhuan;
		buffer << ",jingling=" << jingling;
	}

public:
	int pid;
	int gender;
	int job;
	int weapon;
	int dress_weapon;
	int cloth;
	int dress_cloth;
	int hat;
	int shield;
	int guard_level;
	int hunhuan;
	int jingling;
};

class MsgGetGiftByCodeRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 898 };

	MsgGetGiftByCodeRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGetGiftByCodeRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short) + code.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << code;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> code;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "code", code);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "code=" << code;
	}

public:
	std::string code;
};

class MsgGetGiftByCodeResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 899 };

	MsgGetGiftByCodeResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetGiftByCodeResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgActivityRewardRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 900 };

	MsgActivityRewardRequest() :
		Message(Category, Id)
	{
		id = 0;
		index = 0;
		flag = 0;
	}

	virtual const char *getName() const
	{
		return "MsgActivityRewardRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		s << index;
		s << flag;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		s >> index;
		s >> flag;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "index", index);
		lua::settable(L, -1, "flag", flag);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",index=" << index;
		buffer << ",flag=" << flag;
	}

public:
	int id;
	int index;
	int flag;
};

class MsgActivityRewardResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 901 };

	MsgActivityRewardResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		id = 0;
		index = 0;
		flag = 0;
	}

	virtual const char *getName() const
	{
		return "MsgActivityRewardResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 14;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << id;
		s << index;
		s << flag;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> id;
		s >> index;
		s >> flag;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "index", index);
		lua::settable(L, -1, "flag", flag);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",id=" << id;
		buffer << ",index=" << index;
		buffer << ",flag=" << flag;
	}

public:
	short errcode;
	int id;
	int index;
	int flag;
};

class MsgActivityOperateRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 902 };

	MsgActivityOperateRequest() :
		Message(Category, Id)
	{
		id = 0;
		datax = 0;
		datay = 0;
		dataz = 0;
	}

	virtual const char *getName() const
	{
		return "MsgActivityOperateRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 16;
		length += sizeof(short) + fun_name.size();
		length += sizeof(short) + datas.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		s << fun_name;
		s << datax;
		s << datay;
		s << dataz;
		s << datas;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		s >> fun_name;
		s >> datax;
		s >> datay;
		s >> dataz;
		s >> datas;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "fun_name", fun_name);
		lua::settable(L, -1, "datax", datax);
		lua::settable(L, -1, "datay", datay);
		lua::settable(L, -1, "dataz", dataz);
		lua::settable(L, -1, "datas", datas);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",fun_name=" << fun_name;
		buffer << ",datax=" << datax;
		buffer << ",datay=" << datay;
		buffer << ",dataz=" << dataz;
		buffer << ",datas=" << datas;
	}

public:
	int id;
	std::string fun_name;
	int datax;
	int datay;
	int dataz;
	std::string datas;
};

class MsgActivityOperateResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 903 };

	MsgActivityOperateResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		id = 0;
		datax = 0;
		datay = 0;
		dataz = 0;
	}

	virtual const char *getName() const
	{
		return "MsgActivityOperateResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 18;
		length += sizeof(short) + fun_name.size();
		length += sizeof(short) + datas.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << id;
		s << fun_name;
		s << datax;
		s << datay;
		s << dataz;
		s << datas;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> id;
		s >> fun_name;
		s >> datax;
		s >> datay;
		s >> dataz;
		s >> datas;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "fun_name", fun_name);
		lua::settable(L, -1, "datax", datax);
		lua::settable(L, -1, "datay", datay);
		lua::settable(L, -1, "dataz", dataz);
		lua::settable(L, -1, "datas", datas);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",id=" << id;
		buffer << ",fun_name=" << fun_name;
		buffer << ",datax=" << datax;
		buffer << ",datay=" << datay;
		buffer << ",dataz=" << dataz;
		buffer << ",datas=" << datas;
	}

public:
	short errcode;
	int id;
	std::string fun_name;
	int datax;
	int datay;
	int dataz;
	std::string datas;
};

struct RankItemData
{
public:
	RankItemData()
	{
		id = 0;
		datax = 0;
		datay = 0;
		dataz = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 16;
		length += sizeof(short) + name.size();
		length += sizeof(short) + guild_name.size();
		length += sizeof(short) + server_name.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << id;
		s << datax;
		s << datay;
		s << dataz;
		s << name;
		s << guild_name;
		s << server_name;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> id;
		s >> datax;
		s >> datay;
		s >> dataz;
		s >> name;
		s >> guild_name;
		s >> server_name;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "datax", datax);
		lua::settable(L, -1, "datay", datay);
		lua::settable(L, -1, "dataz", dataz);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "guild_name", guild_name);
		lua::settable(L, -1, "server_name", server_name);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",datax=" << datax;
		buffer << ",datay=" << datay;
		buffer << ",dataz=" << dataz;
		buffer << ",name=" << name;
		buffer << ",guild_name=" << guild_name;
		buffer << ",server_name=" << server_name;
	}

public:
	int id;
	int datax;
	int datay;
	int dataz;
	std::string name;
	std::string guild_name;
	std::string server_name;
};

class MsgGetRankRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 904 };

	MsgGetRankRequest() :
		Message(Category, Id)
	{
		type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetRankRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << type;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> type;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
	}

public:
	int type;
};

class MsgGetRankResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PLAYER, Id = 905 };

	MsgGetRankResponse() :
		Message(Category, Id)
	{
		type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetRankResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short);
		for (size_t i = 0; i < list.size(); ++i)
		{
			length += list[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << type;
		short list_vector_size = (short)list.size();
		s << list_vector_size;
		if (list_vector_size > 0)
		{
			for (auto it = list.begin(); it != list.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> type;
		int list_vector_size = s.read_int16();
		list.clear();
		while (list_vector_size > 0)
		{
			list_vector_size--;
			RankItemData val;
			val.unserialize(s, false);
			list.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
		lua::newtable(lua::L);
		for (size_t i = 0; i < list.size(); ++i)
		{
			list[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "list");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
		buffer << ",list=[";
		for (size_t i = 0; i < list.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			list[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int type;
	std::vector<RankItemData> list;
};

#endif	//_MSG_PLAYER_H_INCLUDED
