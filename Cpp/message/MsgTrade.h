//
//Generated by lua
//2009-2012	(C) XianFeng Inc. Reserved
//

#ifndef _MSG_TRADE_H_INCLUDED
#define _MSG_TRADE_H_INCLUDED

#include "category.h"
#include "common/Message.h"

struct TradeItemProp
{
public:
	TradeItemProp()
	{
		type = 0;
		data = 0;
	}

	size_t getLength(bool ex) const
	{
		return 6;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << type;
		s << data;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> type;
		s >> data;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "data", data);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
		buffer << ",data=" << data;
	}

public:
	short type;
	int data;
};

class MsgTradeStartRequestC : public Message
{
public:
	enum { Category = MSG_CATEGORY_TRADE, Id = 1 };

	MsgTradeStartRequestC() :
		Message(Category, Id)
	{
		other_player_id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTradeStartRequestC";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << other_player_id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> other_player_id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "other_player_id", other_player_id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "other_player_id=" << other_player_id;
	}

public:
	int other_player_id; //对方玩家ID 
};

class MsgTradeStartRequestS : public Message
{
public:
	enum { Category = MSG_CATEGORY_TRADE, Id = 2 };

	MsgTradeStartRequestS() :
		Message(Category, Id)
	{
		other_player_id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTradeStartRequestS";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short) + other_player_name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << other_player_id;
		s << other_player_name;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> other_player_id;
		s >> other_player_name;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "other_player_id", other_player_id);
		lua::settable(L, -1, "other_player_name", other_player_name);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "other_player_id=" << other_player_id;
		buffer << ",other_player_name=" << other_player_name;
	}

public:
	int other_player_id; //对方玩家ID 
	std::string other_player_name; //对方玩家名称 
};

class MsgTradeStartResponseC : public Message
{
public:
	enum { Category = MSG_CATEGORY_TRADE, Id = 3 };

	MsgTradeStartResponseC() :
		Message(Category, Id)
	{
		other_player_id = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTradeStartResponseC";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << other_player_id;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> other_player_id;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "other_player_id", other_player_id);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "other_player_id=" << other_player_id;
		buffer << ",errcode=" << errcode;
	}

public:
	int other_player_id; //对方玩家ID 
	short errcode; //错误码: 1-同意, 2-拒绝 
};

class MsgTradeStartResponseS : public Message
{
public:
	enum { Category = MSG_CATEGORY_TRADE, Id = 4 };

	MsgTradeStartResponseS() :
		Message(Category, Id)
	{
		errcode = 0;
		param1 = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTradeStartResponseS";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 6;
		length += sizeof(short) + other_player_name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << other_player_name;
		s << param1;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> other_player_name;
		s >> param1;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "other_player_name", other_player_name);
		lua::settable(L, -1, "param1", param1);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",other_player_name=" << other_player_name;
		buffer << ",param1=" << param1;
	}

public:
	short errcode; //错误码: 1-同意, 2-拒绝, 3-无响应, 4-很忙 
	std::string other_player_name; //对方玩家名称 
	int param1; //参数1 
};

class MsgTradeChangeItemRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_TRADE, Id = 5 };

	MsgTradeChangeItemRequest() :
		Message(Category, Id)
	{
		item_id = 0;
		old_position = 0;
		position = 0;
		count = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTradeChangeItemRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 16;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << item_id;
		s << old_position;
		s << position;
		s << count;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> item_id;
		s >> old_position;
		s >> position;
		s >> count;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "item_id", item_id);
		lua::settable(L, -1, "old_position", old_position);
		lua::settable(L, -1, "position", position);
		lua::settable(L, -1, "count", count);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "item_id=" << item_id;
		buffer << ",old_position=" << old_position;
		buffer << ",position=" << position;
		buffer << ",count=" << count;
	}

public:
	int item_id; //物品ID 
	int old_position; //物品旧位置 
	int position; //物品新位置 
	int count; //物品数量 
};

class MsgTradeChangeItemResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_TRADE, Id = 6 };

	MsgTradeChangeItemResponse() :
		Message(Category, Id)
	{
		item_id = 0;
		old_position = 0;
		position = 0;
		count = 0;
		revision = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTradeChangeItemResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 22;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << item_id;
		s << old_position;
		s << position;
		s << count;
		s << revision;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> item_id;
		s >> old_position;
		s >> position;
		s >> count;
		s >> revision;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "item_id", item_id);
		lua::settable(L, -1, "old_position", old_position);
		lua::settable(L, -1, "position", position);
		lua::settable(L, -1, "count", count);
		lua::settable(L, -1, "revision", revision);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "item_id=" << item_id;
		buffer << ",old_position=" << old_position;
		buffer << ",position=" << position;
		buffer << ",count=" << count;
		buffer << ",revision=" << revision;
		buffer << ",errcode=" << errcode;
	}

public:
	int item_id; //物品ID 
	int old_position; //物品旧位置 
	int position; //物品新位置 
	int count; //物品数量 
	int revision; //最新版本号 
	short errcode; //错误码 
};

class MsgTradeChangeItemNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_TRADE, Id = 7 };

	MsgTradeChangeItemNotify() :
		Message(Category, Id)
	{
		static_id = 0;
		item_id = 0;
		old_position = 0;
		position = 0;
		count = 0;
		revision = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTradeChangeItemNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 24;
		length += sizeof(short);
		for (size_t i = 0; i < props.size(); ++i)
		{
			length += props[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << static_id;
		s << item_id;
		s << old_position;
		s << position;
		s << count;
		short props_vector_size = (short)props.size();
		s << props_vector_size;
		if (props_vector_size > 0)
		{
			for (auto it = props.begin(); it != props.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		s << revision;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> static_id;
		s >> item_id;
		s >> old_position;
		s >> position;
		s >> count;
		int props_vector_size = s.read_int16();
		props.clear();
		while (props_vector_size > 0)
		{
			props_vector_size--;
			TradeItemProp val;
			val.unserialize(s, false);
			props.push_back(val);
		}
		s >> revision;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "static_id", static_id);
		lua::settable(L, -1, "item_id", item_id);
		lua::settable(L, -1, "old_position", old_position);
		lua::settable(L, -1, "position", position);
		lua::settable(L, -1, "count", count);
		lua::newtable(lua::L);
		for (size_t i = 0; i < props.size(); ++i)
		{
			props[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "props");
		lua::settable(L, -1, "revision", revision);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "static_id=" << static_id;
		buffer << ",item_id=" << item_id;
		buffer << ",old_position=" << old_position;
		buffer << ",position=" << position;
		buffer << ",count=" << count;
		buffer << ",props=[";
		for (size_t i = 0; i < props.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			props[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
		buffer << ",revision=" << revision;
	}

public:
	int static_id; //物品静态ID 
	int item_id; //物品ID 
	int old_position; //物品旧位置 
	int position; //物品新位置 
	int count; //物品数量 
	std::vector<TradeItemProp> props; //物品属性 
	int revision; //最新版本号 
};

class MsgTradeChangeCoinRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_TRADE, Id = 8 };

	MsgTradeChangeCoinRequest() :
		Message(Category, Id)
	{
		coin = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTradeChangeCoinRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << coin;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> coin;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "coin", coin);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "coin=" << coin;
	}

public:
	long long coin; //金币数量 
};

class MsgTradeChangeCoinResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_TRADE, Id = 9 };

	MsgTradeChangeCoinResponse() :
		Message(Category, Id)
	{
		revision = 0;
		coin = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTradeChangeCoinResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 14;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << revision;
		s << coin;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> revision;
		s >> coin;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "revision", revision);
		lua::settable(L, -1, "coin", coin);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "revision=" << revision;
		buffer << ",coin=" << coin;
		buffer << ",errcode=" << errcode;
	}

public:
	int revision; //当前版本号 
	long long coin; //当前金币数量 
	short errcode; //错误码 
};

class MsgTradeChangeCoinNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_TRADE, Id = 10 };

	MsgTradeChangeCoinNotify() :
		Message(Category, Id)
	{
		revision = 0;
		coin = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTradeChangeCoinNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << revision;
		s << coin;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> revision;
		s >> coin;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "revision", revision);
		lua::settable(L, -1, "coin", coin);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "revision=" << revision;
		buffer << ",coin=" << coin;
	}

public:
	int revision; //当前版本号 
	long long coin; //当前金币数量 
};

class MsgTradeChangeIngotRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_TRADE, Id = 11 };

	MsgTradeChangeIngotRequest() :
		Message(Category, Id)
	{
		ingot = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTradeChangeIngotRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << ingot;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> ingot;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "ingot", ingot);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "ingot=" << ingot;
	}

public:
	int ingot; //元宝数量 
};

class MsgTradeChangeIngotResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_TRADE, Id = 12 };

	MsgTradeChangeIngotResponse() :
		Message(Category, Id)
	{
		revision = 0;
		ingot = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTradeChangeIngotResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << revision;
		s << ingot;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> revision;
		s >> ingot;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "revision", revision);
		lua::settable(L, -1, "ingot", ingot);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "revision=" << revision;
		buffer << ",ingot=" << ingot;
		buffer << ",errcode=" << errcode;
	}

public:
	int revision; //当前版本号 
	int ingot; //当前元宝数量 
	short errcode; //错误码 
};

class MsgTradeChangeIngotNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_TRADE, Id = 13 };

	MsgTradeChangeIngotNotify() :
		Message(Category, Id)
	{
		revision = 0;
		ingot = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTradeChangeIngotNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << revision;
		s << ingot;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> revision;
		s >> ingot;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "revision", revision);
		lua::settable(L, -1, "ingot", ingot);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "revision=" << revision;
		buffer << ",ingot=" << ingot;
	}

public:
	int revision; //当前版本号 
	int ingot; //当前元宝数量 
};

class MsgTradeCommitRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_TRADE, Id = 17 };

	MsgTradeCommitRequest() :
		Message(Category, Id)
	{
		revision = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTradeCommitRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << revision;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> revision;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "revision", revision);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "revision=" << revision;
	}

public:
	int revision; //版本号 
};

class MsgTradeCommitResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_TRADE, Id = 18 };

	MsgTradeCommitResponse() :
		Message(Category, Id)
	{
		revision = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTradeCommitResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << revision;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> revision;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "revision", revision);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "revision=" << revision;
		buffer << ",errcode=" << errcode;
	}

public:
	int revision; //当前版本号 
	short errcode; //错误码 
};

class MsgTradeCommitNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_TRADE, Id = 19 };

	MsgTradeCommitNotify() :
		Message(Category, Id)
	{
		revision = 0;
		other_player_id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTradeCommitNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << revision;
		s << other_player_id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> revision;
		s >> other_player_id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "revision", revision);
		lua::settable(L, -1, "other_player_id", other_player_id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "revision=" << revision;
		buffer << ",other_player_id=" << other_player_id;
	}

public:
	int revision; //版本号 
	int other_player_id; //对方玩家ID 
};

class MsgTradeCancelRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_TRADE, Id = 23 };

	MsgTradeCancelRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgTradeCancelRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgTradeResultNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_TRADE, Id = 24 };

	MsgTradeResultNotify() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTradeResultNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 2;
		length += sizeof(short) + other_player_name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << other_player_name;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> other_player_name;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "other_player_name", other_player_name);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "other_player_name=" << other_player_name;
		buffer << ",errcode=" << errcode;
	}

public:
	std::string other_player_name; //对方玩家名称 
	short errcode; //错误码 
};

class MsgTradeItemLockRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_TRADE, Id = 25 };

	MsgTradeItemLockRequest() :
		Message(Category, Id)
	{
		revision = 0;
		tradestate = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTradeItemLockRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << revision;
		s << tradestate;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> revision;
		s >> tradestate;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "revision", revision);
		lua::settable(L, -1, "tradestate", tradestate);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "revision=" << revision;
		buffer << ",tradestate=" << tradestate;
	}

public:
	int revision; //版本号 
	int tradestate; //是否锁定 
};

class MsgTradeItemLockResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_TRADE, Id = 26 };

	MsgTradeItemLockResponse() :
		Message(Category, Id)
	{
		revision = 0;
		tradestate = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTradeItemLockResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << revision;
		s << tradestate;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> revision;
		s >> tradestate;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "revision", revision);
		lua::settable(L, -1, "tradestate", tradestate);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "revision=" << revision;
		buffer << ",tradestate=" << tradestate;
		buffer << ",errcode=" << errcode;
	}

public:
	int revision; //当前版本号 
	int tradestate; //锁定结果 
	short errcode; //错误码 
};

class MsgTradeItemLockNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_TRADE, Id = 27 };

	MsgTradeItemLockNotify() :
		Message(Category, Id)
	{
		revision = 0;
		other_player_id = 0;
		tradestate = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTradeItemLockNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << revision;
		s << other_player_id;
		s << tradestate;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> revision;
		s >> other_player_id;
		s >> tradestate;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "revision", revision);
		lua::settable(L, -1, "other_player_id", other_player_id);
		lua::settable(L, -1, "tradestate", tradestate);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "revision=" << revision;
		buffer << ",other_player_id=" << other_player_id;
		buffer << ",tradestate=" << tradestate;
	}

public:
	int revision; //版本号 
	int other_player_id; //对方玩家ID 
	int tradestate; //锁定结果 
};

#endif	//_MSG_TRADE_H_INCLUDED
