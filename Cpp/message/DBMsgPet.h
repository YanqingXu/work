//
//Generated by lua
//2009-2012	(C) XianFeng Inc. Reserved
//

#ifndef _DB_MSG_PET_H_INCLUDED
#define _DB_MSG_PET_H_INCLUDED

#include "category.h"
#include "common/MessageEx.h"

struct DBPetInfo
{
public:
	DBPetInfo()
	{
		id = 0;
		sid = 0;
		type = 0;
		lvl = 0;
		exp = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 16;
		length += sizeof(short) + name.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << id;
		s << sid;
		s << type;
		s << name;
		s << lvl;
		s << exp;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> id;
		s >> sid;
		s >> type;
		s >> name;
		s >> lvl;
		s >> exp;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "lvl", lvl);
		lua::settable(L, -1, "exp", exp);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",sid=" << sid;
		buffer << ",type=" << type;
		buffer << ",name=" << name;
		buffer << ",lvl=" << lvl;
		buffer << ",exp=" << exp;
	}

public:
	int id;
	int sid;
	short type;
	std::string name;
	short lvl;
	int exp;
};

struct DBPetData
{
public:
	DBPetData()
	{
		id = 0;
		ctype = 0;
		data = 0;
	}

	size_t getLength(bool ex) const
	{
		return 12;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << id;
		s << ctype;
		s << data;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> id;
		s >> ctype;
		s >> data;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "ctype", ctype);
		lua::settable(L, -1, "data", data);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",ctype=" << ctype;
		buffer << ",data=" << data;
	}

public:
	int id;
	int ctype;
	int data;
};

class MsgDBLoadPet : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_PET, Id = 1 };

	MsgDBLoadPet() :
		MessageEx(Category, Id)
	{
		pid = 0;
		load_id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBLoadPet";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 8;
		length += sizeof(int);
		for (size_t i = 0; i < pet_list.size(); ++i)
		{
			length += pet_list[i].getLength(true);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		int pet_list_vector_size = (int)pet_list.size();
		s << pet_list_vector_size;
		if (pet_list_vector_size > 0)
		{
			for (auto it = pet_list.begin(); it != pet_list.end(); ++it)
			{
				(*it).serialize(s, true);
			}
		}
		s << pid;
		s << load_id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		int pet_list_vector_size = s.read_int32();
		pet_list.clear();
		while (pet_list_vector_size > 0)
		{
			pet_list_vector_size--;
			DBPetInfo val;
			val.unserialize(s, true);
			pet_list.push_back(val);
		}
		s >> pid;
		s >> load_id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < pet_list.size(); ++i)
		{
			pet_list[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "pet_list");
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "load_id", load_id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",pet_list=[";
		for (size_t i = 0; i < pet_list.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			pet_list[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
		buffer << ",pid=" << pid;
		buffer << ",load_id=" << load_id;
	}

public:
	std::vector<DBPetInfo> pet_list;
	int pid;
	int load_id;
};

class MsgDBPetLoadData : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_PET, Id = 2 };

	MsgDBPetLoadData() :
		MessageEx(Category, Id)
	{
		pid = 0;
		load_id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBPetLoadData";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 8;
		length += sizeof(int);
		for (size_t i = 0; i < petDatalist.size(); ++i)
		{
			length += petDatalist[i].getLength(true);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << pid;
		int petDatalist_vector_size = (int)petDatalist.size();
		s << petDatalist_vector_size;
		if (petDatalist_vector_size > 0)
		{
			for (auto it = petDatalist.begin(); it != petDatalist.end(); ++it)
			{
				(*it).serialize(s, true);
			}
		}
		s << load_id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> pid;
		int petDatalist_vector_size = s.read_int32();
		petDatalist.clear();
		while (petDatalist_vector_size > 0)
		{
			petDatalist_vector_size--;
			DBPetData val;
			val.unserialize(s, true);
			petDatalist.push_back(val);
		}
		s >> load_id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::newtable(lua::L);
		for (size_t i = 0; i < petDatalist.size(); ++i)
		{
			petDatalist[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "petDatalist");
		lua::settable(L, -1, "load_id", load_id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",pid=" << pid;
		buffer << ",petDatalist=[";
		for (size_t i = 0; i < petDatalist.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			petDatalist[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
		buffer << ",load_id=" << load_id;
	}

public:
	int pid;
	std::vector<DBPetData> petDatalist;
	int load_id;
};

class MsgDBPetCreate : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_PET, Id = 3 };

	MsgDBPetCreate() :
		MessageEx(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBPetCreate";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 4;
		length += petInfo.getLength(true);
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << pid;
		petInfo.serialize(s, true);
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> pid;
		petInfo.unserialize(s, true);
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		petInfo.push(L);
		lua::settable(L, -1, "petInfo");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",pid=" << pid;
		buffer << ",petInfo={";
		petInfo.dump(buffer);
		buffer << "}";
	}

public:
	int pid;
	DBPetInfo petInfo;
};

class MsgDBPetDelete : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_PET, Id = 4 };

	MsgDBPetDelete() :
		MessageEx(Category, Id)
	{
		pid = 0;
		id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBPetDelete";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << pid;
		s << id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> pid;
		s >> id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "id", id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",pid=" << pid;
		buffer << ",id=" << id;
	}

public:
	int pid;
	int id;
};

class MsgDBPetUpdLvlExp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_PET, Id = 5 };

	MsgDBPetUpdLvlExp() :
		MessageEx(Category, Id)
	{
		pid = 0;
		id = 0;
		lvl = 0;
		exp = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBPetUpdLvlExp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 16;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << pid;
		s << id;
		s << lvl;
		s << exp;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> pid;
		s >> id;
		s >> lvl;
		s >> exp;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "lvl", lvl);
		lua::settable(L, -1, "exp", exp);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",pid=" << pid;
		buffer << ",id=" << id;
		buffer << ",lvl=" << lvl;
		buffer << ",exp=" << exp;
	}

public:
	int pid;
	int id;
	int lvl;
	int exp;
};

class MsgDBPetUpdName : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_PET, Id = 6 };

	MsgDBPetUpdName() :
		MessageEx(Category, Id)
	{
		pid = 0;
		id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBPetUpdName";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 8;
		length += sizeof(short) + name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << pid;
		s << id;
		s << name;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> pid;
		s >> id;
		s >> name;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "name", name);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",pid=" << pid;
		buffer << ",id=" << id;
		buffer << ",name=" << name;
	}

public:
	int pid;
	int id;
	std::string name;
};

class MsgDBPetUpdOwner : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_PET, Id = 7 };

	MsgDBPetUpdOwner() :
		MessageEx(Category, Id)
	{
		oldpid = 0;
		oldid = 0;
		newpid = 0;
		newid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBPetUpdOwner";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 16;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << oldpid;
		s << oldid;
		s << newpid;
		s << newid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> oldpid;
		s >> oldid;
		s >> newpid;
		s >> newid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "oldpid", oldpid);
		lua::settable(L, -1, "oldid", oldid);
		lua::settable(L, -1, "newpid", newpid);
		lua::settable(L, -1, "newid", newid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",oldpid=" << oldpid;
		buffer << ",oldid=" << oldid;
		buffer << ",newpid=" << newpid;
		buffer << ",newid=" << newid;
	}

public:
	int oldpid;
	int oldid;
	int newpid;
	int newid;
};

class MsgDBPetExDataUpdate : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_PET, Id = 11 };

	MsgDBPetExDataUpdate() :
		MessageEx(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBPetExDataUpdate";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 4;
		length += petExData.getLength(true);
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << pid;
		petExData.serialize(s, true);
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> pid;
		petExData.unserialize(s, true);
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		petExData.push(L);
		lua::settable(L, -1, "petExData");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",pid=" << pid;
		buffer << ",petExData={";
		petExData.dump(buffer);
		buffer << "}";
	}

public:
	int pid;
	DBPetData petExData;
};

#endif	//_DB_MSG_PET_H_INCLUDED
