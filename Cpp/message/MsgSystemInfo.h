//
//Generated by lua
//2009-2012	(C) XianFeng Inc. Reserved
//

#ifndef _MSG_SYSTEM_INFO_H_INCLUDED
#define _MSG_SYSTEM_INFO_H_INCLUDED

#include "category.h"
#include "common/Message.h"

class MsgSystemInfoNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_SYSINFO, Id = 1 };

	MsgSystemInfoNotify() :
		Message(Category, Id)
	{
		id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSystemInfoNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short);
		for (size_t i = 0; i < args.size(); ++i)
		{
			length += sizeof(short) + args[i].size();
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		short args_vector_size = (short)args.size();
		s << args_vector_size;
		if (args_vector_size > 0)
		{
			for (auto it = args.begin(); it != args.end(); ++it)
			{
				s << *it;
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		int args_vector_size = s.read_int16();
		args.clear();
		while (args_vector_size > 0)
		{
			args_vector_size--;
			std::string val;
			s >> val;
			args.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::newtable(lua::L);
		for (size_t i = 0; i < args.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, args[i]);
		}
		lua::settable(L, -2, "args");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",args=[";
		for (size_t i = 0; i < args.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << args[i];
		}
		buffer << "]";
	}

public:
	int id;
	std::vector<std::string> args;
};

class MsgShowPrompt : public Message
{
public:
	enum { Category = MSG_CATEGORY_SYSINFO, Id = 2 };

	MsgShowPrompt() :
		Message(Category, Id)
	{
		kind = 0;
		id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgShowPrompt";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 8;
		length += sizeof(short);
		for (size_t i = 0; i < args.size(); ++i)
		{
			length += sizeof(short) + args[i].size();
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << kind;
		s << id;
		short args_vector_size = (short)args.size();
		s << args_vector_size;
		if (args_vector_size > 0)
		{
			for (auto it = args.begin(); it != args.end(); ++it)
			{
				s << *it;
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> kind;
		s >> id;
		int args_vector_size = s.read_int16();
		args.clear();
		while (args_vector_size > 0)
		{
			args_vector_size--;
			std::string val;
			s >> val;
			args.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "kind", kind);
		lua::settable(L, -1, "id", id);
		lua::newtable(lua::L);
		for (size_t i = 0; i < args.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, args[i]);
		}
		lua::settable(L, -2, "args");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "kind=" << kind;
		buffer << ",id=" << id;
		buffer << ",args=[";
		for (size_t i = 0; i < args.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << args[i];
		}
		buffer << "]";
	}

public:
	int kind;
	int id;
	std::vector<std::string> args;
};

class MsgShowNote : public Message
{
public:
	enum { Category = MSG_CATEGORY_SYSINFO, Id = 3 };

	MsgShowNote() :
		Message(Category, Id)
	{
		type = 0;
		id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgShowNote";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 8;
		length += sizeof(short);
		for (size_t i = 0; i < args.size(); ++i)
		{
			length += sizeof(short) + args[i].size();
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << type;
		s << id;
		short args_vector_size = (short)args.size();
		s << args_vector_size;
		if (args_vector_size > 0)
		{
			for (auto it = args.begin(); it != args.end(); ++it)
			{
				s << *it;
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> type;
		s >> id;
		int args_vector_size = s.read_int16();
		args.clear();
		while (args_vector_size > 0)
		{
			args_vector_size--;
			std::string val;
			s >> val;
			args.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "id", id);
		lua::newtable(lua::L);
		for (size_t i = 0; i < args.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, args[i]);
		}
		lua::settable(L, -2, "args");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
		buffer << ",id=" << id;
		buffer << ",args=[";
		for (size_t i = 0; i < args.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << args[i];
		}
		buffer << "]";
	}

public:
	int type;
	int id;
	std::vector<std::string> args;
};

class MsgShowTopNote : public Message
{
public:
	enum { Category = MSG_CATEGORY_SYSINFO, Id = 4 };

	MsgShowTopNote() :
		Message(Category, Id)
	{
		id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgShowTopNote";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short);
		for (size_t i = 0; i < args.size(); ++i)
		{
			length += sizeof(short) + args[i].size();
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		short args_vector_size = (short)args.size();
		s << args_vector_size;
		if (args_vector_size > 0)
		{
			for (auto it = args.begin(); it != args.end(); ++it)
			{
				s << *it;
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		int args_vector_size = s.read_int16();
		args.clear();
		while (args_vector_size > 0)
		{
			args_vector_size--;
			std::string val;
			s >> val;
			args.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::newtable(lua::L);
		for (size_t i = 0; i < args.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, args[i]);
		}
		lua::settable(L, -2, "args");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",args=[";
		for (size_t i = 0; i < args.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << args[i];
		}
		buffer << "]";
	}

public:
	int id;
	std::vector<std::string> args;
};

#endif	//_MSG_SYSTEM_INFO_H_INCLUDED
