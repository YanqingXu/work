//
//Generated by lua
//2009-2012	(C) XianFeng Inc. Reserved
//

#ifndef _MSG_CONSIGNMENT_H_INCLUDED
#define _MSG_CONSIGNMENT_H_INCLUDED

#include "category.h"
#include "common/Message.h"

struct ConsignmentItemProp
{
public:
	ConsignmentItemProp()
	{
		sellerpid = 0;
		cid = 0;
		sid = 0;
		idx = 0;
		data = 0;
	}

	size_t getLength(bool ex) const
	{
		return 18;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << sellerpid;
		s << cid;
		s << sid;
		s << idx;
		s << data;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> sellerpid;
		s >> cid;
		s >> sid;
		s >> idx;
		s >> data;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sellerpid", sellerpid);
		lua::settable(L, -1, "cid", cid);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "idx", idx);
		lua::settable(L, -1, "data", data);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "sellerpid=" << sellerpid;
		buffer << ",cid=" << cid;
		buffer << ",sid=" << sid;
		buffer << ",idx=" << idx;
		buffer << ",data=" << data;
	}

public:
	int sellerpid; //角色ID 
	int cid;
	int sid;
	short idx;
	int data;
};

struct Consignment
{
public:
	Consignment()
	{
		sellerPid = 0;
		sellerServerId = 0;
		sellerWarZoneId = 0;
		cid = 0;
		sid = 0;
		count = 0;
		taxRate = 0;
		price = 0;
		ctime = 0;
		etime = 0;
		mailTip = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 44;
		length += sizeof(short) + sellerName.size();
		length += sizeof(short) + sellerServerName.size();
		length += sizeof(short) + firstOwner.size();
		length += sizeof(short) + appraiser.size();
		length += ex ? sizeof(int) : sizeof(short);
		for (size_t i = 0; i < props.size(); ++i)
		{
			length += props[i].getLength(ex);
		}
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << sellerPid;
		s << sellerName;
		s << sellerServerId;
		s << sellerServerName;
		s << sellerWarZoneId;
		s << cid;
		s << sid;
		s << count;
		s << taxRate;
		s << price;
		s << ctime;
		s << etime;
		s << firstOwner;
		s << appraiser;
		s << mailTip;
		int props_vector_size = ex ? (int)props.size() : (short)props.size();
		if (ex)
		{
			s << props_vector_size;
		}
		else
		{
			s << (short)props_vector_size;
		}
		if (props_vector_size > 0)
		{
			for (auto it = props.begin(); it != props.end(); ++it)
			{
				(*it).serialize(s, ex);
			}
		}
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> sellerPid;
		s >> sellerName;
		s >> sellerServerId;
		s >> sellerServerName;
		s >> sellerWarZoneId;
		s >> cid;
		s >> sid;
		s >> count;
		s >> taxRate;
		s >> price;
		s >> ctime;
		s >> etime;
		s >> firstOwner;
		s >> appraiser;
		s >> mailTip;
		int props_vector_size = ex ? s.read_int32() : s.read_int16();
		props.clear();
		while (props_vector_size > 0)
		{
			props_vector_size--;
			ConsignmentItemProp val;
			val.unserialize(s, ex);
			props.push_back(val);
		}
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sellerPid", sellerPid);
		lua::settable(L, -1, "sellerName", sellerName);
		lua::settable(L, -1, "sellerServerId", sellerServerId);
		lua::settable(L, -1, "sellerServerName", sellerServerName);
		lua::settable(L, -1, "sellerWarZoneId", sellerWarZoneId);
		lua::settable(L, -1, "cid", cid);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "count", count);
		lua::settable(L, -1, "taxRate", taxRate);
		lua::settable(L, -1, "price", price);
		lua::settable(L, -1, "ctime", ctime);
		lua::settable(L, -1, "etime", etime);
		lua::settable(L, -1, "firstOwner", firstOwner);
		lua::settable(L, -1, "appraiser", appraiser);
		lua::settable(L, -1, "mailTip", mailTip);
		lua::newtable(lua::L);
		for (size_t i = 0; i < props.size(); ++i)
		{
			props[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "props");
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "sellerPid=" << sellerPid;
		buffer << ",sellerName=" << sellerName;
		buffer << ",sellerServerId=" << sellerServerId;
		buffer << ",sellerServerName=" << sellerServerName;
		buffer << ",sellerWarZoneId=" << sellerWarZoneId;
		buffer << ",cid=" << cid;
		buffer << ",sid=" << sid;
		buffer << ",count=" << count;
		buffer << ",taxRate=" << taxRate;
		buffer << ",price=" << price;
		buffer << ",ctime=" << ctime;
		buffer << ",etime=" << etime;
		buffer << ",firstOwner=" << firstOwner;
		buffer << ",appraiser=" << appraiser;
		buffer << ",mailTip=" << mailTip;
		buffer << ",props=[";
		for (size_t i = 0; i < props.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			props[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int sellerPid; //卖家ID 
	std::string sellerName; //卖家姓名 
	int sellerServerId; //卖家服务器id 
	std::string sellerServerName; //卖家服务器名称 
	int sellerWarZoneId; //卖家战区id 
	int cid; //寄售ID 
	int sid; //物品ID 
	int count; //物品数量 
	int taxRate; //税率 
	int price; //出售价格 
	int ctime; //寄售时间 
	int etime; //过期时间 
	std::string firstOwner; //第一个拥有者 
	std::string appraiser; //鉴定者 
	int mailTip; //邮件提示 
	std::vector<ConsignmentItemProp> props;
};

class MsgGetConsignmentsRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 1 };

	MsgGetConsignmentsRequest() :
		Message(Category, Id)
	{
		revision = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetConsignmentsRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << revision;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> revision;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "revision", revision);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "revision=" << revision;
	}

public:
	int revision; //数据版本号 
};

class MsgUpdateAllConsignmentNotifyStart : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 2 };

	MsgUpdateAllConsignmentNotifyStart() :
		Message(Category, Id)
	{
		revision = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdateAllConsignmentNotifyStart";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << revision;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> revision;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "revision", revision);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "revision=" << revision;
	}

public:
	int revision; //数据版本号 
};

class MsgUpdateAllConsignmentNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 3 };

	MsgUpdateAllConsignmentNotify() :
		Message(Category, Id)
	{
		revision = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdateAllConsignmentNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short);
		for (size_t i = 0; i < consignments.size(); ++i)
		{
			length += consignments[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << revision;
		short consignments_vector_size = (short)consignments.size();
		s << consignments_vector_size;
		if (consignments_vector_size > 0)
		{
			for (auto it = consignments.begin(); it != consignments.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> revision;
		int consignments_vector_size = s.read_int16();
		consignments.clear();
		while (consignments_vector_size > 0)
		{
			consignments_vector_size--;
			Consignment val;
			val.unserialize(s, false);
			consignments.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "revision", revision);
		lua::newtable(lua::L);
		for (size_t i = 0; i < consignments.size(); ++i)
		{
			consignments[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "consignments");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "revision=" << revision;
		buffer << ",consignments=[";
		for (size_t i = 0; i < consignments.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			consignments[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int revision; //数据版本号 
	std::vector<Consignment> consignments;
};

class MsgUpdateAllConsignmentNotifyEnd : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 4 };

	MsgUpdateAllConsignmentNotifyEnd() :
		Message(Category, Id)
	{
		revision = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdateAllConsignmentNotifyEnd";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << revision;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> revision;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "revision", revision);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "revision=" << revision;
	}

public:
	int revision; //数据版本号 
};

class MsgAddConsignmentRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 5 };

	MsgAddConsignmentRequest() :
		Message(Category, Id)
	{
		iid = 0;
		count = 0;
		price = 0;
		period = 0;
		timetype = 0;
	}

	virtual const char *getName() const
	{
		return "MsgAddConsignmentRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 20;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		s << count;
		s << price;
		s << period;
		s << timetype;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		s >> count;
		s >> price;
		s >> period;
		s >> timetype;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "count", count);
		lua::settable(L, -1, "price", price);
		lua::settable(L, -1, "period", period);
		lua::settable(L, -1, "timetype", timetype);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",count=" << count;
		buffer << ",price=" << price;
		buffer << ",period=" << period;
		buffer << ",timetype=" << timetype;
	}

public:
	int iid; //物品ID 
	int count; //物品数量 
	int price; //价格 
	int period; //期限 
	int timetype; //寄售持续时间 
};

class MsgAddConsignmentResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 6 };

	MsgAddConsignmentResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgAddConsignmentResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode; //错误码 
};

class MsgAddConsignmentNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 7 };

	MsgAddConsignmentNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgAddConsignmentNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgDeleteConsignmentRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 8 };

	MsgDeleteConsignmentRequest() :
		Message(Category, Id)
	{
		cid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDeleteConsignmentRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << cid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> cid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "cid", cid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "cid=" << cid;
	}

public:
	int cid; //寄售ID 
};

class MsgDeleteConsignmentResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 9 };

	MsgDeleteConsignmentResponse() :
		Message(Category, Id)
	{
		cid = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDeleteConsignmentResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << cid;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> cid;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "cid", cid);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "cid=" << cid;
		buffer << ",errcode=" << errcode;
	}

public:
	int cid; //寄售ID 
	short errcode; //错误码 
};

class MsgDeleteConsignmentNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 10 };

	MsgDeleteConsignmentNotify() :
		Message(Category, Id)
	{
		cid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDeleteConsignmentNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << cid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> cid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "cid", cid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "cid=" << cid;
	}

public:
	int cid; //寄售ID 
};

class MsgBuyConsignmentRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 11 };

	MsgBuyConsignmentRequest() :
		Message(Category, Id)
	{
		pid = 0;
		cid = 0;
		count = 0;
	}

	virtual const char *getName() const
	{
		return "MsgBuyConsignmentRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << cid;
		s << count;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> cid;
		s >> count;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "cid", cid);
		lua::settable(L, -1, "count", count);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",cid=" << cid;
		buffer << ",count=" << count;
	}

public:
	int pid; //玩家ID 
	int cid; //寄售ID 
	int count; //购买数量 
};

class MsgBuyConsignmentResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 12 };

	MsgBuyConsignmentResponse() :
		Message(Category, Id)
	{
		pid = 0;
		cid = 0;
		count = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgBuyConsignmentResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 14;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << cid;
		s << count;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> cid;
		s >> count;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "cid", cid);
		lua::settable(L, -1, "count", count);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",cid=" << cid;
		buffer << ",count=" << count;
		buffer << ",errcode=" << errcode;
	}

public:
	int pid; //玩家ID 
	int cid; //寄售ID 
	int count; //购买数量 
	short errcode; //错误码 
};

struct ConsignmentRecording
{
public:
	ConsignmentRecording()
	{
		pid = 0;
		buyerpid = 0;
		sid = 0;
		count = 0;
		price = 0;
		ctype = 0;
		btime = 0;
		pricetype = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 32;
		length += sizeof(short) + sellername.size();
		length += sizeof(short) + buyername.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << pid;
		s << sellername;
		s << buyerpid;
		s << buyername;
		s << sid;
		s << count;
		s << price;
		s << ctype;
		s << btime;
		s << pricetype;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> pid;
		s >> sellername;
		s >> buyerpid;
		s >> buyername;
		s >> sid;
		s >> count;
		s >> price;
		s >> ctype;
		s >> btime;
		s >> pricetype;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "sellername", sellername);
		lua::settable(L, -1, "buyerpid", buyerpid);
		lua::settable(L, -1, "buyername", buyername);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "count", count);
		lua::settable(L, -1, "price", price);
		lua::settable(L, -1, "ctype", ctype);
		lua::settable(L, -1, "btime", btime);
		lua::settable(L, -1, "pricetype", pricetype);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",sellername=" << sellername;
		buffer << ",buyerpid=" << buyerpid;
		buffer << ",buyername=" << buyername;
		buffer << ",sid=" << sid;
		buffer << ",count=" << count;
		buffer << ",price=" << price;
		buffer << ",ctype=" << ctype;
		buffer << ",btime=" << btime;
		buffer << ",pricetype=" << pricetype;
	}

public:
	int pid; //玩家ID 
	std::string sellername; //卖家姓名 
	int buyerpid; //买家id 
	std::string buyername; //买家姓名 
	int sid; //物品ID 
	int count; //物品数量 
	int price; //出售价格 
	int ctype; //交易类型 
	int btime; //交易时间 
	int pricetype; //货币类型 
};

class MsgAddConsignmentRecordRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 13 };

	MsgAddConsignmentRecordRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgAddConsignmentRecordRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgAddConsignmentRecordResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 14 };

	MsgAddConsignmentRecordResponse() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgAddConsignmentRecordResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < consignmentsRecording.size(); ++i)
		{
			length += consignmentsRecording[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short consignmentsRecording_vector_size = (short)consignmentsRecording.size();
		s << consignmentsRecording_vector_size;
		if (consignmentsRecording_vector_size > 0)
		{
			for (auto it = consignmentsRecording.begin(); it != consignmentsRecording.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int consignmentsRecording_vector_size = s.read_int16();
		consignmentsRecording.clear();
		while (consignmentsRecording_vector_size > 0)
		{
			consignmentsRecording_vector_size--;
			ConsignmentRecording val;
			val.unserialize(s, false);
			consignmentsRecording.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < consignmentsRecording.size(); ++i)
		{
			consignmentsRecording[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "consignmentsRecording");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "consignmentsRecording=[";
		for (size_t i = 0; i < consignmentsRecording.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			consignmentsRecording[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<ConsignmentRecording> consignmentsRecording;
};

class MsgGetConsignmentAttentionRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 15 };

	MsgGetConsignmentAttentionRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGetConsignmentAttentionRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgGetConsignmentAttentionResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 16 };

	MsgGetConsignmentAttentionResponse() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGetConsignmentAttentionResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < consignments.size(); ++i)
		{
			length += consignments[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short consignments_vector_size = (short)consignments.size();
		s << consignments_vector_size;
		if (consignments_vector_size > 0)
		{
			for (auto it = consignments.begin(); it != consignments.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int consignments_vector_size = s.read_int16();
		consignments.clear();
		while (consignments_vector_size > 0)
		{
			consignments_vector_size--;
			Consignment val;
			val.unserialize(s, false);
			consignments.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < consignments.size(); ++i)
		{
			consignments[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "consignments");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "consignments=[";
		for (size_t i = 0; i < consignments.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			consignments[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<Consignment> consignments;
};

class MsgAddConsignmentAttentionRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 17 };

	MsgAddConsignmentAttentionRequest() :
		Message(Category, Id)
	{
		pid = 0;
		cid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgAddConsignmentAttentionRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << cid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> cid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "cid", cid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",cid=" << cid;
	}

public:
	int pid; //玩家ID 
	int cid; //寄售ID 
};

class MsgAddConsignmentAttentionResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 18 };

	MsgAddConsignmentAttentionResponse() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgAddConsignmentAttentionResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += consignment.getLength(false);
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		consignment.serialize(s, false);
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		consignment.unserialize(s, false);
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		consignment.push(L);
		lua::settable(L, -1, "consignment");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "consignment={";
		consignment.dump(buffer);
		buffer << "}";
	}

public:
	Consignment consignment; //关注物品 
};

struct Acution
{
public:
	Acution()
	{
		aid_high = 0;
		aid_lower = 0;
		sid = 0;
		count = 0;
		fixed_price = 0;
		start_price = 0;
		things_type = 0;
		buyer_pid = 0;
		cur_price = 0;
		atime = 0;
		etime = 0;
		crt_type = 0;
		guild_id = 0;
		server_id = 0;
		war_zone_id = 0;
		buyer_server_id = 0;
		next_auction = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 68;
		length += sizeof(short) + buyer_name.size();
		length += ex ? sizeof(int) : sizeof(short);
		length += parters.size() * 4;
		length += ex ? sizeof(int) : sizeof(short);
		length += buyers.size() * 4;
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << aid_high;
		s << aid_lower;
		s << sid;
		s << count;
		s << fixed_price;
		s << start_price;
		s << things_type;
		s << buyer_pid;
		s << buyer_name;
		s << cur_price;
		s << atime;
		s << etime;
		int parters_vector_size = ex ? (int)parters.size() : (short)parters.size();
		if (ex)
		{
			s << parters_vector_size;
		}
		else
		{
			s << (short)parters_vector_size;
		}
		if (parters_vector_size > 0)
		{
			for (auto it = parters.begin(); it != parters.end(); ++it)
			{
				s << *it;
			}
		}
		int buyers_vector_size = ex ? (int)buyers.size() : (short)buyers.size();
		if (ex)
		{
			s << buyers_vector_size;
		}
		else
		{
			s << (short)buyers_vector_size;
		}
		if (buyers_vector_size > 0)
		{
			for (auto it = buyers.begin(); it != buyers.end(); ++it)
			{
				s << *it;
			}
		}
		s << crt_type;
		s << guild_id;
		s << server_id;
		s << war_zone_id;
		s << buyer_server_id;
		s << next_auction;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> aid_high;
		s >> aid_lower;
		s >> sid;
		s >> count;
		s >> fixed_price;
		s >> start_price;
		s >> things_type;
		s >> buyer_pid;
		s >> buyer_name;
		s >> cur_price;
		s >> atime;
		s >> etime;
		int parters_vector_size = ex ? s.read_int32() : s.read_int16();
		parters.clear();
		while (parters_vector_size > 0)
		{
			parters_vector_size--;
			int val;
			s >> val;
			parters.push_back(val);
		}
		int buyers_vector_size = ex ? s.read_int32() : s.read_int16();
		buyers.clear();
		while (buyers_vector_size > 0)
		{
			buyers_vector_size--;
			int val;
			s >> val;
			buyers.push_back(val);
		}
		s >> crt_type;
		s >> guild_id;
		s >> server_id;
		s >> war_zone_id;
		s >> buyer_server_id;
		s >> next_auction;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid_high", aid_high);
		lua::settable(L, -1, "aid_lower", aid_lower);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "count", count);
		lua::settable(L, -1, "fixed_price", fixed_price);
		lua::settable(L, -1, "start_price", start_price);
		lua::settable(L, -1, "things_type", things_type);
		lua::settable(L, -1, "buyer_pid", buyer_pid);
		lua::settable(L, -1, "buyer_name", buyer_name);
		lua::settable(L, -1, "cur_price", cur_price);
		lua::settable(L, -1, "atime", atime);
		lua::settable(L, -1, "etime", etime);
		lua::newtable(lua::L);
		for (size_t i = 0; i < parters.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, parters[i]);
		}
		lua::settable(L, -2, "parters");
		lua::newtable(lua::L);
		for (size_t i = 0; i < buyers.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, buyers[i]);
		}
		lua::settable(L, -2, "buyers");
		lua::settable(L, -1, "crt_type", crt_type);
		lua::settable(L, -1, "guild_id", guild_id);
		lua::settable(L, -1, "server_id", server_id);
		lua::settable(L, -1, "war_zone_id", war_zone_id);
		lua::settable(L, -1, "buyer_server_id", buyer_server_id);
		lua::settable(L, -1, "next_auction", next_auction);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "aid_high=" << aid_high;
		buffer << ",aid_lower=" << aid_lower;
		buffer << ",sid=" << sid;
		buffer << ",count=" << count;
		buffer << ",fixed_price=" << fixed_price;
		buffer << ",start_price=" << start_price;
		buffer << ",things_type=" << things_type;
		buffer << ",buyer_pid=" << buyer_pid;
		buffer << ",buyer_name=" << buyer_name;
		buffer << ",cur_price=" << cur_price;
		buffer << ",atime=" << atime;
		buffer << ",etime=" << etime;
		buffer << ",parters=[";
		for (size_t i = 0; i < parters.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << parters[i];
		}
		buffer << "]";
		buffer << ",buyers=[";
		for (size_t i = 0; i < buyers.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << buyers[i];
		}
		buffer << "]";
		buffer << ",crt_type=" << crt_type;
		buffer << ",guild_id=" << guild_id;
		buffer << ",server_id=" << server_id;
		buffer << ",war_zone_id=" << war_zone_id;
		buffer << ",buyer_server_id=" << buyer_server_id;
		buffer << ",next_auction=" << next_auction;
	}

public:
	int aid_high; //拍卖ID(高32位) 
	int aid_lower; //拍卖ID(低32位) 
	int sid; //物品ID 
	int count; //物品数量 
	int fixed_price; //一口价 
	int start_price; //起拍价 
	int things_type; //货币类型 
	int buyer_pid; //竞价人pid 
	std::string buyer_name; //竞价人名字 
	int cur_price; //当前竞拍价格 
	int atime; //成交时间 
	int etime; //过期时间 
	std::vector<int> parters; //拍卖受益人 
	std::vector<int> buyers; //拍卖竞价者 
	int crt_type; //拍卖物品归属组 
	int guild_id; //公会id 
	int server_id; //区服id 
	int war_zone_id; //战区id 
	int buyer_server_id; //竞价人区服id 
	int next_auction; //是否进入下一拍卖行 
};

class MsgRmvOneAcutionNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 19 };

	MsgRmvOneAcutionNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgRmvOneAcutionNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += acution.getLength(false);
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		acution.serialize(s, false);
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		acution.unserialize(s, false);
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		acution.push(L);
		lua::settable(L, -1, "acution");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "acution={";
		acution.dump(buffer);
		buffer << "}";
	}

public:
	Acution acution; //一个条目 
};

class MsgAddOneAcutionNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 20 };

	MsgAddOneAcutionNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgAddOneAcutionNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += acution.getLength(false);
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		acution.serialize(s, false);
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		acution.unserialize(s, false);
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		acution.push(L);
		lua::settable(L, -1, "acution");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "acution={";
		acution.dump(buffer);
		buffer << "}";
	}

public:
	Acution acution; //一个条目 
};

class MsgUpdateOneAcutionNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 21 };

	MsgUpdateOneAcutionNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgUpdateOneAcutionNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += acution.getLength(false);
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		acution.serialize(s, false);
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		acution.unserialize(s, false);
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		acution.push(L);
		lua::settable(L, -1, "acution");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "acution={";
		acution.dump(buffer);
		buffer << "}";
	}

public:
	Acution acution; //一个条目 
};

class MsgBuyAcutionRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 22 };

	MsgBuyAcutionRequest() :
		Message(Category, Id)
	{
		ctype = 0;
		sid = 0;
		aid_high = 0;
		aid_lower = 0;
		payMoney = 0;
	}

	virtual const char *getName() const
	{
		return "MsgBuyAcutionRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 20;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << ctype;
		s << sid;
		s << aid_high;
		s << aid_lower;
		s << payMoney;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> ctype;
		s >> sid;
		s >> aid_high;
		s >> aid_lower;
		s >> payMoney;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "ctype", ctype);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "aid_high", aid_high);
		lua::settable(L, -1, "aid_lower", aid_lower);
		lua::settable(L, -1, "payMoney", payMoney);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "ctype=" << ctype;
		buffer << ",sid=" << sid;
		buffer << ",aid_high=" << aid_high;
		buffer << ",aid_lower=" << aid_lower;
		buffer << ",payMoney=" << payMoney;
	}

public:
	int ctype; //1 竞拍 2 一口价 
	int sid; //物品ID 
	int aid_high; //拍卖ID(高32位) 
	int aid_lower; //拍卖ID(低32位) 
	int payMoney; //出价 
};

class MsgBuyAcutionResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 23 };

	MsgBuyAcutionResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		ctype = 0;
	}

	virtual const char *getName() const
	{
		return "MsgBuyAcutionResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << ctype;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> ctype;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "ctype", ctype);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",ctype=" << ctype;
	}

public:
	int errcode; //错误码 
	int ctype; //1 竞拍  2 一口价 
};

class MsgGetAllAcutionRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 24 };

	MsgGetAllAcutionRequest() :
		Message(Category, Id)
	{
		revision = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetAllAcutionRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << revision;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> revision;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "revision", revision);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "revision=" << revision;
	}

public:
	int revision; //数据版本号 
};

class MsgUpdateAllAcutionNotifyStart : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 25 };

	MsgUpdateAllAcutionNotifyStart() :
		Message(Category, Id)
	{
		revision = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdateAllAcutionNotifyStart";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << revision;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> revision;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "revision", revision);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "revision=" << revision;
	}

public:
	int revision; //数据版本号 
};

class MsgUpdateAllAcutionNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 26 };

	MsgUpdateAllAcutionNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgUpdateAllAcutionNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < acutions.size(); ++i)
		{
			length += acutions[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short acutions_vector_size = (short)acutions.size();
		s << acutions_vector_size;
		if (acutions_vector_size > 0)
		{
			for (auto it = acutions.begin(); it != acutions.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int acutions_vector_size = s.read_int16();
		acutions.clear();
		while (acutions_vector_size > 0)
		{
			acutions_vector_size--;
			Acution val;
			val.unserialize(s, false);
			acutions.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < acutions.size(); ++i)
		{
			acutions[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "acutions");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "acutions=[";
		for (size_t i = 0; i < acutions.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			acutions[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<Acution> acutions; //所有条目 
};

class MsgUpdateAllAcutionNotifyEnd : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 27 };

	MsgUpdateAllAcutionNotifyEnd() :
		Message(Category, Id)
	{
		revision = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdateAllAcutionNotifyEnd";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << revision;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> revision;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "revision", revision);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "revision=" << revision;
	}

public:
	int revision; //数据版本号 
};

class MsgRmvManyAcutionNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 28 };

	MsgRmvManyAcutionNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgRmvManyAcutionNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < acutions.size(); ++i)
		{
			length += acutions[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short acutions_vector_size = (short)acutions.size();
		s << acutions_vector_size;
		if (acutions_vector_size > 0)
		{
			for (auto it = acutions.begin(); it != acutions.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int acutions_vector_size = s.read_int16();
		acutions.clear();
		while (acutions_vector_size > 0)
		{
			acutions_vector_size--;
			Acution val;
			val.unserialize(s, false);
			acutions.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < acutions.size(); ++i)
		{
			acutions[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "acutions");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "acutions=[";
		for (size_t i = 0; i < acutions.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			acutions[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<Acution> acutions; //一个条目 
};

struct Purchase
{
public:
	Purchase()
	{
		buyerPid = 0;
		buyerServerId = 0;
		buyerWarZoneId = 0;
		purchaseId = 0;
		sid = 0;
		count = 0;
		taxRate = 0;
		price = 0;
		ctime = 0;
		etime = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 40;
		length += sizeof(short) + buyerName.size();
		length += sizeof(short) + buyerServerName.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << buyerPid;
		s << buyerName;
		s << buyerServerId;
		s << buyerServerName;
		s << buyerWarZoneId;
		s << purchaseId;
		s << sid;
		s << count;
		s << taxRate;
		s << price;
		s << ctime;
		s << etime;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> buyerPid;
		s >> buyerName;
		s >> buyerServerId;
		s >> buyerServerName;
		s >> buyerWarZoneId;
		s >> purchaseId;
		s >> sid;
		s >> count;
		s >> taxRate;
		s >> price;
		s >> ctime;
		s >> etime;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "buyerPid", buyerPid);
		lua::settable(L, -1, "buyerName", buyerName);
		lua::settable(L, -1, "buyerServerId", buyerServerId);
		lua::settable(L, -1, "buyerServerName", buyerServerName);
		lua::settable(L, -1, "buyerWarZoneId", buyerWarZoneId);
		lua::settable(L, -1, "purchaseId", purchaseId);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "count", count);
		lua::settable(L, -1, "taxRate", taxRate);
		lua::settable(L, -1, "price", price);
		lua::settable(L, -1, "ctime", ctime);
		lua::settable(L, -1, "etime", etime);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "buyerPid=" << buyerPid;
		buffer << ",buyerName=" << buyerName;
		buffer << ",buyerServerId=" << buyerServerId;
		buffer << ",buyerServerName=" << buyerServerName;
		buffer << ",buyerWarZoneId=" << buyerWarZoneId;
		buffer << ",purchaseId=" << purchaseId;
		buffer << ",sid=" << sid;
		buffer << ",count=" << count;
		buffer << ",taxRate=" << taxRate;
		buffer << ",price=" << price;
		buffer << ",ctime=" << ctime;
		buffer << ",etime=" << etime;
	}

public:
	int buyerPid; //求购者pid 
	std::string buyerName; //求购者姓名 
	int buyerServerId; //求购者服务器id 
	std::string buyerServerName; //求购者服务器名称 
	int buyerWarZoneId; //求购者战区id 
	int purchaseId; //求购id 
	int sid; //求购物品ID 
	int count; //求购物品数量 
	int taxRate; //税率 
	int price; //求购价格 
	int ctime; //求购时间 
	int etime; //求购过期时间 
};

class MsgGetPurchaseListRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 29 };

	MsgGetPurchaseListRequest() :
		Message(Category, Id)
	{
		revision = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetPurchaseListRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << revision;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> revision;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "revision", revision);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "revision=" << revision;
	}

public:
	int revision; //数据版本号 
};

class MsgUpdateAllPurchaseNotifyStart : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 30 };

	MsgUpdateAllPurchaseNotifyStart() :
		Message(Category, Id)
	{
		revision = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdateAllPurchaseNotifyStart";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << revision;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> revision;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "revision", revision);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "revision=" << revision;
	}

public:
	int revision; //数据版本号 
};

class MsgUpdateAllPurchaseNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 31 };

	MsgUpdateAllPurchaseNotify() :
		Message(Category, Id)
	{
		revision = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdateAllPurchaseNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short);
		for (size_t i = 0; i < purchaseList.size(); ++i)
		{
			length += purchaseList[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << revision;
		short purchaseList_vector_size = (short)purchaseList.size();
		s << purchaseList_vector_size;
		if (purchaseList_vector_size > 0)
		{
			for (auto it = purchaseList.begin(); it != purchaseList.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> revision;
		int purchaseList_vector_size = s.read_int16();
		purchaseList.clear();
		while (purchaseList_vector_size > 0)
		{
			purchaseList_vector_size--;
			Purchase val;
			val.unserialize(s, false);
			purchaseList.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "revision", revision);
		lua::newtable(lua::L);
		for (size_t i = 0; i < purchaseList.size(); ++i)
		{
			purchaseList[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "purchaseList");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "revision=" << revision;
		buffer << ",purchaseList=[";
		for (size_t i = 0; i < purchaseList.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			purchaseList[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int revision; //数据版本号 
	std::vector<Purchase> purchaseList;
};

class MsgUpdateAllPurchaseNotifyEnd : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 32 };

	MsgUpdateAllPurchaseNotifyEnd() :
		Message(Category, Id)
	{
		revision = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdateAllPurchaseNotifyEnd";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << revision;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> revision;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "revision", revision);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "revision=" << revision;
	}

public:
	int revision; //数据版本号 
};

class MsgPostPurchaseRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 33 };

	MsgPostPurchaseRequest() :
		Message(Category, Id)
	{
		needItemId = 0;
		needCounts = 0;
		payMoney = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPostPurchaseRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << needItemId;
		s << needCounts;
		s << payMoney;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> needItemId;
		s >> needCounts;
		s >> payMoney;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "needItemId", needItemId);
		lua::settable(L, -1, "needCounts", needCounts);
		lua::settable(L, -1, "payMoney", payMoney);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "needItemId=" << needItemId;
		buffer << ",needCounts=" << needCounts;
		buffer << ",payMoney=" << payMoney;
	}

public:
	int needItemId; //求购物品id 
	int needCounts; //求购物品数量 
	int payMoney; //求购者出价 
};

class MsgPostPurchaseResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 34 };

	MsgPostPurchaseResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		revision = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPostPurchaseResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 8;
		length += newPurchase.getLength(false);
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		newPurchase.serialize(s, false);
		s << revision;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		newPurchase.unserialize(s, false);
		s >> revision;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		newPurchase.push(L);
		lua::settable(L, -1, "newPurchase");
		lua::settable(L, -1, "revision", revision);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",newPurchase={";
		newPurchase.dump(buffer);
		buffer << "}";
		buffer << ",revision=" << revision;
	}

public:
	int errcode;
	Purchase newPurchase;
	int revision; //数据版本号 
};

class MsgCancelPurchaseRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 35 };

	MsgCancelPurchaseRequest() :
		Message(Category, Id)
	{
		buyerPid = 0;
		purchaseId = 0;
	}

	virtual const char *getName() const
	{
		return "MsgCancelPurchaseRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << buyerPid;
		s << purchaseId;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> buyerPid;
		s >> purchaseId;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "buyerPid", buyerPid);
		lua::settable(L, -1, "purchaseId", purchaseId);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "buyerPid=" << buyerPid;
		buffer << ",purchaseId=" << purchaseId;
	}

public:
	int buyerPid; //求购者pid 
	int purchaseId; //求购id 
};

class MsgCancelPurchaseResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 36 };

	MsgCancelPurchaseResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		buyerPid = 0;
		purchaseId = 0;
		revision = 0;
	}

	virtual const char *getName() const
	{
		return "MsgCancelPurchaseResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 16;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << buyerPid;
		s << purchaseId;
		s << revision;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> buyerPid;
		s >> purchaseId;
		s >> revision;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "buyerPid", buyerPid);
		lua::settable(L, -1, "purchaseId", purchaseId);
		lua::settable(L, -1, "revision", revision);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",buyerPid=" << buyerPid;
		buffer << ",purchaseId=" << purchaseId;
		buffer << ",revision=" << revision;
	}

public:
	int errcode;
	int buyerPid; //求购者pid 
	int purchaseId; //求购id 
	int revision; //数据版本号 
};

class MsgSellPurchaseRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 37 };

	MsgSellPurchaseRequest() :
		Message(Category, Id)
	{
		buyerPid = 0;
		purchaseId = 0;
		sellCounts = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSellPurchaseRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << buyerPid;
		s << purchaseId;
		s << sellCounts;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> buyerPid;
		s >> purchaseId;
		s >> sellCounts;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "buyerPid", buyerPid);
		lua::settable(L, -1, "purchaseId", purchaseId);
		lua::settable(L, -1, "sellCounts", sellCounts);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "buyerPid=" << buyerPid;
		buffer << ",purchaseId=" << purchaseId;
		buffer << ",sellCounts=" << sellCounts;
	}

public:
	int buyerPid; //求购者pid 
	int purchaseId; //求购id 
	int sellCounts; //出售数量 
};

class MsgSellPurchaseResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 38 };

	MsgSellPurchaseResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		buyerPid = 0;
		purchaseId = 0;
		leftCounts = 0;
		revision = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSellPurchaseResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 20;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << buyerPid;
		s << purchaseId;
		s << leftCounts;
		s << revision;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> buyerPid;
		s >> purchaseId;
		s >> leftCounts;
		s >> revision;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "buyerPid", buyerPid);
		lua::settable(L, -1, "purchaseId", purchaseId);
		lua::settable(L, -1, "leftCounts", leftCounts);
		lua::settable(L, -1, "revision", revision);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",buyerPid=" << buyerPid;
		buffer << ",purchaseId=" << purchaseId;
		buffer << ",leftCounts=" << leftCounts;
		buffer << ",revision=" << revision;
	}

public:
	int errcode;
	int buyerPid; //求购者pid 
	int purchaseId; //求购id 
	int leftCounts; //剩余求购数量 
	int revision; //数据版本号 
};

class MsgAcutionBuyerChangeNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_CONSIGNMENT, Id = 39 };

	MsgAcutionBuyerChangeNotify() :
		Message(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgAcutionBuyerChangeNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
	}

public:
	int pid; //之前的拍卖玩家id 
};

#endif	//_MSG_CONSIGNMENT_H_INCLUDED
