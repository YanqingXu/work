//
//Generated by lua
//2009-2012	(C) XianFeng Inc. Reserved
//

#ifndef _DB_MSG_ZHAN_DUI_H_INCLUDED
#define _DB_MSG_ZHAN_DUI_H_INCLUDED

#include "category.h"
#include "common/MessageEx.h"

struct DBZhanDui
{
public:
	DBZhanDui()
	{
		zhandui_id = 0;
		master_id = 0;
		member_count = 0;
		auto_join_reborn = 0;
		ctime = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 20;
		length += sizeof(short) + zhandui_name.size();
		length += sizeof(short) + master_name.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << zhandui_id;
		s << zhandui_name;
		s << master_id;
		s << master_name;
		s << member_count;
		s << auto_join_reborn;
		s << ctime;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> zhandui_id;
		s >> zhandui_name;
		s >> master_id;
		s >> master_name;
		s >> member_count;
		s >> auto_join_reborn;
		s >> ctime;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "zhandui_id", zhandui_id);
		lua::settable(L, -1, "zhandui_name", zhandui_name);
		lua::settable(L, -1, "master_id", master_id);
		lua::settable(L, -1, "master_name", master_name);
		lua::settable(L, -1, "member_count", member_count);
		lua::settable(L, -1, "auto_join_reborn", auto_join_reborn);
		lua::settable(L, -1, "ctime", ctime);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "zhandui_id=" << zhandui_id;
		buffer << ",zhandui_name=" << zhandui_name;
		buffer << ",master_id=" << master_id;
		buffer << ",master_name=" << master_name;
		buffer << ",member_count=" << member_count;
		buffer << ",auto_join_reborn=" << auto_join_reborn;
		buffer << ",ctime=" << ctime;
	}

public:
	int zhandui_id;
	std::string zhandui_name;
	int master_id;
	std::string master_name;
	int member_count;
	int auto_join_reborn;
	int ctime;
};

class MsgDBZhanDuiLoad : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_ZHANDUI, Id = 1 };

	MsgDBZhanDuiLoad() :
		MessageEx(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgDBZhanDuiLoad";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength();
		length += sizeof(int);
		for (size_t i = 0; i < zhanduis.size(); ++i)
		{
			length += zhanduis[i].getLength(true);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		int zhanduis_vector_size = (int)zhanduis.size();
		s << zhanduis_vector_size;
		if (zhanduis_vector_size > 0)
		{
			for (auto it = zhanduis.begin(); it != zhanduis.end(); ++it)
			{
				(*it).serialize(s, true);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		int zhanduis_vector_size = s.read_int32();
		zhanduis.clear();
		while (zhanduis_vector_size > 0)
		{
			zhanduis_vector_size--;
			DBZhanDui val;
			val.unserialize(s, true);
			zhanduis.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < zhanduis.size(); ++i)
		{
			zhanduis[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "zhanduis");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",zhanduis=[";
		for (size_t i = 0; i < zhanduis.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			zhanduis[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<DBZhanDui> zhanduis;
};

class MsgDBZhanDuiCreate : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_ZHANDUI, Id = 2 };

	MsgDBZhanDuiCreate() :
		MessageEx(Category, Id)
	{
		zhandui_id = 0;
		pid = 0;
		auto_join_reborn = 0;
		ctime = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBZhanDuiCreate";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return zhandui_id;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 16;
		length += sizeof(short) + zhandui_name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << zhandui_id;
		s << zhandui_name;
		s << pid;
		s << auto_join_reborn;
		s << ctime;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> zhandui_id;
		s >> zhandui_name;
		s >> pid;
		s >> auto_join_reborn;
		s >> ctime;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "zhandui_id", zhandui_id);
		lua::settable(L, -1, "zhandui_name", zhandui_name);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "auto_join_reborn", auto_join_reborn);
		lua::settable(L, -1, "ctime", ctime);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",zhandui_id=" << zhandui_id;
		buffer << ",zhandui_name=" << zhandui_name;
		buffer << ",pid=" << pid;
		buffer << ",auto_join_reborn=" << auto_join_reborn;
		buffer << ",ctime=" << ctime;
	}

public:
	int zhandui_id;
	std::string zhandui_name;
	int pid;
	int auto_join_reborn;
	int ctime;
};

class MsgDBZhanDuiDelete : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_ZHANDUI, Id = 3 };

	MsgDBZhanDuiDelete() :
		MessageEx(Category, Id)
	{
		zhandui_id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBZhanDuiDelete";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return zhandui_id;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << zhandui_id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> zhandui_id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "zhandui_id", zhandui_id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",zhandui_id=" << zhandui_id;
	}

public:
	int zhandui_id;
};

class MsgDBZhanDuiSetMaster : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_ZHANDUI, Id = 4 };

	MsgDBZhanDuiSetMaster() :
		MessageEx(Category, Id)
	{
		zhandui_id = 0;
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBZhanDuiSetMaster";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return zhandui_id;
	}

	virtual bool getSendBack() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << zhandui_id;
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> zhandui_id;
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "zhandui_id", zhandui_id);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",zhandui_id=" << zhandui_id;
		buffer << ",pid=" << pid;
	}

public:
	int zhandui_id;
	int pid;
};

class MsgDBZhanDuiSetName : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_ZHANDUI, Id = 5 };

	MsgDBZhanDuiSetName() :
		MessageEx(Category, Id)
	{
		zhandui_id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBZhanDuiSetName";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return zhandui_id;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 4;
		length += sizeof(short) + name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << zhandui_id;
		s << name;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> zhandui_id;
		s >> name;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "zhandui_id", zhandui_id);
		lua::settable(L, -1, "name", name);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",zhandui_id=" << zhandui_id;
		buffer << ",name=" << name;
	}

public:
	int zhandui_id;
	std::string name;
};

class MsgDBZhanDuiSetAutoJoinLevel : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_ZHANDUI, Id = 6 };

	MsgDBZhanDuiSetAutoJoinLevel() :
		MessageEx(Category, Id)
	{
		zhandui_id = 0;
		auto_join_reborn = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBZhanDuiSetAutoJoinLevel";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return zhandui_id;
	}

	virtual bool getSendBack() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << zhandui_id;
		s << auto_join_reborn;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> zhandui_id;
		s >> auto_join_reborn;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "zhandui_id", zhandui_id);
		lua::settable(L, -1, "auto_join_reborn", auto_join_reborn);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",zhandui_id=" << zhandui_id;
		buffer << ",auto_join_reborn=" << auto_join_reborn;
	}

public:
	int zhandui_id;
	int auto_join_reborn;
};

struct DBZhanDuiExData
{
public:
	DBZhanDuiExData()
	{
		zhandui_id = 0;
		idx = 0;
		data = 0;
	}

	size_t getLength(bool ex) const
	{
		return 12;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << zhandui_id;
		s << idx;
		s << data;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> zhandui_id;
		s >> idx;
		s >> data;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "zhandui_id", zhandui_id);
		lua::settable(L, -1, "idx", idx);
		lua::settable(L, -1, "data", data);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "zhandui_id=" << zhandui_id;
		buffer << ",idx=" << idx;
		buffer << ",data=" << data;
	}

public:
	int zhandui_id;
	int idx;
	int data;
};

class MsgDBZhanDuiExDataLoad : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_ZHANDUI, Id = 21 };

	MsgDBZhanDuiExDataLoad() :
		MessageEx(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgDBZhanDuiExDataLoad";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength();
		length += sizeof(int);
		for (size_t i = 0; i < props.size(); ++i)
		{
			length += props[i].getLength(true);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		int props_vector_size = (int)props.size();
		s << props_vector_size;
		if (props_vector_size > 0)
		{
			for (auto it = props.begin(); it != props.end(); ++it)
			{
				(*it).serialize(s, true);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		int props_vector_size = s.read_int32();
		props.clear();
		while (props_vector_size > 0)
		{
			props_vector_size--;
			DBZhanDuiExData val;
			val.unserialize(s, true);
			props.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < props.size(); ++i)
		{
			props[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "props");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",props=[";
		for (size_t i = 0; i < props.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			props[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<DBZhanDuiExData> props;
};

class MsgDBZhanDuiExDataUpdate : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_ZHANDUI, Id = 22 };

	MsgDBZhanDuiExDataUpdate() :
		MessageEx(Category, Id)
	{
		zhandui_id = 0;
		idx = 0;
		data = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBZhanDuiExDataUpdate";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return zhandui_id;
	}

	virtual bool getSendBack() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << zhandui_id;
		s << idx;
		s << data;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> zhandui_id;
		s >> idx;
		s >> data;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "zhandui_id", zhandui_id);
		lua::settable(L, -1, "idx", idx);
		lua::settable(L, -1, "data", data);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",zhandui_id=" << zhandui_id;
		buffer << ",idx=" << idx;
		buffer << ",data=" << data;
	}

public:
	int zhandui_id;
	int idx;
	int data;
};

class MsgDBZhanDuiExDataUpdateAll : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_ZHANDUI, Id = 23 };

	MsgDBZhanDuiExDataUpdateAll() :
		MessageEx(Category, Id)
	{
		idx = 0;
		data = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBZhanDuiExDataUpdateAll";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << idx;
		s << data;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> idx;
		s >> data;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "idx", idx);
		lua::settable(L, -1, "data", data);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",idx=" << idx;
		buffer << ",data=" << data;
	}

public:
	int idx;
	int data;
};

struct DBZhanDuiMember
{
public:
	DBZhanDuiMember()
	{
		zhandui_id = 0;
		pid = 0;
		job = 0;
		gender = 0;
		level = 0;
		reborn = 0;
		post = 0;
		intime = 0;
		recharge = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 34;
		length += sizeof(short) + name.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << zhandui_id;
		s << pid;
		s << name;
		s << job;
		s << gender;
		s << level;
		s << reborn;
		s << post;
		s << intime;
		s << recharge;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> zhandui_id;
		s >> pid;
		s >> name;
		s >> job;
		s >> gender;
		s >> level;
		s >> reborn;
		s >> post;
		s >> intime;
		s >> recharge;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "zhandui_id", zhandui_id);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "job", job);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "reborn", reborn);
		lua::settable(L, -1, "post", post);
		lua::settable(L, -1, "intime", intime);
		lua::settable(L, -1, "recharge", recharge);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "zhandui_id=" << zhandui_id;
		buffer << ",pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",job=" << job;
		buffer << ",gender=" << gender;
		buffer << ",level=" << level;
		buffer << ",reborn=" << reborn;
		buffer << ",post=" << post;
		buffer << ",intime=" << intime;
		buffer << ",recharge=" << recharge;
	}

public:
	int zhandui_id;
	int pid;
	std::string name;
	int job;
	short gender;
	int level;
	int reborn;
	int post;
	int intime;
	int recharge;
};

class MsgDBZhanDuiMemberLoad : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_ZHANDUI, Id = 31 };

	MsgDBZhanDuiMemberLoad() :
		MessageEx(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgDBZhanDuiMemberLoad";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength();
		length += sizeof(int);
		for (size_t i = 0; i < members.size(); ++i)
		{
			length += members[i].getLength(true);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		int members_vector_size = (int)members.size();
		s << members_vector_size;
		if (members_vector_size > 0)
		{
			for (auto it = members.begin(); it != members.end(); ++it)
			{
				(*it).serialize(s, true);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		int members_vector_size = s.read_int32();
		members.clear();
		while (members_vector_size > 0)
		{
			members_vector_size--;
			DBZhanDuiMember val;
			val.unserialize(s, true);
			members.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < members.size(); ++i)
		{
			members[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "members");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",members=[";
		for (size_t i = 0; i < members.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			members[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<DBZhanDuiMember> members;
};

class MsgDBZhanDuiMemberUpdate : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_ZHANDUI, Id = 32 };

	MsgDBZhanDuiMemberUpdate() :
		MessageEx(Category, Id)
	{
		zhandui_id = 0;
		pid = 0;
		post = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBZhanDuiMemberUpdate";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return zhandui_id;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << zhandui_id;
		s << pid;
		s << post;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> zhandui_id;
		s >> pid;
		s >> post;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "zhandui_id", zhandui_id);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "post", post);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",zhandui_id=" << zhandui_id;
		buffer << ",pid=" << pid;
		buffer << ",post=" << post;
	}

public:
	int zhandui_id;
	int pid;
	int post;
};

class MsgDBZhanDuiMemberDelete : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_ZHANDUI, Id = 33 };

	MsgDBZhanDuiMemberDelete() :
		MessageEx(Category, Id)
	{
		zhandui_id = 0;
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBZhanDuiMemberDelete";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return zhandui_id;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << zhandui_id;
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> zhandui_id;
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "zhandui_id", zhandui_id);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",zhandui_id=" << zhandui_id;
		buffer << ",pid=" << pid;
	}

public:
	int zhandui_id;
	int pid;
};

struct DBZhanDuiApplication
{
public:
	DBZhanDuiApplication()
	{
		zhandui_id = 0;
		pid = 0;
		job = 0;
		gender = 0;
		level = 0;
		reborn = 0;
		sponsor_grade = 0;
		type = 0;
		apptime = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 32;
		length += sizeof(short) + name.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << zhandui_id;
		s << pid;
		s << name;
		s << job;
		s << gender;
		s << level;
		s << reborn;
		s << sponsor_grade;
		s << type;
		s << apptime;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> zhandui_id;
		s >> pid;
		s >> name;
		s >> job;
		s >> gender;
		s >> level;
		s >> reborn;
		s >> sponsor_grade;
		s >> type;
		s >> apptime;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "zhandui_id", zhandui_id);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "job", job);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "reborn", reborn);
		lua::settable(L, -1, "sponsor_grade", sponsor_grade);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "apptime", apptime);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "zhandui_id=" << zhandui_id;
		buffer << ",pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",job=" << job;
		buffer << ",gender=" << gender;
		buffer << ",level=" << level;
		buffer << ",reborn=" << reborn;
		buffer << ",sponsor_grade=" << sponsor_grade;
		buffer << ",type=" << type;
		buffer << ",apptime=" << apptime;
	}

public:
	int zhandui_id;
	int pid;
	std::string name;
	short job;
	short gender;
	int level;
	int reborn;
	int sponsor_grade;
	int type;
	int apptime;
};

class MsgDBZhanDuiApplicationLoad : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_ZHANDUI, Id = 41 };

	MsgDBZhanDuiApplicationLoad() :
		MessageEx(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgDBZhanDuiApplicationLoad";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength();
		length += sizeof(int);
		for (size_t i = 0; i < applications.size(); ++i)
		{
			length += applications[i].getLength(true);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		int applications_vector_size = (int)applications.size();
		s << applications_vector_size;
		if (applications_vector_size > 0)
		{
			for (auto it = applications.begin(); it != applications.end(); ++it)
			{
				(*it).serialize(s, true);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		int applications_vector_size = s.read_int32();
		applications.clear();
		while (applications_vector_size > 0)
		{
			applications_vector_size--;
			DBZhanDuiApplication val;
			val.unserialize(s, true);
			applications.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < applications.size(); ++i)
		{
			applications[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "applications");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",applications=[";
		for (size_t i = 0; i < applications.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			applications[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<DBZhanDuiApplication> applications;
};

class MsgDBZhanDuiApplicationUpdate : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_ZHANDUI, Id = 42 };

	MsgDBZhanDuiApplicationUpdate() :
		MessageEx(Category, Id)
	{
		zhandui_id = 0;
		pid = 0;
		type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBZhanDuiApplicationUpdate";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return zhandui_id;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << zhandui_id;
		s << pid;
		s << type;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> zhandui_id;
		s >> pid;
		s >> type;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "zhandui_id", zhandui_id);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "type", type);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",zhandui_id=" << zhandui_id;
		buffer << ",pid=" << pid;
		buffer << ",type=" << type;
	}

public:
	int zhandui_id;
	int pid;
	int type;
};

class MsgDBZhanDuiApplicationDelete : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_ZHANDUI, Id = 43 };

	MsgDBZhanDuiApplicationDelete() :
		MessageEx(Category, Id)
	{
		zhandui_id = 0;
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBZhanDuiApplicationDelete";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return zhandui_id;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << zhandui_id;
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> zhandui_id;
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "zhandui_id", zhandui_id);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",zhandui_id=" << zhandui_id;
		buffer << ",pid=" << pid;
	}

public:
	int zhandui_id;
	int pid;
};

struct DBZhanDuiRecord
{
public:
	DBZhanDuiRecord()
	{
		zhandui_id = 0;
		id = 0;
		type = 0;
		datax = 0;
		datay = 0;
		dataz = 0;
		ctime = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 26;
		length += sizeof(short) + name1.size();
		length += sizeof(short) + name2.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << zhandui_id;
		s << id;
		s << type;
		s << datax;
		s << datay;
		s << dataz;
		s << name1;
		s << name2;
		s << ctime;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> zhandui_id;
		s >> id;
		s >> type;
		s >> datax;
		s >> datay;
		s >> dataz;
		s >> name1;
		s >> name2;
		s >> ctime;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "zhandui_id", zhandui_id);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "datax", datax);
		lua::settable(L, -1, "datay", datay);
		lua::settable(L, -1, "dataz", dataz);
		lua::settable(L, -1, "name1", name1);
		lua::settable(L, -1, "name2", name2);
		lua::settable(L, -1, "ctime", ctime);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "zhandui_id=" << zhandui_id;
		buffer << ",id=" << id;
		buffer << ",type=" << type;
		buffer << ",datax=" << datax;
		buffer << ",datay=" << datay;
		buffer << ",dataz=" << dataz;
		buffer << ",name1=" << name1;
		buffer << ",name2=" << name2;
		buffer << ",ctime=" << ctime;
	}

public:
	int zhandui_id;
	int id;
	short type;
	int datax;
	int datay;
	int dataz;
	std::string name1;
	std::string name2;
	int ctime;
};

class MsgDBZhanDuiRecordLoad : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_ZHANDUI, Id = 51 };

	MsgDBZhanDuiRecordLoad() :
		MessageEx(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgDBZhanDuiRecordLoad";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength();
		length += sizeof(int);
		for (size_t i = 0; i < records.size(); ++i)
		{
			length += records[i].getLength(true);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		int records_vector_size = (int)records.size();
		s << records_vector_size;
		if (records_vector_size > 0)
		{
			for (auto it = records.begin(); it != records.end(); ++it)
			{
				(*it).serialize(s, true);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		int records_vector_size = s.read_int32();
		records.clear();
		while (records_vector_size > 0)
		{
			records_vector_size--;
			DBZhanDuiRecord val;
			val.unserialize(s, true);
			records.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < records.size(); ++i)
		{
			records[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "records");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",records=[";
		for (size_t i = 0; i < records.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			records[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<DBZhanDuiRecord> records;
};

class MsgDBZhanDuiRecordAdd : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_ZHANDUI, Id = 52 };

	MsgDBZhanDuiRecordAdd() :
		MessageEx(Category, Id)
	{
		zhandui_id = 0;
		id = 0;
		type = 0;
		datax = 0;
		datay = 0;
		dataz = 0;
		ctime = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBZhanDuiRecordAdd";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return zhandui_id;
	}

	virtual bool getSendBack() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 26;
		length += sizeof(short) + name1.size();
		length += sizeof(short) + name2.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << zhandui_id;
		s << id;
		s << type;
		s << datax;
		s << datay;
		s << dataz;
		s << name1;
		s << name2;
		s << ctime;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> zhandui_id;
		s >> id;
		s >> type;
		s >> datax;
		s >> datay;
		s >> dataz;
		s >> name1;
		s >> name2;
		s >> ctime;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "zhandui_id", zhandui_id);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "datax", datax);
		lua::settable(L, -1, "datay", datay);
		lua::settable(L, -1, "dataz", dataz);
		lua::settable(L, -1, "name1", name1);
		lua::settable(L, -1, "name2", name2);
		lua::settable(L, -1, "ctime", ctime);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",zhandui_id=" << zhandui_id;
		buffer << ",id=" << id;
		buffer << ",type=" << type;
		buffer << ",datax=" << datax;
		buffer << ",datay=" << datay;
		buffer << ",dataz=" << dataz;
		buffer << ",name1=" << name1;
		buffer << ",name2=" << name2;
		buffer << ",ctime=" << ctime;
	}

public:
	int zhandui_id;
	int id;
	short type;
	int datax;
	int datay;
	int dataz;
	std::string name1;
	std::string name2;
	int ctime;
};

class MsgDBZhanDuiRecordDel : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_ZHANDUI, Id = 53 };

	MsgDBZhanDuiRecordDel() :
		MessageEx(Category, Id)
	{
		zhandui_id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBZhanDuiRecordDel";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return zhandui_id;
	}

	virtual bool getSendBack() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 4;
		length += sizeof(int);
		length += ids.size() * 4;
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << zhandui_id;
		int ids_vector_size = (int)ids.size();
		s << ids_vector_size;
		if (ids_vector_size > 0)
		{
			for (auto it = ids.begin(); it != ids.end(); ++it)
			{
				s << *it;
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> zhandui_id;
		int ids_vector_size = s.read_int32();
		ids.clear();
		while (ids_vector_size > 0)
		{
			ids_vector_size--;
			int val;
			s >> val;
			ids.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "zhandui_id", zhandui_id);
		lua::newtable(lua::L);
		for (size_t i = 0; i < ids.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, ids[i]);
		}
		lua::settable(L, -2, "ids");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",zhandui_id=" << zhandui_id;
		buffer << ",ids=[";
		for (size_t i = 0; i < ids.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << ids[i];
		}
		buffer << "]";
	}

public:
	int zhandui_id;
	std::vector<int> ids;
};

#endif	//_DB_MSG_ZHAN_DUI_H_INCLUDED
