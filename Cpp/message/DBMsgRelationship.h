//
//Generated by lua
//2009-2012	(C) XianFeng Inc. Reserved
//

#ifndef _DB_MSG_RELATIONSHIP_H_INCLUDED
#define _DB_MSG_RELATIONSHIP_H_INCLUDED

#include "category.h"
#include "common/MessageEx.h"

struct DBRelationInfo
{
public:
	DBRelationInfo()
	{
		pid = 0;
		gender = 0;
		clazz = 0;
		reborn = 0;
		level = 0;
		zhanli = 0;
		type = 0;
		contactTime = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 24;
		length += sizeof(short) + name.size();
		length += sizeof(short) + gdname.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << pid;
		s << name;
		s << gender;
		s << clazz;
		s << reborn;
		s << level;
		s << gdname;
		s << zhanli;
		s << type;
		s << contactTime;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> pid;
		s >> name;
		s >> gender;
		s >> clazz;
		s >> reborn;
		s >> level;
		s >> gdname;
		s >> zhanli;
		s >> type;
		s >> contactTime;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "clazz", clazz);
		lua::settable(L, -1, "reborn", reborn);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "gdname", gdname);
		lua::settable(L, -1, "zhanli", zhanli);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "contactTime", contactTime);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",gender=" << gender;
		buffer << ",clazz=" << clazz;
		buffer << ",reborn=" << reborn;
		buffer << ",level=" << level;
		buffer << ",gdname=" << gdname;
		buffer << ",zhanli=" << zhanli;
		buffer << ",type=" << type;
		buffer << ",contactTime=" << contactTime;
	}

public:
	int pid;
	std::string name;
	char gender;
	char clazz;
	int reborn;
	int level;
	std::string gdname;
	int zhanli;
	short type;
	int contactTime;
};

class MsgDBRelationshipLoad : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RELATIONSHIP, Id = 1 };

	MsgDBRelationshipLoad() :
		MessageEx(Category, Id)
	{
		pid = 0;
		load_id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRelationshipLoad";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 8;
		length += sizeof(int);
		for (size_t i = 0; i < relations.size(); ++i)
		{
			length += relations[i].getLength(true);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << pid;
		s << load_id;
		int relations_vector_size = (int)relations.size();
		s << relations_vector_size;
		if (relations_vector_size > 0)
		{
			for (auto it = relations.begin(); it != relations.end(); ++it)
			{
				(*it).serialize(s, true);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> pid;
		s >> load_id;
		int relations_vector_size = s.read_int32();
		relations.clear();
		while (relations_vector_size > 0)
		{
			relations_vector_size--;
			DBRelationInfo val;
			val.unserialize(s, true);
			relations.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "load_id", load_id);
		lua::newtable(lua::L);
		for (size_t i = 0; i < relations.size(); ++i)
		{
			relations[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "relations");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",pid=" << pid;
		buffer << ",load_id=" << load_id;
		buffer << ",relations=[";
		for (size_t i = 0; i < relations.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			relations[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int pid;
	int load_id;
	std::vector<DBRelationInfo> relations;
};

class MsgDBRelationshipCreate : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RELATIONSHIP, Id = 2 };

	MsgDBRelationshipCreate() :
		MessageEx(Category, Id)
	{
		pid = 0;
		tgtpid = 0;
		type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRelationshipCreate";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << pid;
		s << tgtpid;
		s << type;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> pid;
		s >> tgtpid;
		s >> type;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "tgtpid", tgtpid);
		lua::settable(L, -1, "type", type);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",pid=" << pid;
		buffer << ",tgtpid=" << tgtpid;
		buffer << ",type=" << type;
	}

public:
	int pid;
	int tgtpid;
	int type;
};

class MsgDBRelationshipDelete : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RELATIONSHIP, Id = 3 };

	MsgDBRelationshipDelete() :
		MessageEx(Category, Id)
	{
		pid = 0;
		tgtpid = 0;
		type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRelationshipDelete";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << pid;
		s << tgtpid;
		s << type;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> pid;
		s >> tgtpid;
		s >> type;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "tgtpid", tgtpid);
		lua::settable(L, -1, "type", type);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",pid=" << pid;
		buffer << ",tgtpid=" << tgtpid;
		buffer << ",type=" << type;
	}

public:
	int pid;
	int tgtpid;
	int type;
};

class MsgDBRelationSearchPlayer : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RELATIONSHIP, Id = 4 };

	MsgDBRelationSearchPlayer() :
		MessageEx(Category, Id)
	{
		pid = 0;
		type = 0;
		step = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRelationSearchPlayer";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 12;
		length += sizeof(short) + name.size();
		length += info.getLength(true);
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << pid;
		s << type;
		s << name;
		s << step;
		info.serialize(s, true);
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> pid;
		s >> type;
		s >> name;
		s >> step;
		info.unserialize(s, true);
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "step", step);
		info.push(L);
		lua::settable(L, -1, "info");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",pid=" << pid;
		buffer << ",type=" << type;
		buffer << ",name=" << name;
		buffer << ",step=" << step;
		buffer << ",info={";
		info.dump(buffer);
		buffer << "}";
	}

public:
	int pid;
	int type;
	std::string name;
	int step;
	DBRelationInfo info;
};

class MsgDBRelationLoadAddPlayer : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RELATIONSHIP, Id = 5 };

	MsgDBRelationLoadAddPlayer() :
		MessageEx(Category, Id)
	{
		pid = 0;
		type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRelationLoadAddPlayer";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 8;
		length += info.getLength(true);
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << pid;
		s << type;
		info.serialize(s, true);
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> pid;
		s >> type;
		info.unserialize(s, true);
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "type", type);
		info.push(L);
		lua::settable(L, -1, "info");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",pid=" << pid;
		buffer << ",type=" << type;
		buffer << ",info={";
		info.dump(buffer);
		buffer << "}";
	}

public:
	int pid;
	int type;
	DBRelationInfo info;
};

class MsgDBRelationRmvAboutPlayer : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RELATIONSHIP, Id = 6 };

	MsgDBRelationRmvAboutPlayer() :
		MessageEx(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRelationRmvAboutPlayer";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 4;
		length += sizeof(int);
		length += vdata.size() * 4;
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << pid;
		int vdata_vector_size = (int)vdata.size();
		s << vdata_vector_size;
		if (vdata_vector_size > 0)
		{
			for (auto it = vdata.begin(); it != vdata.end(); ++it)
			{
				s << *it;
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> pid;
		int vdata_vector_size = s.read_int32();
		vdata.clear();
		while (vdata_vector_size > 0)
		{
			vdata_vector_size--;
			int val;
			s >> val;
			vdata.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::newtable(lua::L);
		for (size_t i = 0; i < vdata.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, vdata[i]);
		}
		lua::settable(L, -2, "vdata");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",pid=" << pid;
		buffer << ",vdata=[";
		for (size_t i = 0; i < vdata.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << vdata[i];
		}
		buffer << "]";
	}

public:
	int pid;
	std::vector<int> vdata;
};

class MsgDBRelationshipUpdateTime : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RELATIONSHIP, Id = 7 };

	MsgDBRelationshipUpdateTime() :
		MessageEx(Category, Id)
	{
		pid = 0;
		tgtpid = 0;
		type = 0;
		contactTime = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRelationshipUpdateTime";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 16;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << pid;
		s << tgtpid;
		s << type;
		s << contactTime;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> pid;
		s >> tgtpid;
		s >> type;
		s >> contactTime;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "tgtpid", tgtpid);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "contactTime", contactTime);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",pid=" << pid;
		buffer << ",tgtpid=" << tgtpid;
		buffer << ",type=" << type;
		buffer << ",contactTime=" << contactTime;
	}

public:
	int pid;
	int tgtpid;
	int type;
	int contactTime;
};

#endif	//_DB_MSG_RELATIONSHIP_H_INCLUDED
