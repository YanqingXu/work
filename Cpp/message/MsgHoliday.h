//
//Generated by lua
//2009-2012	(C) XianFeng Inc. Reserved
//

#ifndef _MSG_HOLIDAY_H_INCLUDED
#define _MSG_HOLIDAY_H_INCLUDED

#include "category.h"
#include "common/Message.h"

struct sHolidayPropInt
{
public:
	sHolidayPropInt()
	{
		prop = 0;
		value = 0;
	}

	size_t getLength(bool ex) const
	{
		return 8;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << prop;
		s << value;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> prop;
		s >> value;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "prop", prop);
		lua::settable(L, -1, "value", value);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "prop=" << prop;
		buffer << ",value=" << value;
	}

public:
	int prop;
	int value;
};

struct sHolidayPropString
{
public:
	sHolidayPropString()
	{
		prop = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 4;
		length += sizeof(short) + value.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << prop;
		s << value;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> prop;
		s >> value;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "prop", prop);
		lua::settable(L, -1, "value", value);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "prop=" << prop;
		buffer << ",value=" << value;
	}

public:
	int prop;
	std::string value;
};

struct sHolidayInfo
{
public:
	sHolidayInfo()
	{
		type = 0;
		begin_show_time = 0;
		end_show_time = 0;
		begin_time = 0;
		end_time = 0;
		state = 0;
		world_id = 0;
		event_id = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 32;
		length += sizeof(short) + str_menu.size();
		length += sizeof(short) + str_title.size();
		length += sizeof(short) + str_content.size();
		length += ex ? sizeof(int) : sizeof(short);
		for (size_t i = 0; i < vint.size(); ++i)
		{
			length += vint[i].getLength(ex);
		}
		length += ex ? sizeof(int) : sizeof(short);
		for (size_t i = 0; i < vstring.size(); ++i)
		{
			length += vstring[i].getLength(ex);
		}
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << type;
		s << begin_show_time;
		s << end_show_time;
		s << begin_time;
		s << end_time;
		s << state;
		s << world_id;
		s << event_id;
		s << str_menu;
		s << str_title;
		s << str_content;
		int vint_vector_size = ex ? (int)vint.size() : (short)vint.size();
		if (ex)
		{
			s << vint_vector_size;
		}
		else
		{
			s << (short)vint_vector_size;
		}
		if (vint_vector_size > 0)
		{
			for (auto it = vint.begin(); it != vint.end(); ++it)
			{
				(*it).serialize(s, ex);
			}
		}
		int vstring_vector_size = ex ? (int)vstring.size() : (short)vstring.size();
		if (ex)
		{
			s << vstring_vector_size;
		}
		else
		{
			s << (short)vstring_vector_size;
		}
		if (vstring_vector_size > 0)
		{
			for (auto it = vstring.begin(); it != vstring.end(); ++it)
			{
				(*it).serialize(s, ex);
			}
		}
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> type;
		s >> begin_show_time;
		s >> end_show_time;
		s >> begin_time;
		s >> end_time;
		s >> state;
		s >> world_id;
		s >> event_id;
		s >> str_menu;
		s >> str_title;
		s >> str_content;
		int vint_vector_size = ex ? s.read_int32() : s.read_int16();
		vint.clear();
		while (vint_vector_size > 0)
		{
			vint_vector_size--;
			sHolidayPropInt val;
			val.unserialize(s, ex);
			vint.push_back(val);
		}
		int vstring_vector_size = ex ? s.read_int32() : s.read_int16();
		vstring.clear();
		while (vstring_vector_size > 0)
		{
			vstring_vector_size--;
			sHolidayPropString val;
			val.unserialize(s, ex);
			vstring.push_back(val);
		}
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "begin_show_time", begin_show_time);
		lua::settable(L, -1, "end_show_time", end_show_time);
		lua::settable(L, -1, "begin_time", begin_time);
		lua::settable(L, -1, "end_time", end_time);
		lua::settable(L, -1, "state", state);
		lua::settable(L, -1, "world_id", world_id);
		lua::settable(L, -1, "event_id", event_id);
		lua::settable(L, -1, "str_menu", str_menu);
		lua::settable(L, -1, "str_title", str_title);
		lua::settable(L, -1, "str_content", str_content);
		lua::newtable(lua::L);
		for (size_t i = 0; i < vint.size(); ++i)
		{
			vint[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "vint");
		lua::newtable(lua::L);
		for (size_t i = 0; i < vstring.size(); ++i)
		{
			vstring[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "vstring");
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
		buffer << ",begin_show_time=" << begin_show_time;
		buffer << ",end_show_time=" << end_show_time;
		buffer << ",begin_time=" << begin_time;
		buffer << ",end_time=" << end_time;
		buffer << ",state=" << state;
		buffer << ",world_id=" << world_id;
		buffer << ",event_id=" << event_id;
		buffer << ",str_menu=" << str_menu;
		buffer << ",str_title=" << str_title;
		buffer << ",str_content=" << str_content;
		buffer << ",vint=[";
		for (size_t i = 0; i < vint.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			vint[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
		buffer << ",vstring=[";
		for (size_t i = 0; i < vstring.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			vstring[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int type;
	int begin_show_time;
	int end_show_time;
	int begin_time;
	int end_time;
	int state;
	int world_id;
	int event_id;
	std::string str_menu;
	std::string str_title;
	std::string str_content;
	std::vector<sHolidayPropInt> vint;
	std::vector<sHolidayPropString> vstring;
};

struct sHolidayGrade
{
public:
	sHolidayGrade()
	{
		index = 0;
		world_id = 0;
		event_id = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 12;
		length += sizeof(short) + str_content.size();
		length += ex ? sizeof(int) : sizeof(short);
		for (size_t i = 0; i < vint.size(); ++i)
		{
			length += vint[i].getLength(ex);
		}
		length += ex ? sizeof(int) : sizeof(short);
		for (size_t i = 0; i < vstring.size(); ++i)
		{
			length += vstring[i].getLength(ex);
		}
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << index;
		s << world_id;
		s << event_id;
		s << str_content;
		int vint_vector_size = ex ? (int)vint.size() : (short)vint.size();
		if (ex)
		{
			s << vint_vector_size;
		}
		else
		{
			s << (short)vint_vector_size;
		}
		if (vint_vector_size > 0)
		{
			for (auto it = vint.begin(); it != vint.end(); ++it)
			{
				(*it).serialize(s, ex);
			}
		}
		int vstring_vector_size = ex ? (int)vstring.size() : (short)vstring.size();
		if (ex)
		{
			s << vstring_vector_size;
		}
		else
		{
			s << (short)vstring_vector_size;
		}
		if (vstring_vector_size > 0)
		{
			for (auto it = vstring.begin(); it != vstring.end(); ++it)
			{
				(*it).serialize(s, ex);
			}
		}
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> index;
		s >> world_id;
		s >> event_id;
		s >> str_content;
		int vint_vector_size = ex ? s.read_int32() : s.read_int16();
		vint.clear();
		while (vint_vector_size > 0)
		{
			vint_vector_size--;
			sHolidayPropInt val;
			val.unserialize(s, ex);
			vint.push_back(val);
		}
		int vstring_vector_size = ex ? s.read_int32() : s.read_int16();
		vstring.clear();
		while (vstring_vector_size > 0)
		{
			vstring_vector_size--;
			sHolidayPropString val;
			val.unserialize(s, ex);
			vstring.push_back(val);
		}
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "index", index);
		lua::settable(L, -1, "world_id", world_id);
		lua::settable(L, -1, "event_id", event_id);
		lua::settable(L, -1, "str_content", str_content);
		lua::newtable(lua::L);
		for (size_t i = 0; i < vint.size(); ++i)
		{
			vint[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "vint");
		lua::newtable(lua::L);
		for (size_t i = 0; i < vstring.size(); ++i)
		{
			vstring[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "vstring");
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "index=" << index;
		buffer << ",world_id=" << world_id;
		buffer << ",event_id=" << event_id;
		buffer << ",str_content=" << str_content;
		buffer << ",vint=[";
		for (size_t i = 0; i < vint.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			vint[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
		buffer << ",vstring=[";
		for (size_t i = 0; i < vstring.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			vstring[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int index;
	int world_id;
	int event_id;
	std::string str_content;
	std::vector<sHolidayPropInt> vint;
	std::vector<sHolidayPropString> vstring;
};

struct sHolidayItem
{
public:
	sHolidayItem()
	{
		index = 0;
		type = 0;
		static_id = 0;
		bind = 0;
		count = 0;
		world_id = 0;
		event_id = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 28;
		length += ex ? sizeof(int) : sizeof(short);
		for (size_t i = 0; i < vint.size(); ++i)
		{
			length += vint[i].getLength(ex);
		}
		length += ex ? sizeof(int) : sizeof(short);
		for (size_t i = 0; i < vstring.size(); ++i)
		{
			length += vstring[i].getLength(ex);
		}
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << index;
		s << type;
		s << static_id;
		s << bind;
		s << count;
		s << world_id;
		s << event_id;
		int vint_vector_size = ex ? (int)vint.size() : (short)vint.size();
		if (ex)
		{
			s << vint_vector_size;
		}
		else
		{
			s << (short)vint_vector_size;
		}
		if (vint_vector_size > 0)
		{
			for (auto it = vint.begin(); it != vint.end(); ++it)
			{
				(*it).serialize(s, ex);
			}
		}
		int vstring_vector_size = ex ? (int)vstring.size() : (short)vstring.size();
		if (ex)
		{
			s << vstring_vector_size;
		}
		else
		{
			s << (short)vstring_vector_size;
		}
		if (vstring_vector_size > 0)
		{
			for (auto it = vstring.begin(); it != vstring.end(); ++it)
			{
				(*it).serialize(s, ex);
			}
		}
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> index;
		s >> type;
		s >> static_id;
		s >> bind;
		s >> count;
		s >> world_id;
		s >> event_id;
		int vint_vector_size = ex ? s.read_int32() : s.read_int16();
		vint.clear();
		while (vint_vector_size > 0)
		{
			vint_vector_size--;
			sHolidayPropInt val;
			val.unserialize(s, ex);
			vint.push_back(val);
		}
		int vstring_vector_size = ex ? s.read_int32() : s.read_int16();
		vstring.clear();
		while (vstring_vector_size > 0)
		{
			vstring_vector_size--;
			sHolidayPropString val;
			val.unserialize(s, ex);
			vstring.push_back(val);
		}
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "index", index);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "static_id", static_id);
		lua::settable(L, -1, "bind", bind);
		lua::settable(L, -1, "count", count);
		lua::settable(L, -1, "world_id", world_id);
		lua::settable(L, -1, "event_id", event_id);
		lua::newtable(lua::L);
		for (size_t i = 0; i < vint.size(); ++i)
		{
			vint[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "vint");
		lua::newtable(lua::L);
		for (size_t i = 0; i < vstring.size(); ++i)
		{
			vstring[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "vstring");
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "index=" << index;
		buffer << ",type=" << type;
		buffer << ",static_id=" << static_id;
		buffer << ",bind=" << bind;
		buffer << ",count=" << count;
		buffer << ",world_id=" << world_id;
		buffer << ",event_id=" << event_id;
		buffer << ",vint=[";
		for (size_t i = 0; i < vint.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			vint[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
		buffer << ",vstring=[";
		for (size_t i = 0; i < vstring.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			vstring[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int index;
	int type;
	int static_id;
	int bind;
	int count;
	int world_id;
	int event_id;
	std::vector<sHolidayPropInt> vint;
	std::vector<sHolidayPropString> vstring;
};

class MsgHolidayInfoNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_HOLIDAY, Id = 1 };

	MsgHolidayInfoNotify() :
		Message(Category, Id)
	{
		switch_id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgHolidayInfoNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += info.getLength(false);
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << switch_id;
		info.serialize(s, false);
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> switch_id;
		info.unserialize(s, false);
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "switch_id", switch_id);
		info.push(L);
		lua::settable(L, -1, "info");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "switch_id=" << switch_id;
		buffer << ",info={";
		info.dump(buffer);
		buffer << "}";
	}

public:
	int switch_id;
	sHolidayInfo info;
};

class MsgHolidayGradeNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_HOLIDAY, Id = 2 };

	MsgHolidayGradeNotify() :
		Message(Category, Id)
	{
		switch_id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgHolidayGradeNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short);
		for (size_t i = 0; i < vgrade.size(); ++i)
		{
			length += vgrade[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << switch_id;
		short vgrade_vector_size = (short)vgrade.size();
		s << vgrade_vector_size;
		if (vgrade_vector_size > 0)
		{
			for (auto it = vgrade.begin(); it != vgrade.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> switch_id;
		int vgrade_vector_size = s.read_int16();
		vgrade.clear();
		while (vgrade_vector_size > 0)
		{
			vgrade_vector_size--;
			sHolidayGrade val;
			val.unserialize(s, false);
			vgrade.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "switch_id", switch_id);
		lua::newtable(lua::L);
		for (size_t i = 0; i < vgrade.size(); ++i)
		{
			vgrade[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "vgrade");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "switch_id=" << switch_id;
		buffer << ",vgrade=[";
		for (size_t i = 0; i < vgrade.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			vgrade[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int switch_id;
	std::vector<sHolidayGrade> vgrade;
};

class MsgHolidayItemNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_HOLIDAY, Id = 3 };

	MsgHolidayItemNotify() :
		Message(Category, Id)
	{
		switch_id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgHolidayItemNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short);
		for (size_t i = 0; i < vitem.size(); ++i)
		{
			length += vitem[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << switch_id;
		short vitem_vector_size = (short)vitem.size();
		s << vitem_vector_size;
		if (vitem_vector_size > 0)
		{
			for (auto it = vitem.begin(); it != vitem.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> switch_id;
		int vitem_vector_size = s.read_int16();
		vitem.clear();
		while (vitem_vector_size > 0)
		{
			vitem_vector_size--;
			sHolidayItem val;
			val.unserialize(s, false);
			vitem.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "switch_id", switch_id);
		lua::newtable(lua::L);
		for (size_t i = 0; i < vitem.size(); ++i)
		{
			vitem[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "vitem");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "switch_id=" << switch_id;
		buffer << ",vitem=[";
		for (size_t i = 0; i < vitem.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			vitem[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int switch_id;
	std::vector<sHolidayItem> vitem;
};

class MsgHolidayRemoveNofity : public Message
{
public:
	enum { Category = MSG_CATEGORY_HOLIDAY, Id = 4 };

	MsgHolidayRemoveNofity() :
		Message(Category, Id)
	{
		switch_id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgHolidayRemoveNofity";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << switch_id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> switch_id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "switch_id", switch_id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "switch_id=" << switch_id;
	}

public:
	int switch_id;
};

class MsgHolidayRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_HOLIDAY, Id = 5 };

	MsgHolidayRequest() :
		Message(Category, Id)
	{
		switch_id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgHolidayRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << switch_id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> switch_id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "switch_id", switch_id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "switch_id=" << switch_id;
	}

public:
	int switch_id;
};

class MsgHolidayResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_HOLIDAY, Id = 6 };

	MsgHolidayResponse() :
		Message(Category, Id)
	{
		switch_id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgHolidayResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << switch_id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> switch_id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "switch_id", switch_id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "switch_id=" << switch_id;
	}

public:
	int switch_id;
};

class MsgHolidayRewardRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_HOLIDAY, Id = 11 };

	MsgHolidayRewardRequest() :
		Message(Category, Id)
	{
		switch_id = 0;
		index = 0;
		flag = 0;
	}

	virtual const char *getName() const
	{
		return "MsgHolidayRewardRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << switch_id;
		s << index;
		s << flag;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> switch_id;
		s >> index;
		s >> flag;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "switch_id", switch_id);
		lua::settable(L, -1, "index", index);
		lua::settable(L, -1, "flag", flag);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "switch_id=" << switch_id;
		buffer << ",index=" << index;
		buffer << ",flag=" << flag;
	}

public:
	int switch_id;
	int index;
	int flag;
};

class MsgHolidayRewardResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_HOLIDAY, Id = 12 };

	MsgHolidayRewardResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		switch_id = 0;
		index = 0;
		flag = 0;
	}

	virtual const char *getName() const
	{
		return "MsgHolidayRewardResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 14;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << switch_id;
		s << index;
		s << flag;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> switch_id;
		s >> index;
		s >> flag;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "switch_id", switch_id);
		lua::settable(L, -1, "index", index);
		lua::settable(L, -1, "flag", flag);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",switch_id=" << switch_id;
		buffer << ",index=" << index;
		buffer << ",flag=" << flag;
	}

public:
	short errcode;
	int switch_id;
	int index;
	int flag;
};

class MsgHolidayOperateRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_HOLIDAY, Id = 18 };

	MsgHolidayOperateRequest() :
		Message(Category, Id)
	{
		switch_id = 0;
		datax = 0;
		datay = 0;
		dataz = 0;
	}

	virtual const char *getName() const
	{
		return "MsgHolidayOperateRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 16;
		length += sizeof(short) + fun_name.size();
		length += sizeof(short) + datas.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << switch_id;
		s << fun_name;
		s << datax;
		s << datay;
		s << dataz;
		s << datas;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> switch_id;
		s >> fun_name;
		s >> datax;
		s >> datay;
		s >> dataz;
		s >> datas;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "switch_id", switch_id);
		lua::settable(L, -1, "fun_name", fun_name);
		lua::settable(L, -1, "datax", datax);
		lua::settable(L, -1, "datay", datay);
		lua::settable(L, -1, "dataz", dataz);
		lua::settable(L, -1, "datas", datas);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "switch_id=" << switch_id;
		buffer << ",fun_name=" << fun_name;
		buffer << ",datax=" << datax;
		buffer << ",datay=" << datay;
		buffer << ",dataz=" << dataz;
		buffer << ",datas=" << datas;
	}

public:
	int switch_id;
	std::string fun_name;
	int datax;
	int datay;
	int dataz;
	std::string datas;
};

class MsgHolidayOperateResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_HOLIDAY, Id = 19 };

	MsgHolidayOperateResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		switch_id = 0;
		datax = 0;
		datay = 0;
		dataz = 0;
	}

	virtual const char *getName() const
	{
		return "MsgHolidayOperateResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 18;
		length += sizeof(short) + fun_name.size();
		length += sizeof(short) + datas.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << switch_id;
		s << fun_name;
		s << datax;
		s << datay;
		s << dataz;
		s << datas;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> switch_id;
		s >> fun_name;
		s >> datax;
		s >> datay;
		s >> dataz;
		s >> datas;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "switch_id", switch_id);
		lua::settable(L, -1, "fun_name", fun_name);
		lua::settable(L, -1, "datax", datax);
		lua::settable(L, -1, "datay", datay);
		lua::settable(L, -1, "dataz", dataz);
		lua::settable(L, -1, "datas", datas);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",switch_id=" << switch_id;
		buffer << ",fun_name=" << fun_name;
		buffer << ",datax=" << datax;
		buffer << ",datay=" << datay;
		buffer << ",dataz=" << dataz;
		buffer << ",datas=" << datas;
	}

public:
	short errcode;
	int switch_id;
	std::string fun_name;
	int datax;
	int datay;
	int dataz;
	std::string datas;
};

class MsgHolidayOperateNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_HOLIDAY, Id = 20 };

	MsgHolidayOperateNotify() :
		Message(Category, Id)
	{
		switch_id = 0;
		type = 0;
		index = 0;
		flag = 0;
	}

	virtual const char *getName() const
	{
		return "MsgHolidayOperateNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 20;
		length += sizeof(short);
		length += vdata.size() * 4;
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << switch_id;
		s << type;
		s << index;
		s << flag;
		short vdata_vector_size = (short)vdata.size();
		s << vdata_vector_size;
		if (vdata_vector_size > 0)
		{
			for (auto it = vdata.begin(); it != vdata.end(); ++it)
			{
				s << *it;
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> switch_id;
		s >> type;
		s >> index;
		s >> flag;
		int vdata_vector_size = s.read_int16();
		vdata.clear();
		while (vdata_vector_size > 0)
		{
			vdata_vector_size--;
			int val;
			s >> val;
			vdata.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "switch_id", switch_id);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "index", index);
		lua::settable(L, -1, "flag", flag);
		lua::newtable(lua::L);
		for (size_t i = 0; i < vdata.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, vdata[i]);
		}
		lua::settable(L, -2, "vdata");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "switch_id=" << switch_id;
		buffer << ",type=" << type;
		buffer << ",index=" << index;
		buffer << ",flag=" << flag;
		buffer << ",vdata=[";
		for (size_t i = 0; i < vdata.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << vdata[i];
		}
		buffer << "]";
	}

public:
	int switch_id;
	int type;
	int index;
	long long flag;
	std::vector<int> vdata;
};

#endif	//_MSG_HOLIDAY_H_INCLUDED
