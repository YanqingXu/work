//
//Generated by lua
//2009-2012	(C) XianFeng Inc. Reserved
//

#ifndef _MSG_ITEM_H_INCLUDED
#define _MSG_ITEM_H_INCLUDED

#include "category.h"
#include "common/Message.h"

struct ItemBase
{
public:
	ItemBase()
	{
		sid = 0;
		count = 0;
	}

	size_t getLength(bool ex) const
	{
		return 8;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << sid;
		s << count;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> sid;
		s >> count;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "count", count);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "sid=" << sid;
		buffer << ",count=" << count;
	}

public:
	int sid;
	int count;
};

struct ItemBase64
{
public:
	ItemBase64()
	{
		sid = 0;
		countLow = 0;
		countHigh = 0;
	}

	size_t getLength(bool ex) const
	{
		return 12;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << sid;
		s << countLow;
		s << countHigh;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> sid;
		s >> countLow;
		s >> countHigh;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "countLow", countLow);
		lua::settable(L, -1, "countHigh", countHigh);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "sid=" << sid;
		buffer << ",countLow=" << countLow;
		buffer << ",countHigh=" << countHigh;
	}

public:
	int sid;
	int countLow;
	int countHigh;
};

struct ItemInfo
{
public:
	ItemInfo()
	{
		iid = 0;
		sid = 0;
		bind = 0;
		count = 0;
		position = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 14;
		length += sizeof(short) + firstowner.size();
		length += sizeof(short) + appraiser.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << iid;
		s << sid;
		s << bind;
		s << count;
		s << position;
		s << firstowner;
		s << appraiser;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> iid;
		s >> sid;
		s >> bind;
		s >> count;
		s >> position;
		s >> firstowner;
		s >> appraiser;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "bind", bind);
		lua::settable(L, -1, "count", count);
		lua::settable(L, -1, "position", position);
		lua::settable(L, -1, "firstowner", firstowner);
		lua::settable(L, -1, "appraiser", appraiser);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",sid=" << sid;
		buffer << ",bind=" << bind;
		buffer << ",count=" << count;
		buffer << ",position=" << position;
		buffer << ",firstowner=" << firstowner;
		buffer << ",appraiser=" << appraiser;
	}

public:
	int iid;
	int sid;
	short bind;
	short count;
	short position;
	std::string firstowner;
	std::string appraiser;
};

struct ItemExData
{
public:
	ItemExData()
	{
		nIdx = 0;
		data = 0;
	}

	size_t getLength(bool ex) const
	{
		return 6;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << nIdx;
		s << data;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> nIdx;
		s >> data;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "nIdx", nIdx);
		lua::settable(L, -1, "data", data);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "nIdx=" << nIdx;
		buffer << ",data=" << data;
	}

public:
	short nIdx;
	int data;
};

class MsgItemInfoNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 1 };

	MsgItemInfoNotify() :
		Message(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemInfoNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short);
		for (size_t i = 0; i < item_list.size(); ++i)
		{
			length += item_list[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		short item_list_vector_size = (short)item_list.size();
		s << item_list_vector_size;
		if (item_list_vector_size > 0)
		{
			for (auto it = item_list.begin(); it != item_list.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		int item_list_vector_size = s.read_int16();
		item_list.clear();
		while (item_list_vector_size > 0)
		{
			item_list_vector_size--;
			ItemInfo val;
			val.unserialize(s, false);
			item_list.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::newtable(lua::L);
		for (size_t i = 0; i < item_list.size(); ++i)
		{
			item_list[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "item_list");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",item_list=[";
		for (size_t i = 0; i < item_list.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			item_list[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int pid;
	std::vector<ItemInfo> item_list;
};

class MsgItemAddNotifyEx : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 4 };

	MsgItemAddNotifyEx() :
		Message(Category, Id)
	{
		opcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemAddNotifyEx";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += iteminfo.getLength(false);
		length += sizeof(short);
		for (size_t i = 0; i < data.size(); ++i)
		{
			length += data[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		iteminfo.serialize(s, false);
		short data_vector_size = (short)data.size();
		s << data_vector_size;
		if (data_vector_size > 0)
		{
			for (auto it = data.begin(); it != data.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		iteminfo.unserialize(s, false);
		int data_vector_size = s.read_int16();
		data.clear();
		while (data_vector_size > 0)
		{
			data_vector_size--;
			ItemExData val;
			val.unserialize(s, false);
			data.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		iteminfo.push(L);
		lua::settable(L, -1, "iteminfo");
		lua::newtable(lua::L);
		for (size_t i = 0; i < data.size(); ++i)
		{
			data[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "data");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",iteminfo={";
		iteminfo.dump(buffer);
		buffer << "}";
		buffer << ",data=[";
		for (size_t i = 0; i < data.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			data[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int opcode;
	ItemInfo iteminfo;
	std::vector<ItemExData> data;
};

class MsgItemRmvNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 5 };

	MsgItemRmvNotify() :
		Message(Category, Id)
	{
		opcode = 0;
		iid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemRmvNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		s << iid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		s >> iid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "iid", iid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",iid=" << iid;
	}

public:
	int opcode;
	int iid;
};

class MsgItemUpdItemBaseNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 6 };

	MsgItemUpdItemBaseNotify() :
		Message(Category, Id)
	{
		opcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemUpdItemBaseNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += item.getLength(false);
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		item.serialize(s, false);
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		item.unserialize(s, false);
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		item.push(L);
		lua::settable(L, -1, "item");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",item={";
		item.dump(buffer);
		buffer << "}";
	}

public:
	int opcode;
	ItemInfo item;
};

class MsgItemUpdExDataNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 7 };

	MsgItemUpdExDataNotify() :
		Message(Category, Id)
	{
		opcode = 0;
		iid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemUpdExDataNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 8;
		length += sizeof(short);
		for (size_t i = 0; i < data.size(); ++i)
		{
			length += data[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		s << iid;
		short data_vector_size = (short)data.size();
		s << data_vector_size;
		if (data_vector_size > 0)
		{
			for (auto it = data.begin(); it != data.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		s >> iid;
		int data_vector_size = s.read_int16();
		data.clear();
		while (data_vector_size > 0)
		{
			data_vector_size--;
			ItemExData val;
			val.unserialize(s, false);
			data.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "iid", iid);
		lua::newtable(lua::L);
		for (size_t i = 0; i < data.size(); ++i)
		{
			data[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "data");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",iid=" << iid;
		buffer << ",data=[";
		for (size_t i = 0; i < data.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			data[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int opcode;
	int iid;
	std::vector<ItemExData> data;
};

class MsgItemInfoDataGetRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 8 };

	MsgItemInfoDataGetRequest() :
		Message(Category, Id)
	{
		eid = 0;
		pid = 0;
		iid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemInfoDataGetRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		s << pid;
		s << iid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		s >> pid;
		s >> iid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "iid", iid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
		buffer << ",pid=" << pid;
		buffer << ",iid=" << iid;
	}

public:
	int eid;
	int pid;
	int iid;
};

class MsgItemInfoDataGetResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 9 };

	MsgItemInfoDataGetResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		eid = 0;
		pid = 0;
		iid = 0;
		pos = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemInfoDataGetResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 18;
		length += sizeof(short);
		for (size_t i = 0; i < data.size(); ++i)
		{
			length += data[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << eid;
		s << pid;
		s << iid;
		s << pos;
		short data_vector_size = (short)data.size();
		s << data_vector_size;
		if (data_vector_size > 0)
		{
			for (auto it = data.begin(); it != data.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> eid;
		s >> pid;
		s >> iid;
		s >> pos;
		int data_vector_size = s.read_int16();
		data.clear();
		while (data_vector_size > 0)
		{
			data_vector_size--;
			ItemExData val;
			val.unserialize(s, false);
			data.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "pos", pos);
		lua::newtable(lua::L);
		for (size_t i = 0; i < data.size(); ++i)
		{
			data[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "data");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",eid=" << eid;
		buffer << ",pid=" << pid;
		buffer << ",iid=" << iid;
		buffer << ",pos=" << pos;
		buffer << ",data=[";
		for (size_t i = 0; i < data.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			data[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	short errcode;
	int eid;
	int pid;
	int iid;
	int pos;
	std::vector<ItemExData> data;
};

class MsgItemUpdCountNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 10 };

	MsgItemUpdCountNotify() :
		Message(Category, Id)
	{
		opcode = 0;
		iid = 0;
		count = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemUpdCountNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		s << iid;
		s << count;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		s >> iid;
		s >> count;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "count", count);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",iid=" << iid;
		buffer << ",count=" << count;
	}

public:
	int opcode;
	int iid;
	short count;
};

class MsgItemUpdPositionNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 11 };

	MsgItemUpdPositionNotify() :
		Message(Category, Id)
	{
		opcode = 0;
		iid = 0;
		position = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemUpdPositionNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		s << iid;
		s << position;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		s >> iid;
		s >> position;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "position", position);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",iid=" << iid;
		buffer << ",position=" << position;
	}

public:
	int opcode;
	int iid;
	short position;
};

class MsgItemUpdSidNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 12 };

	MsgItemUpdSidNotify() :
		Message(Category, Id)
	{
		iid = 0;
		opcode = 0;
		sid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemUpdSidNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		s << opcode;
		s << sid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		s >> opcode;
		s >> sid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "sid", sid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",opcode=" << opcode;
		buffer << ",sid=" << sid;
	}

public:
	int iid;
	int opcode;
	int sid;
};

class MsgItemUpdDataNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 13 };

	MsgItemUpdDataNotify() :
		Message(Category, Id)
	{
		opcode = 0;
		iid = 0;
		idx = 0;
		data = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemUpdDataNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 14;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		s << iid;
		s << idx;
		s << data;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		s >> iid;
		s >> idx;
		s >> data;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "idx", idx);
		lua::settable(L, -1, "data", data);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",iid=" << iid;
		buffer << ",idx=" << idx;
		buffer << ",data=" << data;
	}

public:
	int opcode;
	int iid;
	short idx;
	int data;
};

class MsgItemResolveRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 15 };

	MsgItemResolveRequest() :
		Message(Category, Id)
	{
		iid = 0;
		bagtype = 0;
		count = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemResolveRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		s << bagtype;
		s << count;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		s >> bagtype;
		s >> count;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "bagtype", bagtype);
		lua::settable(L, -1, "count", count);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",bagtype=" << bagtype;
		buffer << ",count=" << count;
	}

public:
	int iid;
	short bagtype;
	int count;
};

class MsgItemOperationNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 20 };

	MsgItemOperationNotify() :
		Message(Category, Id)
	{
		iid = 0;
		opcode = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemOperationNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		s << opcode;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		s >> opcode;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",opcode=" << opcode;
		buffer << ",errcode=" << errcode;
	}

public:
	int iid;
	int opcode;
	short errcode;
};

class MsgItemOperationRequestBuy : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 22 };

	MsgItemOperationRequestBuy() :
		Message(Category, Id)
	{
		iid = 0;
		count = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemOperationRequestBuy";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		s << count;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		s >> count;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "count", count);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",count=" << count;
	}

public:
	int iid;
	short count;
};

class MsgItemOperationRequestDelete : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 23 };

	MsgItemOperationRequestDelete() :
		Message(Category, Id)
	{
		iid = 0;
		count = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemOperationRequestDelete";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		s << count;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		s >> count;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "count", count);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",count=" << count;
	}

public:
	int iid;
	short count;
};

class MsgItemOperationRequestMerge : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 27 };

	MsgItemOperationRequestMerge() :
		Message(Category, Id)
	{
		sid = 0;
		usevcoin = 0;
		iid = 0;
		usepoints = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemOperationRequestMerge";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << sid;
		s << usevcoin;
		s << iid;
		s << usepoints;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> sid;
		s >> usevcoin;
		s >> iid;
		s >> usepoints;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "usevcoin", usevcoin);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "usepoints", usepoints);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "sid=" << sid;
		buffer << ",usevcoin=" << usevcoin;
		buffer << ",iid=" << iid;
		buffer << ",usepoints=" << usepoints;
	}

public:
	int sid;
	short usevcoin;
	int iid;
	short usepoints;
};

class MsgItemOperationRequestStoneTrans : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 28 };

	MsgItemOperationRequestStoneTrans() :
		Message(Category, Id)
	{
		iid = 0;
		tgtsid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemOperationRequestStoneTrans";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		s << tgtsid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		s >> tgtsid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "tgtsid", tgtsid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",tgtsid=" << tgtsid;
	}

public:
	int iid;
	int tgtsid;
};

class MsgItemOperationRequestChangeSpecialAttr : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 30 };

	MsgItemOperationRequestChangeSpecialAttr() :
		Message(Category, Id)
	{
		iid = 0;
		tgtiid = 0;
		usevcoin = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemOperationRequestChangeSpecialAttr";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		s << tgtiid;
		s << usevcoin;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		s >> tgtiid;
		s >> usevcoin;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "tgtiid", tgtiid);
		lua::settable(L, -1, "usevcoin", usevcoin);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",tgtiid=" << tgtiid;
		buffer << ",usevcoin=" << usevcoin;
	}

public:
	int iid;
	int tgtiid;
	short usevcoin;
};

class MsgItemOperationRequestUse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 32 };

	MsgItemOperationRequestUse() :
		Message(Category, Id)
	{
		iid = 0;
		eid = 0;
		cnt = 0;
		type = 0;
		pos = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemOperationRequestUse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 18;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		s << eid;
		s << cnt;
		s << type;
		s << pos;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		s >> eid;
		s >> cnt;
		s >> type;
		s >> pos;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "cnt", cnt);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "pos", pos);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",eid=" << eid;
		buffer << ",cnt=" << cnt;
		buffer << ",type=" << type;
		buffer << ",pos=" << pos;
	}

public:
	int iid;
	int eid;
	int cnt;
	short type;
	int pos;
};

class MsgItemOperationRequestSetPosition : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 33 };

	MsgItemOperationRequestSetPosition() :
		Message(Category, Id)
	{
		iid = 0;
		position = 0;
		exchange = 0;
		flag = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemOperationRequestSetPosition";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		s << position;
		s << exchange;
		s << flag;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		s >> position;
		s >> exchange;
		s >> flag;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "position", position);
		lua::settable(L, -1, "exchange", exchange);
		lua::settable(L, -1, "flag", flag);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",position=" << position;
		buffer << ",exchange=" << exchange;
		buffer << ",flag=" << flag;
	}

public:
	int iid;
	int position;
	short exchange;
	short flag;
};

class MsgItemOperationRequestChangeEnhance : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 34 };

	MsgItemOperationRequestChangeEnhance() :
		Message(Category, Id)
	{
		iid = 0;
		tgtiid = 0;
		usevcoin = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemOperationRequestChangeEnhance";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		s << tgtiid;
		s << usevcoin;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		s >> tgtiid;
		s >> usevcoin;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "tgtiid", tgtiid);
		lua::settable(L, -1, "usevcoin", usevcoin);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",tgtiid=" << tgtiid;
		buffer << ",usevcoin=" << usevcoin;
	}

public:
	int iid;
	int tgtiid;
	short usevcoin;
};

class MsgItemOperationRequestChangeEvaluate : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 35 };

	MsgItemOperationRequestChangeEvaluate() :
		Message(Category, Id)
	{
		iid = 0;
		tgtiid = 0;
		usevcoin = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemOperationRequestChangeEvaluate";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		s << tgtiid;
		s << usevcoin;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		s >> tgtiid;
		s >> usevcoin;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "tgtiid", tgtiid);
		lua::settable(L, -1, "usevcoin", usevcoin);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",tgtiid=" << tgtiid;
		buffer << ",usevcoin=" << usevcoin;
	}

public:
	int iid;
	int tgtiid;
	short usevcoin;
};

class MsgItemOperationRequestClearSpecialAttr : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 36 };

	MsgItemOperationRequestClearSpecialAttr() :
		Message(Category, Id)
	{
		iid = 0;
		usevcoin = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemOperationRequestClearSpecialAttr";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		s << usevcoin;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		s >> usevcoin;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "usevcoin", usevcoin);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",usevcoin=" << usevcoin;
	}

public:
	int iid;
	short usevcoin;
};

class MsgItemOperationRequestPile : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 37 };

	MsgItemOperationRequestPile() :
		Message(Category, Id)
	{
		sid = 0;
		bagtype = 0;
		num = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemOperationRequestPile";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << sid;
		s << bagtype;
		s << num;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> sid;
		s >> bagtype;
		s >> num;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "bagtype", bagtype);
		lua::settable(L, -1, "num", num);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "sid=" << sid;
		buffer << ",bagtype=" << bagtype;
		buffer << ",num=" << num;
	}

public:
	int sid;
	int bagtype;
	int num;
};

class MsgItemOperationResponsePile : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 38 };

	MsgItemOperationResponsePile() :
		Message(Category, Id)
	{
		num = 0;
		errorcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemOperationResponsePile";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << num;
		s << errorcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> num;
		s >> errorcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "num", num);
		lua::settable(L, -1, "errorcode", errorcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "num=" << num;
		buffer << ",errorcode=" << errorcode;
	}

public:
	int num;
	int errorcode;
};

class MsgItemOperationMovePositionRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 39 };

	MsgItemOperationMovePositionRequest() :
		Message(Category, Id)
	{
		iid = 0;
		position = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemOperationMovePositionRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		s << position;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		s >> position;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "position", position);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",position=" << position;
	}

public:
	int iid;
	int position;
};

class MsgItemOperationMovePositionResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 40 };

	MsgItemOperationMovePositionResponse() :
		Message(Category, Id)
	{
		errorCode = 0;
		iidNew = 0;
		positionNew = 0;
		iidOld = 0;
		positionOld = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemOperationMovePositionResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 20;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errorCode;
		s << iidNew;
		s << positionNew;
		s << iidOld;
		s << positionOld;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errorCode;
		s >> iidNew;
		s >> positionNew;
		s >> iidOld;
		s >> positionOld;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errorCode", errorCode);
		lua::settable(L, -1, "iidNew", iidNew);
		lua::settable(L, -1, "positionNew", positionNew);
		lua::settable(L, -1, "iidOld", iidOld);
		lua::settable(L, -1, "positionOld", positionOld);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errorCode=" << errorCode;
		buffer << ",iidNew=" << iidNew;
		buffer << ",positionNew=" << positionNew;
		buffer << ",iidOld=" << iidOld;
		buffer << ",positionOld=" << positionOld;
	}

public:
	int errorCode;
	int iidNew;
	int positionNew;
	int iidOld;
	int positionOld;
};

class MsgItemOperationRequestUpgrade : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 41 };

	MsgItemOperationRequestUpgrade() :
		Message(Category, Id)
	{
		iid = 0;
		secondiid = 0;
		usevcoin = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemOperationRequestUpgrade";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		s << secondiid;
		s << usevcoin;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		s >> secondiid;
		s >> usevcoin;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "secondiid", secondiid);
		lua::settable(L, -1, "usevcoin", usevcoin);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",secondiid=" << secondiid;
		buffer << ",usevcoin=" << usevcoin;
	}

public:
	int iid;
	int secondiid;
	short usevcoin;
};

class MsgItemOperationRequestEnhance : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 42 };

	MsgItemOperationRequestEnhance() :
		Message(Category, Id)
	{
		iid = 0;
		enhancetype = 0;
		isProtect = 0;
		usevcoin = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemOperationRequestEnhance";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 14;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		s << enhancetype;
		s << isProtect;
		s << usevcoin;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		s >> enhancetype;
		s >> isProtect;
		s >> usevcoin;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "enhancetype", enhancetype);
		lua::settable(L, -1, "isProtect", isProtect);
		lua::settable(L, -1, "usevcoin", usevcoin);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",enhancetype=" << enhancetype;
		buffer << ",isProtect=" << isProtect;
		buffer << ",usevcoin=" << usevcoin;
	}

public:
	int iid;
	int enhancetype;
	int isProtect;
	short usevcoin;
};

class MsgItemOperationRequestEvaluate : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 43 };

	MsgItemOperationRequestEvaluate() :
		Message(Category, Id)
	{
		iid = 0;
		usevcoin = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemOperationRequestEvaluate";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		s << usevcoin;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		s >> usevcoin;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "usevcoin", usevcoin);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",usevcoin=" << usevcoin;
	}

public:
	int iid;
	short usevcoin;
};

class MsgItemOperationRequestClearItem : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 44 };

	MsgItemOperationRequestClearItem() :
		Message(Category, Id)
	{
		iid = 0;
		block1 = 0;
		block2 = 0;
		block3 = 0;
		usevcoin = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemOperationRequestClearItem";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 18;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		s << block1;
		s << block2;
		s << block3;
		s << usevcoin;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		s >> block1;
		s >> block2;
		s >> block3;
		s >> usevcoin;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "block1", block1);
		lua::settable(L, -1, "block2", block2);
		lua::settable(L, -1, "block3", block3);
		lua::settable(L, -1, "usevcoin", usevcoin);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",block1=" << block1;
		buffer << ",block2=" << block2;
		buffer << ",block3=" << block3;
		buffer << ",usevcoin=" << usevcoin;
	}

public:
	int iid;
	int block1;
	int block2;
	int block3;
	short usevcoin;
};

class MsgItemOperationRequestReborn : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 45 };

	MsgItemOperationRequestReborn() :
		Message(Category, Id)
	{
		iidtgt = 0;
		iidreq = 0;
		usevcoin = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemOperationRequestReborn";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iidtgt;
		s << iidreq;
		s << usevcoin;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iidtgt;
		s >> iidreq;
		s >> usevcoin;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iidtgt", iidtgt);
		lua::settable(L, -1, "iidreq", iidreq);
		lua::settable(L, -1, "usevcoin", usevcoin);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iidtgt=" << iidtgt;
		buffer << ",iidreq=" << iidreq;
		buffer << ",usevcoin=" << usevcoin;
	}

public:
	int iidtgt;
	int iidreq;
	short usevcoin;
};

class MsgItemOperationRequestPerfectEnhance : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 46 };

	MsgItemOperationRequestPerfectEnhance() :
		Message(Category, Id)
	{
		iid = 0;
		reqtype = 0;
		usevcoin = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemOperationRequestPerfectEnhance";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		s << reqtype;
		s << usevcoin;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		s >> reqtype;
		s >> usevcoin;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "reqtype", reqtype);
		lua::settable(L, -1, "usevcoin", usevcoin);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",reqtype=" << reqtype;
		buffer << ",usevcoin=" << usevcoin;
	}

public:
	int iid;
	int reqtype;
	short usevcoin;
};

class MsgItemOperationRequestPolish : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 48 };

	MsgItemOperationRequestPolish() :
		Message(Category, Id)
	{
		iid = 0;
		usevcoin = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemOperationRequestPolish";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		s << usevcoin;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		s >> usevcoin;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "usevcoin", usevcoin);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",usevcoin=" << usevcoin;
	}

public:
	int iid;
	short usevcoin;
};

class MsgItemToPointsRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 53 };

	MsgItemToPointsRequest() :
		Message(Category, Id)
	{
		iid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemToPointsRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
	}

public:
	int iid;
};

class MsgMoveItemInStoreRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 54 };

	MsgMoveItemInStoreRequest() :
		Message(Category, Id)
	{
		page = 0;
		iid = 0;
		position = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMoveItemInStoreRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << page;
		s << iid;
		s << position;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> page;
		s >> iid;
		s >> position;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "page", page);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "position", position);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "page=" << page;
		buffer << ",iid=" << iid;
		buffer << ",position=" << position;
	}

public:
	int page;
	int iid;
	int position;
};

class MsgMoveItemInBagRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 55 };

	MsgMoveItemInBagRequest() :
		Message(Category, Id)
	{
		page = 0;
		iid = 0;
		position = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMoveItemInBagRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << page;
		s << iid;
		s << position;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> page;
		s >> iid;
		s >> position;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "page", page);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "position", position);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "page=" << page;
		buffer << ",iid=" << iid;
		buffer << ",position=" << position;
	}

public:
	int page;
	int iid;
	int position;
};

class MsgMoveItemResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 56 };

	MsgMoveItemResponse() :
		Message(Category, Id)
	{
		errorcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMoveItemResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errorcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errorcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errorcode", errorcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errorcode=" << errorcode;
	}

public:
	int errorcode;
};

class MsgSyncGuildItemsNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 71 };

	MsgSyncGuildItemsNotify() :
		Message(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncGuildItemsNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short);
		for (size_t i = 0; i < items.size(); ++i)
		{
			length += items[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		short items_vector_size = (short)items.size();
		s << items_vector_size;
		if (items_vector_size > 0)
		{
			for (auto it = items.begin(); it != items.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		int items_vector_size = s.read_int16();
		items.clear();
		while (items_vector_size > 0)
		{
			items_vector_size--;
			ItemInfo val;
			val.unserialize(s, false);
			items.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::newtable(lua::L);
		for (size_t i = 0; i < items.size(); ++i)
		{
			items[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "items");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",items=[";
		for (size_t i = 0; i < items.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			items[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int pid;
	std::vector<ItemInfo> items;
};

class MsgAddGuildItemNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 72 };

	MsgAddGuildItemNotify() :
		Message(Category, Id)
	{
		opcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgAddGuildItemNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += iteminfo.getLength(false);
		length += sizeof(short);
		for (size_t i = 0; i < props.size(); ++i)
		{
			length += props[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		iteminfo.serialize(s, false);
		short props_vector_size = (short)props.size();
		s << props_vector_size;
		if (props_vector_size > 0)
		{
			for (auto it = props.begin(); it != props.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		iteminfo.unserialize(s, false);
		int props_vector_size = s.read_int16();
		props.clear();
		while (props_vector_size > 0)
		{
			props_vector_size--;
			ItemExData val;
			val.unserialize(s, false);
			props.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		iteminfo.push(L);
		lua::settable(L, -1, "iteminfo");
		lua::newtable(lua::L);
		for (size_t i = 0; i < props.size(); ++i)
		{
			props[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "props");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",iteminfo={";
		iteminfo.dump(buffer);
		buffer << "}";
		buffer << ",props=[";
		for (size_t i = 0; i < props.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			props[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int opcode;
	ItemInfo iteminfo;
	std::vector<ItemExData> props;
};

class MsgDeleteGuildItemNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 73 };

	MsgDeleteGuildItemNotify() :
		Message(Category, Id)
	{
		opcode = 0;
		iid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDeleteGuildItemNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		s << iid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		s >> iid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "iid", iid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",iid=" << iid;
	}

public:
	int opcode;
	int iid;
};

class MsgUpdateGuildItemBaseNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 74 };

	MsgUpdateGuildItemBaseNotify() :
		Message(Category, Id)
	{
		opcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdateGuildItemBaseNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += item.getLength(false);
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		item.serialize(s, false);
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		item.unserialize(s, false);
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		item.push(L);
		lua::settable(L, -1, "item");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",item={";
		item.dump(buffer);
		buffer << "}";
	}

public:
	int opcode;
	ItemInfo item;
};

class MsgUpdateGuildItemCountNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 75 };

	MsgUpdateGuildItemCountNotify() :
		Message(Category, Id)
	{
		opcode = 0;
		iid = 0;
		count = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdateGuildItemCountNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		s << iid;
		s << count;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		s >> iid;
		s >> count;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "count", count);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",iid=" << iid;
		buffer << ",count=" << count;
	}

public:
	int opcode;
	int iid;
	short count;
};

class MsgUpdateGuildItemPositionNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 76 };

	MsgUpdateGuildItemPositionNotify() :
		Message(Category, Id)
	{
		opcode = 0;
		iid = 0;
		position = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdateGuildItemPositionNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		s << iid;
		s << position;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		s >> iid;
		s >> position;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "position", position);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",iid=" << iid;
		buffer << ",position=" << position;
	}

public:
	int opcode;
	int iid;
	short position;
};

class MsgUpdateGuildItemSidNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 77 };

	MsgUpdateGuildItemSidNotify() :
		Message(Category, Id)
	{
		iid = 0;
		opcode = 0;
		sid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdateGuildItemSidNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		s << opcode;
		s << sid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		s >> opcode;
		s >> sid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "sid", sid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",opcode=" << opcode;
		buffer << ",sid=" << sid;
	}

public:
	int iid;
	int opcode;
	int sid;
};

class MsgUpdateGuildItemPropNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 78 };

	MsgUpdateGuildItemPropNotify() :
		Message(Category, Id)
	{
		opcode = 0;
		iid = 0;
		idx = 0;
		data = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdateGuildItemPropNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 14;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		s << iid;
		s << idx;
		s << data;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		s >> iid;
		s >> idx;
		s >> data;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "idx", idx);
		lua::settable(L, -1, "data", data);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",iid=" << iid;
		buffer << ",idx=" << idx;
		buffer << ",data=" << data;
	}

public:
	int opcode;
	int iid;
	short idx;
	int data;
};

class MsgUpdateGuildItemAllPropsNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 79 };

	MsgUpdateGuildItemAllPropsNotify() :
		Message(Category, Id)
	{
		opcode = 0;
		iid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdateGuildItemAllPropsNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 8;
		length += sizeof(short);
		for (size_t i = 0; i < props.size(); ++i)
		{
			length += props[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opcode;
		s << iid;
		short props_vector_size = (short)props.size();
		s << props_vector_size;
		if (props_vector_size > 0)
		{
			for (auto it = props.begin(); it != props.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opcode;
		s >> iid;
		int props_vector_size = s.read_int16();
		props.clear();
		while (props_vector_size > 0)
		{
			props_vector_size--;
			ItemExData val;
			val.unserialize(s, false);
			props.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "iid", iid);
		lua::newtable(lua::L);
		for (size_t i = 0; i < props.size(); ++i)
		{
			props[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "props");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opcode=" << opcode;
		buffer << ",iid=" << iid;
		buffer << ",props=[";
		for (size_t i = 0; i < props.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			props[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int opcode;
	int iid;
	std::vector<ItemExData> props;
};

class MsgItemFailorSuccessNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 100 };

	MsgItemFailorSuccessNotify() :
		Message(Category, Id)
	{
		idx = 0;
		data = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemFailorSuccessNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << idx;
		s << data;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> idx;
		s >> data;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "idx", idx);
		lua::settable(L, -1, "data", data);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "idx=" << idx;
		buffer << ",data=" << data;
	}

public:
	int idx;
	int data;
};

struct OtherEquip
{
public:
	OtherEquip()
	{
		position = 0;
		sid = 0;
		iid = 0;
		itemlvl = 0;
		itemreborn = 0;
	}

	size_t getLength(bool ex) const
	{
		return 16;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << position;
		s << sid;
		s << iid;
		s << itemlvl;
		s << itemreborn;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> position;
		s >> sid;
		s >> iid;
		s >> itemlvl;
		s >> itemreborn;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "position", position);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "itemlvl", itemlvl);
		lua::settable(L, -1, "itemreborn", itemreborn);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "position=" << position;
		buffer << ",sid=" << sid;
		buffer << ",iid=" << iid;
		buffer << ",itemlvl=" << itemlvl;
		buffer << ",itemreborn=" << itemreborn;
	}

public:
	int position;
	int sid;
	int iid;
	short itemlvl;
	short itemreborn;
};

class MsgSyncOtherPlayerEquipNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 150 };

	MsgSyncOtherPlayerEquipNotify() :
		Message(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncOtherPlayerEquipNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short);
		for (size_t i = 0; i < equips.size(); ++i)
		{
			length += equips[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		short equips_vector_size = (short)equips.size();
		s << equips_vector_size;
		if (equips_vector_size > 0)
		{
			for (auto it = equips.begin(); it != equips.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		int equips_vector_size = s.read_int16();
		equips.clear();
		while (equips_vector_size > 0)
		{
			equips_vector_size--;
			OtherEquip val;
			val.unserialize(s, false);
			equips.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::newtable(lua::L);
		for (size_t i = 0; i < equips.size(); ++i)
		{
			equips[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "equips");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",equips=[";
		for (size_t i = 0; i < equips.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			equips[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int pid;
	std::vector<OtherEquip> equips;
};

class MsgItemShenLuUpRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 151 };

	MsgItemShenLuUpRequest() :
		Message(Category, Id)
	{
		type = 0;
		index = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemShenLuUpRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << type;
		s << index;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> type;
		s >> index;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "index", index);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
		buffer << ",index=" << index;
	}

public:
	int type;
	int index;
};

class MsgItemShenLuUpResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 152 };

	MsgItemShenLuUpResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemShenLuUpResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgItemXiLianRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 161 };

	MsgItemXiLianRequest() :
		Message(Category, Id)
	{
		iid = 0;
		type = 0;
		single = 0;
		autobuy = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemXiLianRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 16;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		s << type;
		s << single;
		s << autobuy;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		s >> type;
		s >> single;
		s >> autobuy;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "single", single);
		lua::settable(L, -1, "autobuy", autobuy);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",type=" << type;
		buffer << ",single=" << single;
		buffer << ",autobuy=" << autobuy;
	}

public:
	int iid;
	int type;
	int single;
	int autobuy;
};

class MsgItemXiLianResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 162 };

	MsgItemXiLianResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		type = 0;
		single = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemXiLianResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << type;
		s << single;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> type;
		s >> single;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "single", single);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",type=" << type;
		buffer << ",single=" << single;
	}

public:
	short errcode;
	int type;
	int single;
};

class MsgItemXiLianSaveRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 163 };

	MsgItemXiLianSaveRequest() :
		Message(Category, Id)
	{
		iid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemXiLianSaveRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
	}

public:
	int iid;
};

class MsgItemXiLianSaveResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 164 };

	MsgItemXiLianSaveResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemXiLianSaveResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgItemXiLianFJRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 165 };

	MsgItemXiLianFJRequest() :
		Message(Category, Id)
	{
		iid1 = 0;
		iid2 = 0;
		iid3 = 0;
		iid4 = 0;
		iid5 = 0;
		iid6 = 0;
		iid7 = 0;
		iid8 = 0;
		type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemXiLianFJRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 36;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid1;
		s << iid2;
		s << iid3;
		s << iid4;
		s << iid5;
		s << iid6;
		s << iid7;
		s << iid8;
		s << type;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid1;
		s >> iid2;
		s >> iid3;
		s >> iid4;
		s >> iid5;
		s >> iid6;
		s >> iid7;
		s >> iid8;
		s >> type;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid1", iid1);
		lua::settable(L, -1, "iid2", iid2);
		lua::settable(L, -1, "iid3", iid3);
		lua::settable(L, -1, "iid4", iid4);
		lua::settable(L, -1, "iid5", iid5);
		lua::settable(L, -1, "iid6", iid6);
		lua::settable(L, -1, "iid7", iid7);
		lua::settable(L, -1, "iid8", iid8);
		lua::settable(L, -1, "type", type);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid1=" << iid1;
		buffer << ",iid2=" << iid2;
		buffer << ",iid3=" << iid3;
		buffer << ",iid4=" << iid4;
		buffer << ",iid5=" << iid5;
		buffer << ",iid6=" << iid6;
		buffer << ",iid7=" << iid7;
		buffer << ",iid8=" << iid8;
		buffer << ",type=" << type;
	}

public:
	int iid1;
	int iid2;
	int iid3;
	int iid4;
	int iid5;
	int iid6;
	int iid7;
	int iid8;
	int type;
};

class MsgItemXiLianFJResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 166 };

	MsgItemXiLianFJResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemXiLianFJResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgItemXiLianZYRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 167 };

	MsgItemXiLianZYRequest() :
		Message(Category, Id)
	{
		iid1 = 0;
		iid2 = 0;
		type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemXiLianZYRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid1;
		s << iid2;
		s << type;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid1;
		s >> iid2;
		s >> type;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid1", iid1);
		lua::settable(L, -1, "iid2", iid2);
		lua::settable(L, -1, "type", type);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid1=" << iid1;
		buffer << ",iid2=" << iid2;
		buffer << ",type=" << type;
	}

public:
	int iid1;
	int iid2;
	int type;
};

class MsgItemXiLianZYResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 168 };

	MsgItemXiLianZYResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemXiLianZYResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgItemReforgeRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 170 };

	MsgItemReforgeRequest() :
		Message(Category, Id)
	{
		itemid = 0;
		reforgetype = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemReforgeRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << itemid;
		s << reforgetype;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> itemid;
		s >> reforgetype;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "itemid", itemid);
		lua::settable(L, -1, "reforgetype", reforgetype);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "itemid=" << itemid;
		buffer << ",reforgetype=" << reforgetype;
	}

public:
	int itemid;
	short reforgetype;
};

class MsgItemReforgeResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 171 };

	MsgItemReforgeResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemReforgeResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

struct ItemReforgeInfo
{
public:
	ItemReforgeInfo()
	{
		itemid = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 4;
		length += sizeof(short) + name.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << name;
		s << itemid;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> name;
		s >> itemid;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "itemid", itemid);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "name=" << name;
		buffer << ",itemid=" << itemid;
	}

public:
	std::string name;
	int itemid;
};

class MsgItemReforgeRecordRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 172 };

	MsgItemReforgeRecordRequest() :
		Message(Category, Id)
	{
		count = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemReforgeRecordRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << count;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> count;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "count", count);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "count=" << count;
	}

public:
	short count;
};

class MsgItemReforgeRecordResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 173 };

	MsgItemReforgeRecordResponse() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgItemReforgeRecordResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < recordlist.size(); ++i)
		{
			length += recordlist[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short recordlist_vector_size = (short)recordlist.size();
		s << recordlist_vector_size;
		if (recordlist_vector_size > 0)
		{
			for (auto it = recordlist.begin(); it != recordlist.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int recordlist_vector_size = s.read_int16();
		recordlist.clear();
		while (recordlist_vector_size > 0)
		{
			recordlist_vector_size--;
			ItemReforgeInfo val;
			val.unserialize(s, false);
			recordlist.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < recordlist.size(); ++i)
		{
			recordlist[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "recordlist");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "recordlist=[";
		for (size_t i = 0; i < recordlist.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			recordlist[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<ItemReforgeInfo> recordlist;
};

class MsgItemUserExpStoreRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 174 };

	MsgItemUserExpStoreRequest() :
		Message(Category, Id)
	{
		iid = 0;
		eid = 0;
		cnt = 0;
		option = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemUserExpStoreRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		s << eid;
		s << cnt;
		s << option;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		s >> eid;
		s >> cnt;
		s >> option;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "eid", eid);
		lua::settable(L, -1, "cnt", cnt);
		lua::settable(L, -1, "option", option);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",eid=" << eid;
		buffer << ",cnt=" << cnt;
		buffer << ",option=" << option;
	}

public:
	int iid;
	int eid;
	short cnt;
	short option;
};

class MsgItemUserExpStoreResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 175 };

	MsgItemUserExpStoreResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemUserExpStoreResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgItemTransformRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 177 };

	MsgItemTransformRequest() :
		Message(Category, Id)
	{
		iid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemTransformRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
	}

public:
	int iid;
};

class MsgItemTransformResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 178 };

	MsgItemTransformResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemTransformResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgPutinSkillRuneToPosRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 181 };

	MsgPutinSkillRuneToPosRequest() :
		Message(Category, Id)
	{
		iid = 0;
		skillsid = 0;
		runeId = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPutinSkillRuneToPosRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		s << skillsid;
		s << runeId;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		s >> skillsid;
		s >> runeId;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "skillsid", skillsid);
		lua::settable(L, -1, "runeId", runeId);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",skillsid=" << skillsid;
		buffer << ",runeId=" << runeId;
	}

public:
	int iid;
	int skillsid;
	int runeId;
};

class MsgSkillRuneLvlUpResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 183 };

	MsgSkillRuneLvlUpResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		iid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSkillRuneLvlUpResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << iid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> iid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "iid", iid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",iid=" << iid;
	}

public:
	short errcode;
	int iid;
};

class MsgSkillRunePutoffRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 184 };

	MsgSkillRunePutoffRequest() :
		Message(Category, Id)
	{
		iid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSkillRunePutoffRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
	}

public:
	int iid;
};

class MsgSkillRunePutoffResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 185 };

	MsgSkillRunePutoffResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSkillRunePutoffResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgQuickUseItemListRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 186 };

	MsgQuickUseItemListRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgQuickUseItemListRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		length += itemList.size() * 4;
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short itemList_vector_size = (short)itemList.size();
		s << itemList_vector_size;
		if (itemList_vector_size > 0)
		{
			for (auto it = itemList.begin(); it != itemList.end(); ++it)
			{
				s << *it;
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int itemList_vector_size = s.read_int16();
		itemList.clear();
		while (itemList_vector_size > 0)
		{
			itemList_vector_size--;
			int val;
			s >> val;
			itemList.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < itemList.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, itemList[i]);
		}
		lua::settable(L, -2, "itemList");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "itemList=[";
		for (size_t i = 0; i < itemList.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << itemList[i];
		}
		buffer << "]";
	}

public:
	std::vector<int> itemList;
};

class MsgQuickUseItemListResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 187 };

	MsgQuickUseItemListResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgQuickUseItemListResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgMoveItemListRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 188 };

	MsgMoveItemListRequest() :
		Message(Category, Id)
	{
		operatorType = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMoveItemListRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short);
		length += itemList.size() * 4;
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << operatorType;
		short itemList_vector_size = (short)itemList.size();
		s << itemList_vector_size;
		if (itemList_vector_size > 0)
		{
			for (auto it = itemList.begin(); it != itemList.end(); ++it)
			{
				s << *it;
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> operatorType;
		int itemList_vector_size = s.read_int16();
		itemList.clear();
		while (itemList_vector_size > 0)
		{
			itemList_vector_size--;
			int val;
			s >> val;
			itemList.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "operatorType", operatorType);
		lua::newtable(lua::L);
		for (size_t i = 0; i < itemList.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, itemList[i]);
		}
		lua::settable(L, -2, "itemList");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "operatorType=" << operatorType;
		buffer << ",itemList=[";
		for (size_t i = 0; i < itemList.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << itemList[i];
		}
		buffer << "]";
	}

public:
	int operatorType;
	std::vector<int> itemList;
};

class MsgMoveItemListResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 189 };

	MsgMoveItemListResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMoveItemListResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgResetBagItemInfoNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 190 };

	MsgResetBagItemInfoNotify() :
		Message(Category, Id)
	{
		pid = 0;
		beginPos = 0;
		endPos = 0;
	}

	virtual const char *getName() const
	{
		return "MsgResetBagItemInfoNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 12;
		length += sizeof(short);
		for (size_t i = 0; i < item_list.size(); ++i)
		{
			length += item_list[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << beginPos;
		s << endPos;
		short item_list_vector_size = (short)item_list.size();
		s << item_list_vector_size;
		if (item_list_vector_size > 0)
		{
			for (auto it = item_list.begin(); it != item_list.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> beginPos;
		s >> endPos;
		int item_list_vector_size = s.read_int16();
		item_list.clear();
		while (item_list_vector_size > 0)
		{
			item_list_vector_size--;
			ItemInfo val;
			val.unserialize(s, false);
			item_list.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "beginPos", beginPos);
		lua::settable(L, -1, "endPos", endPos);
		lua::newtable(lua::L);
		for (size_t i = 0; i < item_list.size(); ++i)
		{
			item_list[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "item_list");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",beginPos=" << beginPos;
		buffer << ",endPos=" << endPos;
		buffer << ",item_list=[";
		for (size_t i = 0; i < item_list.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			item_list[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int pid;
	int beginPos;
	int endPos;
	std::vector<ItemInfo> item_list;
};

class MsgSortBagRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 191 };

	MsgSortBagRequest() :
		Message(Category, Id)
	{
		bagType = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSortBagRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << bagType;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> bagType;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "bagType", bagType);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "bagType=" << bagType;
	}

public:
	short bagType;
};

class MsgSortBagResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 192 };

	MsgSortBagResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSortBagResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgHCItemRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 193 };

	MsgHCItemRequest() :
		Message(Category, Id)
	{
		formulaId = 0;
		count = 0;
		useStore = 0;
	}

	virtual const char *getName() const
	{
		return "MsgHCItemRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << formulaId;
		s << count;
		s << useStore;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> formulaId;
		s >> count;
		s >> useStore;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "formulaId", formulaId);
		lua::settable(L, -1, "count", count);
		lua::settable(L, -1, "useStore", useStore);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "formulaId=" << formulaId;
		buffer << ",count=" << count;
		buffer << ",useStore=" << useStore;
	}

public:
	int formulaId;
	int count;
	short useStore;
};

class MsgHCItemResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 194 };

	MsgHCItemResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgHCItemResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	int errcode;
};

class MsgRecoveryItemListRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 195 };

	MsgRecoveryItemListRequest() :
		Message(Category, Id)
	{
		posBegin = 0;
		posEnd = 0;
		autoRecovery = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRecoveryItemListRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 10;
		length += sizeof(short);
		length += itemList.size() * 4;
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << posBegin;
		s << posEnd;
		short itemList_vector_size = (short)itemList.size();
		s << itemList_vector_size;
		if (itemList_vector_size > 0)
		{
			for (auto it = itemList.begin(); it != itemList.end(); ++it)
			{
				s << *it;
			}
		}
		s << autoRecovery;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> posBegin;
		s >> posEnd;
		int itemList_vector_size = s.read_int16();
		itemList.clear();
		while (itemList_vector_size > 0)
		{
			itemList_vector_size--;
			int val;
			s >> val;
			itemList.push_back(val);
		}
		s >> autoRecovery;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "posBegin", posBegin);
		lua::settable(L, -1, "posEnd", posEnd);
		lua::newtable(lua::L);
		for (size_t i = 0; i < itemList.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, itemList[i]);
		}
		lua::settable(L, -2, "itemList");
		lua::settable(L, -1, "autoRecovery", autoRecovery);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "posBegin=" << posBegin;
		buffer << ",posEnd=" << posEnd;
		buffer << ",itemList=[";
		for (size_t i = 0; i < itemList.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << itemList[i];
		}
		buffer << "]";
		buffer << ",autoRecovery=" << autoRecovery;
	}

public:
	int posBegin;
	int posEnd;
	std::vector<int> itemList;
	short autoRecovery;
};

class MsgRecoveryItemListResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 196 };

	MsgRecoveryItemListResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		autoRecovery = 0;
		posBegin = 0;
		posEnd = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRecoveryItemListResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 14;
		length += sizeof(short);
		for (size_t i = 0; i < items.size(); ++i)
		{
			length += items[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << autoRecovery;
		s << posBegin;
		s << posEnd;
		short items_vector_size = (short)items.size();
		s << items_vector_size;
		if (items_vector_size > 0)
		{
			for (auto it = items.begin(); it != items.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> autoRecovery;
		s >> posBegin;
		s >> posEnd;
		int items_vector_size = s.read_int16();
		items.clear();
		while (items_vector_size > 0)
		{
			items_vector_size--;
			ItemBase64 val;
			val.unserialize(s, false);
			items.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "autoRecovery", autoRecovery);
		lua::settable(L, -1, "posBegin", posBegin);
		lua::settable(L, -1, "posEnd", posEnd);
		lua::newtable(lua::L);
		for (size_t i = 0; i < items.size(); ++i)
		{
			items[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "items");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",autoRecovery=" << autoRecovery;
		buffer << ",posBegin=" << posBegin;
		buffer << ",posEnd=" << posEnd;
		buffer << ",items=[";
		for (size_t i = 0; i < items.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			items[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int errcode;
	short autoRecovery;
	int posBegin;
	int posEnd;
	std::vector<ItemBase64> items;
};

class MsgSepEquipUpLevelRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 197 };

	MsgSepEquipUpLevelRequest() :
		Message(Category, Id)
	{
		sepType = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSepEquipUpLevelRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << sepType;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> sepType;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sepType", sepType);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "sepType=" << sepType;
	}

public:
	int sepType;
};

class MsgSepEquipUpLevelResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 198 };

	MsgSepEquipUpLevelResponse() :
		Message(Category, Id)
	{
		sepType = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSepEquipUpLevelResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << sepType;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> sepType;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sepType", sepType);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "sepType=" << sepType;
		buffer << ",errcode=" << errcode;
	}

public:
	int sepType;
	short errcode;
};

class MsgRechargeEquipUpLevelRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 199 };

	MsgRechargeEquipUpLevelRequest() :
		Message(Category, Id)
	{
		position = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRechargeEquipUpLevelRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << position;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> position;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "position", position);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "position=" << position;
	}

public:
	int position;
};

class MsgRechargeEquipUpLevelResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 200 };

	MsgRechargeEquipUpLevelResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRechargeEquipUpLevelResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgRechargeEquipRecycleRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 201 };

	MsgRechargeEquipRecycleRequest() :
		Message(Category, Id)
	{
		position = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRechargeEquipRecycleRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << position;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> position;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "position", position);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "position=" << position;
	}

public:
	int position;
};

class MsgRechargeEquipRecycleResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 202 };

	MsgRechargeEquipRecycleResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRechargeEquipRecycleResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgDHItemRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 203 };

	MsgDHItemRequest() :
		Message(Category, Id)
	{
		formulaId = 0;
		count = 0;
		useStore = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDHItemRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << formulaId;
		s << count;
		s << useStore;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> formulaId;
		s >> count;
		s >> useStore;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "formulaId", formulaId);
		lua::settable(L, -1, "count", count);
		lua::settable(L, -1, "useStore", useStore);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "formulaId=" << formulaId;
		buffer << ",count=" << count;
		buffer << ",useStore=" << useStore;
	}

public:
	int formulaId;
	int count;
	short useStore;
};

class MsgItemUpdAppraiserNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 206 };

	MsgItemUpdAppraiserNotify() :
		Message(Category, Id)
	{
		iid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemUpdAppraiserNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short) + appraiser.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		s << appraiser;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		s >> appraiser;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "appraiser", appraiser);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",appraiser=" << appraiser;
	}

public:
	int iid;
	std::string appraiser;
};

class MsgItemIdentifySpecialRingRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 207 };

	MsgItemIdentifySpecialRingRequest() :
		Message(Category, Id)
	{
		iid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemIdentifySpecialRingRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
	}

public:
	int iid;
};

class MsgItemIdentifySpecialRingResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 208 };

	MsgItemIdentifySpecialRingResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		newringiid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemIdentifySpecialRingResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << newringiid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> newringiid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "newringiid", newringiid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",newringiid=" << newringiid;
	}

public:
	short errcode;
	int newringiid;
};

class MsgItemUpgradeSpecialRingRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 209 };

	MsgItemUpgradeSpecialRingRequest() :
		Message(Category, Id)
	{
		iid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemUpgradeSpecialRingRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
	}

public:
	int iid;
};

class MsgItemUpgradeSpecialRingResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 210 };

	MsgItemUpgradeSpecialRingResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemUpgradeSpecialRingResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgItemAdvandeSpecialRingRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 211 };

	MsgItemAdvandeSpecialRingRequest() :
		Message(Category, Id)
	{
		src_iid = 0;
		tgt_iid = 0;
		lock = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemAdvandeSpecialRingRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << src_iid;
		s << tgt_iid;
		s << lock;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> src_iid;
		s >> tgt_iid;
		s >> lock;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "src_iid", src_iid);
		lua::settable(L, -1, "tgt_iid", tgt_iid);
		lua::settable(L, -1, "lock", lock);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "src_iid=" << src_iid;
		buffer << ",tgt_iid=" << tgt_iid;
		buffer << ",lock=" << lock;
	}

public:
	int src_iid;
	int tgt_iid;
	int lock;
};

class MsgItemAdvandeSpecialRingResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 212 };

	MsgItemAdvandeSpecialRingResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemAdvandeSpecialRingResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgItemAdvandeSpecialRingConfirmRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 213 };

	MsgItemAdvandeSpecialRingConfirmRequest() :
		Message(Category, Id)
	{
		iid = 0;
		save = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemAdvandeSpecialRingConfirmRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		s << save;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		s >> save;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "save", save);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",save=" << save;
	}

public:
	int iid;
	short save;
};

class MsgItemAdvandeSpecialRingConfirmResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 214 };

	MsgItemAdvandeSpecialRingConfirmResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemAdvandeSpecialRingConfirmResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

struct gjItem
{
public:
	gjItem()
	{
		iid = 0;
		sid = 0;
		count = 0;
	}

	size_t getLength(bool ex) const
	{
		return 12;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << iid;
		s << sid;
		s << count;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> iid;
		s >> sid;
		s >> count;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "count", count);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",sid=" << sid;
		buffer << ",count=" << count;
	}

public:
	int iid;
	int sid;
	int count;
};

class MsgItemSwitchLockRecoveryRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 217 };

	MsgItemSwitchLockRecoveryRequest() :
		Message(Category, Id)
	{
		iid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemSwitchLockRecoveryRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
	}

public:
	int iid;
};

class MsgItemUseWithSidRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 218 };

	MsgItemUseWithSidRequest() :
		Message(Category, Id)
	{
		sid = 0;
		count = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemUseWithSidRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << sid;
		s << count;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> sid;
		s >> count;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "count", count);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "sid=" << sid;
		buffer << ",count=" << count;
	}

public:
	int sid;
	int count;
};

class MsgItemCheckInBagRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 219 };

	MsgItemCheckInBagRequest() :
		Message(Category, Id)
	{
		iid = 0;
		page = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemCheckInBagRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		s << page;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		s >> page;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "page", page);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",page=" << page;
	}

public:
	int iid;
	int page;
};

class MsgItemDecomposeRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 220 };

	MsgItemDecomposeRequest() :
		Message(Category, Id)
	{
		iid = 0;
		count = 0;
	}

	virtual const char *getName() const
	{
		return "MsgItemDecomposeRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		s << count;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		s >> count;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "count", count);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",count=" << count;
	}

public:
	int iid;
	int count;
};

class MsgHuoJiItemListRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 221 };

	MsgHuoJiItemListRequest() :
		Message(Category, Id)
	{
		autoHuoJi = 0;
	}

	virtual const char *getName() const
	{
		return "MsgHuoJiItemListRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 2;
		length += sizeof(short);
		length += itemList.size() * 4;
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short itemList_vector_size = (short)itemList.size();
		s << itemList_vector_size;
		if (itemList_vector_size > 0)
		{
			for (auto it = itemList.begin(); it != itemList.end(); ++it)
			{
				s << *it;
			}
		}
		s << autoHuoJi;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int itemList_vector_size = s.read_int16();
		itemList.clear();
		while (itemList_vector_size > 0)
		{
			itemList_vector_size--;
			int val;
			s >> val;
			itemList.push_back(val);
		}
		s >> autoHuoJi;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < itemList.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, itemList[i]);
		}
		lua::settable(L, -2, "itemList");
		lua::settable(L, -1, "autoHuoJi", autoHuoJi);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "itemList=[";
		for (size_t i = 0; i < itemList.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << itemList[i];
		}
		buffer << "]";
		buffer << ",autoHuoJi=" << autoHuoJi;
	}

public:
	std::vector<int> itemList;
	short autoHuoJi;
};

class MsgHuoJiItemListResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 222 };

	MsgHuoJiItemListResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		autoHuoJi = 0;
	}

	virtual const char *getName() const
	{
		return "MsgHuoJiItemListResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 6;
		length += sizeof(short);
		for (size_t i = 0; i < items.size(); ++i)
		{
			length += items[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << autoHuoJi;
		short items_vector_size = (short)items.size();
		s << items_vector_size;
		if (items_vector_size > 0)
		{
			for (auto it = items.begin(); it != items.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> autoHuoJi;
		int items_vector_size = s.read_int16();
		items.clear();
		while (items_vector_size > 0)
		{
			items_vector_size--;
			ItemBase val;
			val.unserialize(s, false);
			items.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "autoHuoJi", autoHuoJi);
		lua::newtable(lua::L);
		for (size_t i = 0; i < items.size(); ++i)
		{
			items[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "items");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",autoHuoJi=" << autoHuoJi;
		buffer << ",items=[";
		for (size_t i = 0; i < items.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			items[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int errcode;
	short autoHuoJi;
	std::vector<ItemBase> items;
};

class MsgFenJieItemListRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 224 };

	MsgFenJieItemListRequest() :
		Message(Category, Id)
	{
		itemType = 0;
	}

	virtual const char *getName() const
	{
		return "MsgFenJieItemListRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short);
		length += itemList.size() * 4;
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short itemList_vector_size = (short)itemList.size();
		s << itemList_vector_size;
		if (itemList_vector_size > 0)
		{
			for (auto it = itemList.begin(); it != itemList.end(); ++it)
			{
				s << *it;
			}
		}
		s << itemType;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int itemList_vector_size = s.read_int16();
		itemList.clear();
		while (itemList_vector_size > 0)
		{
			itemList_vector_size--;
			int val;
			s >> val;
			itemList.push_back(val);
		}
		s >> itemType;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < itemList.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, itemList[i]);
		}
		lua::settable(L, -2, "itemList");
		lua::settable(L, -1, "itemType", itemType);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "itemList=[";
		for (size_t i = 0; i < itemList.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << itemList[i];
		}
		buffer << "]";
		buffer << ",itemType=" << itemType;
	}

public:
	std::vector<int> itemList;
	int itemType;
};

class MsgFenJieListResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 225 };

	MsgFenJieListResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgFenJieListResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short);
		for (size_t i = 0; i < items.size(); ++i)
		{
			length += items[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		short items_vector_size = (short)items.size();
		s << items_vector_size;
		if (items_vector_size > 0)
		{
			for (auto it = items.begin(); it != items.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		int items_vector_size = s.read_int16();
		items.clear();
		while (items_vector_size > 0)
		{
			items_vector_size--;
			ItemBase val;
			val.unserialize(s, false);
			items.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::newtable(lua::L);
		for (size_t i = 0; i < items.size(); ++i)
		{
			items[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "items");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",items=[";
		for (size_t i = 0; i < items.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			items[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int errcode;
	std::vector<ItemBase> items;
};

class MsgRongLianItemRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 226 };

	MsgRongLianItemRequest() :
		Message(Category, Id)
	{
		itemtype = 0;
		itemiid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRongLianItemRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 6;
		length += sizeof(short) + iidListStr.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << itemtype;
		s << itemiid;
		s << iidListStr;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> itemtype;
		s >> itemiid;
		s >> iidListStr;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "itemtype", itemtype);
		lua::settable(L, -1, "itemiid", itemiid);
		lua::settable(L, -1, "iidListStr", iidListStr);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "itemtype=" << itemtype;
		buffer << ",itemiid=" << itemiid;
		buffer << ",iidListStr=" << iidListStr;
	}

public:
	short itemtype;
	int itemiid;
	std::string iidListStr;
};

class MsgRongLianItemResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 227 };

	MsgRongLianItemResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		itemiid = 0;
		itemtype = 0;
		opCode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRongLianItemResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << itemiid;
		s << itemtype;
		s << opCode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> itemiid;
		s >> itemtype;
		s >> opCode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "itemiid", itemiid);
		lua::settable(L, -1, "itemtype", itemtype);
		lua::settable(L, -1, "opCode", opCode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",itemiid=" << itemiid;
		buffer << ",itemtype=" << itemtype;
		buffer << ",opCode=" << opCode;
	}

public:
	short errcode;
	int itemiid;
	short itemtype;
	short opCode;
};

class MsgRongLianSplitItemRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 228 };

	MsgRongLianSplitItemRequest() :
		Message(Category, Id)
	{
		itemtype = 0;
		itemiid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRongLianSplitItemRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << itemtype;
		s << itemiid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> itemtype;
		s >> itemiid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "itemtype", itemtype);
		lua::settable(L, -1, "itemiid", itemiid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "itemtype=" << itemtype;
		buffer << ",itemiid=" << itemiid;
	}

public:
	short itemtype;
	int itemiid;
};

class MsgRongLianSplitItemResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ITEM, Id = 229 };

	MsgRongLianSplitItemResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRongLianSplitItemResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 2;
		length += sizeof(short);
		for (size_t i = 0; i < itemlist.size(); ++i)
		{
			length += itemlist[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		short itemlist_vector_size = (short)itemlist.size();
		s << itemlist_vector_size;
		if (itemlist_vector_size > 0)
		{
			for (auto it = itemlist.begin(); it != itemlist.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		int itemlist_vector_size = s.read_int16();
		itemlist.clear();
		while (itemlist_vector_size > 0)
		{
			itemlist_vector_size--;
			ItemBase val;
			val.unserialize(s, false);
			itemlist.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::newtable(lua::L);
		for (size_t i = 0; i < itemlist.size(); ++i)
		{
			itemlist[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "itemlist");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",itemlist=[";
		for (size_t i = 0; i < itemlist.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			itemlist[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	short errcode;
	std::vector<ItemBase> itemlist;
};

#endif	//_MSG_ITEM_H_INCLUDED
