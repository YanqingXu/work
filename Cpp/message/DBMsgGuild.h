//
//Generated by lua
//2009-2012	(C) XianFeng Inc. Reserved
//

#ifndef _DB_MSG_GUILD_H_INCLUDED
#define _DB_MSG_GUILD_H_INCLUDED

#include "category.h"
#include "common/MessageEx.h"

struct DBGuildInfo
{
public:
	DBGuildInfo()
	{
		guildid = 0;
		money = 0;
		ingot = 0;
		isgot = 0;
		createtime = 0;
		masterpid = 0;
		playercnt = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 28;
		length += sizeof(short) + guildname.size();
		length += sizeof(short) + guildplacard.size();
		length += sizeof(short) + publicnotice.size();
		length += sizeof(short) + mastername.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << guildid;
		s << money;
		s << ingot;
		s << isgot;
		s << guildname;
		s << guildplacard;
		s << publicnotice;
		s << createtime;
		s << masterpid;
		s << mastername;
		s << playercnt;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> guildid;
		s >> money;
		s >> ingot;
		s >> isgot;
		s >> guildname;
		s >> guildplacard;
		s >> publicnotice;
		s >> createtime;
		s >> masterpid;
		s >> mastername;
		s >> playercnt;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guildid", guildid);
		lua::settable(L, -1, "money", money);
		lua::settable(L, -1, "ingot", ingot);
		lua::settable(L, -1, "isgot", isgot);
		lua::settable(L, -1, "guildname", guildname);
		lua::settable(L, -1, "guildplacard", guildplacard);
		lua::settable(L, -1, "publicnotice", publicnotice);
		lua::settable(L, -1, "createtime", createtime);
		lua::settable(L, -1, "masterpid", masterpid);
		lua::settable(L, -1, "mastername", mastername);
		lua::settable(L, -1, "playercnt", playercnt);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "guildid=" << guildid;
		buffer << ",money=" << money;
		buffer << ",ingot=" << ingot;
		buffer << ",isgot=" << isgot;
		buffer << ",guildname=" << guildname;
		buffer << ",guildplacard=" << guildplacard;
		buffer << ",publicnotice=" << publicnotice;
		buffer << ",createtime=" << createtime;
		buffer << ",masterpid=" << masterpid;
		buffer << ",mastername=" << mastername;
		buffer << ",playercnt=" << playercnt;
	}

public:
	int guildid;
	int money;
	int ingot;
	int isgot;
	std::string guildname;
	std::string guildplacard;
	std::string publicnotice;
	int createtime;
	int masterpid;
	std::string mastername;
	int playercnt;
};

class MsgDBGuildCreate : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 1 };

	MsgDBGuildCreate() :
		MessageEx(Category, Id)
	{
		gid = 0;
		pid = 0;
		newgid = 0;
		money = 0;
		lvl = 0;
		next_level_time = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildCreate";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return gid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 24;
		length += sizeof(short) + guildname.size();
		length += sizeof(short) + defaultnotice.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << gid;
		s << guildname;
		s << pid;
		s << newgid;
		s << money;
		s << lvl;
		s << next_level_time;
		s << defaultnotice;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> gid;
		s >> guildname;
		s >> pid;
		s >> newgid;
		s >> money;
		s >> lvl;
		s >> next_level_time;
		s >> defaultnotice;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "gid", gid);
		lua::settable(L, -1, "guildname", guildname);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "newgid", newgid);
		lua::settable(L, -1, "money", money);
		lua::settable(L, -1, "lvl", lvl);
		lua::settable(L, -1, "next_level_time", next_level_time);
		lua::settable(L, -1, "defaultnotice", defaultnotice);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",gid=" << gid;
		buffer << ",guildname=" << guildname;
		buffer << ",pid=" << pid;
		buffer << ",newgid=" << newgid;
		buffer << ",money=" << money;
		buffer << ",lvl=" << lvl;
		buffer << ",next_level_time=" << next_level_time;
		buffer << ",defaultnotice=" << defaultnotice;
	}

public:
	int gid;
	std::string guildname;
	int pid;
	int newgid;
	int money;
	int lvl;
	int next_level_time;
	std::string defaultnotice;
};

class MsgDBGuildLoad : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 2 };

	MsgDBGuildLoad() :
		MessageEx(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildLoad";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength();
		length += sizeof(int);
		for (size_t i = 0; i < Guilds.size(); ++i)
		{
			length += Guilds[i].getLength(true);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		int Guilds_vector_size = (int)Guilds.size();
		s << Guilds_vector_size;
		if (Guilds_vector_size > 0)
		{
			for (auto it = Guilds.begin(); it != Guilds.end(); ++it)
			{
				(*it).serialize(s, true);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		int Guilds_vector_size = s.read_int32();
		Guilds.clear();
		while (Guilds_vector_size > 0)
		{
			Guilds_vector_size--;
			DBGuildInfo val;
			val.unserialize(s, true);
			Guilds.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < Guilds.size(); ++i)
		{
			Guilds[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "Guilds");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",Guilds=[";
		for (size_t i = 0; i < Guilds.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			Guilds[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<DBGuildInfo> Guilds;
};

struct DBGuildApplication
{
public:
	DBGuildApplication()
	{
		gid = 0;
		pid = 0;
		job = 0;
		gender = 0;
		reborn = 0;
		level = 0;
		force = 0;
		apptime = 0;
		type = 0;
		sponsorGrade = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 36;
		length += sizeof(short) + name.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << gid;
		s << pid;
		s << name;
		s << job;
		s << gender;
		s << reborn;
		s << level;
		s << force;
		s << apptime;
		s << type;
		s << sponsorGrade;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> gid;
		s >> pid;
		s >> name;
		s >> job;
		s >> gender;
		s >> reborn;
		s >> level;
		s >> force;
		s >> apptime;
		s >> type;
		s >> sponsorGrade;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "gid", gid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "job", job);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "reborn", reborn);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "force", force);
		lua::settable(L, -1, "apptime", apptime);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "sponsorGrade", sponsorGrade);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "gid=" << gid;
		buffer << ",pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",job=" << job;
		buffer << ",gender=" << gender;
		buffer << ",reborn=" << reborn;
		buffer << ",level=" << level;
		buffer << ",force=" << force;
		buffer << ",apptime=" << apptime;
		buffer << ",type=" << type;
		buffer << ",sponsorGrade=" << sponsorGrade;
	}

public:
	int gid;
	int pid;
	std::string name;
	short job;
	short gender;
	int reborn;
	int level;
	int force;
	int apptime;
	int type;
	int sponsorGrade;
};

class MsgDBGuildApplicationLoad : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 3 };

	MsgDBGuildApplicationLoad() :
		MessageEx(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildApplicationLoad";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength();
		length += sizeof(int);
		for (size_t i = 0; i < Applications.size(); ++i)
		{
			length += Applications[i].getLength(true);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		int Applications_vector_size = (int)Applications.size();
		s << Applications_vector_size;
		if (Applications_vector_size > 0)
		{
			for (auto it = Applications.begin(); it != Applications.end(); ++it)
			{
				(*it).serialize(s, true);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		int Applications_vector_size = s.read_int32();
		Applications.clear();
		while (Applications_vector_size > 0)
		{
			Applications_vector_size--;
			DBGuildApplication val;
			val.unserialize(s, true);
			Applications.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < Applications.size(); ++i)
		{
			Applications[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "Applications");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",Applications=[";
		for (size_t i = 0; i < Applications.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			Applications[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<DBGuildApplication> Applications;
};

class MsgDBGuildApplicationUpdate : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 4 };

	MsgDBGuildApplicationUpdate() :
		MessageEx(Category, Id)
	{
		gid = 0;
		pid = 0;
		type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildApplicationUpdate";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return gid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << gid;
		s << pid;
		s << type;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> gid;
		s >> pid;
		s >> type;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "gid", gid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "type", type);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",gid=" << gid;
		buffer << ",pid=" << pid;
		buffer << ",type=" << type;
	}

public:
	int gid;
	int pid;
	int type;
};

class MsgDBGuildApplicationDelete : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 5 };

	MsgDBGuildApplicationDelete() :
		MessageEx(Category, Id)
	{
		gid = 0;
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildApplicationDelete";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return gid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << gid;
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> gid;
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "gid", gid);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",gid=" << gid;
		buffer << ",pid=" << pid;
	}

public:
	int gid;
	int pid;
};

struct DBGuildMember
{
public:
	DBGuildMember()
	{
		gid = 0;
		pid = 0;
		level = 0;
		post = 0;
		offtime = 0;
		contribution = 0;
		todaycontribution = 0;
		gender = 0;
		force = 0;
		rank_day = 0;
		rank = 0;
		vitality = 0;
		kfyz_time = 0;
		intime = 0;
		speek = 0;
		exploits = 0;
		exploits_tindex = 0;
		reborn = 0;
		sponsorGrade = 0;
		job = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 76;
		length += sizeof(short) + playername.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << gid;
		s << pid;
		s << playername;
		s << level;
		s << post;
		s << offtime;
		s << contribution;
		s << todaycontribution;
		s << gender;
		s << force;
		s << rank_day;
		s << rank;
		s << vitality;
		s << kfyz_time;
		s << intime;
		s << speek;
		s << exploits;
		s << exploits_tindex;
		s << reborn;
		s << sponsorGrade;
		s << job;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> gid;
		s >> pid;
		s >> playername;
		s >> level;
		s >> post;
		s >> offtime;
		s >> contribution;
		s >> todaycontribution;
		s >> gender;
		s >> force;
		s >> rank_day;
		s >> rank;
		s >> vitality;
		s >> kfyz_time;
		s >> intime;
		s >> speek;
		s >> exploits;
		s >> exploits_tindex;
		s >> reborn;
		s >> sponsorGrade;
		s >> job;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "gid", gid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "playername", playername);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "post", post);
		lua::settable(L, -1, "offtime", offtime);
		lua::settable(L, -1, "contribution", contribution);
		lua::settable(L, -1, "todaycontribution", todaycontribution);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "force", force);
		lua::settable(L, -1, "rank_day", rank_day);
		lua::settable(L, -1, "rank", rank);
		lua::settable(L, -1, "vitality", vitality);
		lua::settable(L, -1, "kfyz_time", kfyz_time);
		lua::settable(L, -1, "intime", intime);
		lua::settable(L, -1, "speek", speek);
		lua::settable(L, -1, "exploits", exploits);
		lua::settable(L, -1, "exploits_tindex", exploits_tindex);
		lua::settable(L, -1, "reborn", reborn);
		lua::settable(L, -1, "sponsorGrade", sponsorGrade);
		lua::settable(L, -1, "job", job);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "gid=" << gid;
		buffer << ",pid=" << pid;
		buffer << ",playername=" << playername;
		buffer << ",level=" << level;
		buffer << ",post=" << post;
		buffer << ",offtime=" << offtime;
		buffer << ",contribution=" << contribution;
		buffer << ",todaycontribution=" << todaycontribution;
		buffer << ",gender=" << gender;
		buffer << ",force=" << force;
		buffer << ",rank_day=" << rank_day;
		buffer << ",rank=" << rank;
		buffer << ",vitality=" << vitality;
		buffer << ",kfyz_time=" << kfyz_time;
		buffer << ",intime=" << intime;
		buffer << ",speek=" << speek;
		buffer << ",exploits=" << exploits;
		buffer << ",exploits_tindex=" << exploits_tindex;
		buffer << ",reborn=" << reborn;
		buffer << ",sponsorGrade=" << sponsorGrade;
		buffer << ",job=" << job;
	}

public:
	int gid;
	int pid;
	std::string playername;
	int level;
	int post;
	int offtime;
	int contribution;
	int todaycontribution;
	short gender;
	int force;
	int rank_day;
	int rank;
	int vitality;
	int kfyz_time;
	int intime;
	short speek;
	int exploits;
	int exploits_tindex;
	int reborn;
	int sponsorGrade;
	int job;
};

class MsgDBGuildMemberLoad : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 10 };

	MsgDBGuildMemberLoad() :
		MessageEx(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildMemberLoad";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength();
		length += sizeof(int);
		for (size_t i = 0; i < members.size(); ++i)
		{
			length += members[i].getLength(true);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		int members_vector_size = (int)members.size();
		s << members_vector_size;
		if (members_vector_size > 0)
		{
			for (auto it = members.begin(); it != members.end(); ++it)
			{
				(*it).serialize(s, true);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		int members_vector_size = s.read_int32();
		members.clear();
		while (members_vector_size > 0)
		{
			members_vector_size--;
			DBGuildMember val;
			val.unserialize(s, true);
			members.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < members.size(); ++i)
		{
			members[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "members");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",members=[";
		for (size_t i = 0; i < members.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			members[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<DBGuildMember> members;
};

class MsgDBGuildMemberDelete : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 11 };

	MsgDBGuildMemberDelete() :
		MessageEx(Category, Id)
	{
		guildid = 0;
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildMemberDelete";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return guildid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << guildid;
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> guildid;
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guildid", guildid);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",guildid=" << guildid;
		buffer << ",pid=" << pid;
	}

public:
	int guildid;
	int pid;
};

class MsgDBGuildMemberUpdate : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 15 };

	MsgDBGuildMemberUpdate() :
		MessageEx(Category, Id)
	{
		guildid = 0;
		pid = 0;
		post = 0;
		speek = 0;
		offtime = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildMemberUpdate";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return guildid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 18;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << guildid;
		s << pid;
		s << post;
		s << speek;
		s << offtime;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> guildid;
		s >> pid;
		s >> post;
		s >> speek;
		s >> offtime;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guildid", guildid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "post", post);
		lua::settable(L, -1, "speek", speek);
		lua::settable(L, -1, "offtime", offtime);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",guildid=" << guildid;
		buffer << ",pid=" << pid;
		buffer << ",post=" << post;
		buffer << ",speek=" << speek;
		buffer << ",offtime=" << offtime;
	}

public:
	int guildid;
	int pid;
	int post;
	short speek;
	int offtime;
};

class MsgDBGuildMasterUpdate : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 12 };

	MsgDBGuildMasterUpdate() :
		MessageEx(Category, Id)
	{
		guildid = 0;
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildMasterUpdate";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return guildid;
	}

	virtual bool getSendBack() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << guildid;
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> guildid;
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guildid", guildid);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",guildid=" << guildid;
		buffer << ",pid=" << pid;
	}

public:
	int guildid;
	int pid;
};

class MsgDBGuildDelete : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 14 };

	MsgDBGuildDelete() :
		MessageEx(Category, Id)
	{
		guildid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildDelete";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return guildid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << guildid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> guildid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guildid", guildid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",guildid=" << guildid;
	}

public:
	int guildid;
};

class MsgDBGuildPlacardUpdate : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 16 };

	MsgDBGuildPlacardUpdate() :
		MessageEx(Category, Id)
	{
		guildid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildPlacardUpdate";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return guildid;
	}

	virtual bool getSendBack() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 4;
		length += sizeof(short) + placard.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << guildid;
		s << placard;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> guildid;
		s >> placard;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guildid", guildid);
		lua::settable(L, -1, "placard", placard);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",guildid=" << guildid;
		buffer << ",placard=" << placard;
	}

public:
	int guildid;
	std::string placard;
};

class MsgDBGuildPublicnoticeUpdate : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 17 };

	MsgDBGuildPublicnoticeUpdate() :
		MessageEx(Category, Id)
	{
		guildid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildPublicnoticeUpdate";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return guildid;
	}

	virtual bool getSendBack() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 4;
		length += sizeof(short) + publicnotice.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << guildid;
		s << publicnotice;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> guildid;
		s >> publicnotice;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guildid", guildid);
		lua::settable(L, -1, "publicnotice", publicnotice);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",guildid=" << guildid;
		buffer << ",publicnotice=" << publicnotice;
	}

public:
	int guildid;
	std::string publicnotice;
};

class MsgDBGuildMoneyUpdate : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 18 };

	MsgDBGuildMoneyUpdate() :
		MessageEx(Category, Id)
	{
		guildid = 0;
		money = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildMoneyUpdate";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return guildid;
	}

	virtual bool getSendBack() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << guildid;
		s << money;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> guildid;
		s >> money;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guildid", guildid);
		lua::settable(L, -1, "money", money);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",guildid=" << guildid;
		buffer << ",money=" << money;
	}

public:
	int guildid;
	int money;
};

class MsgDBGuildMemberAdd : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 21 };

	MsgDBGuildMemberAdd() :
		MessageEx(Category, Id)
	{
		guildid = 0;
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildMemberAdd";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return guildid;
	}

	virtual bool getSendBack() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << guildid;
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> guildid;
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guildid", guildid);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",guildid=" << guildid;
		buffer << ",pid=" << pid;
	}

public:
	int guildid;
	int pid;
};

struct DBGuildRecord
{
public:
	DBGuildRecord()
	{
		gid = 0;
		type = 0;
		recordtime = 0;
		datax = 0;
		datay = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 18;
		length += sizeof(short) + namex.size();
		length += sizeof(short) + namey.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << gid;
		s << type;
		s << recordtime;
		s << datax;
		s << datay;
		s << namex;
		s << namey;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> gid;
		s >> type;
		s >> recordtime;
		s >> datax;
		s >> datay;
		s >> namex;
		s >> namey;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "gid", gid);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "recordtime", recordtime);
		lua::settable(L, -1, "datax", datax);
		lua::settable(L, -1, "datay", datay);
		lua::settable(L, -1, "namex", namex);
		lua::settable(L, -1, "namey", namey);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "gid=" << gid;
		buffer << ",type=" << type;
		buffer << ",recordtime=" << recordtime;
		buffer << ",datax=" << datax;
		buffer << ",datay=" << datay;
		buffer << ",namex=" << namex;
		buffer << ",namey=" << namey;
	}

public:
	int gid;
	short type;
	int recordtime;
	int datax;
	int datay;
	std::string namex;
	std::string namey;
};

class MsgDBGuildMemberOffTimeUpdate : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 22 };

	MsgDBGuildMemberOffTimeUpdate() :
		MessageEx(Category, Id)
	{
		guildid = 0;
		pid = 0;
		offTime = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildMemberOffTimeUpdate";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return guildid;
	}

	virtual bool getSendBack() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << guildid;
		s << pid;
		s << offTime;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> guildid;
		s >> pid;
		s >> offTime;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guildid", guildid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "offTime", offTime);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",guildid=" << guildid;
		buffer << ",pid=" << pid;
		buffer << ",offTime=" << offTime;
	}

public:
	int guildid;
	int pid;
	int offTime;
};

class MsgDBGuildRecordLoad : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 41 };

	MsgDBGuildRecordLoad() :
		MessageEx(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildRecordLoad";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength();
		length += sizeof(int);
		for (size_t i = 0; i < Records.size(); ++i)
		{
			length += Records[i].getLength(true);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		int Records_vector_size = (int)Records.size();
		s << Records_vector_size;
		if (Records_vector_size > 0)
		{
			for (auto it = Records.begin(); it != Records.end(); ++it)
			{
				(*it).serialize(s, true);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		int Records_vector_size = s.read_int32();
		Records.clear();
		while (Records_vector_size > 0)
		{
			Records_vector_size--;
			DBGuildRecord val;
			val.unserialize(s, true);
			Records.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < Records.size(); ++i)
		{
			Records[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "Records");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",Records=[";
		for (size_t i = 0; i < Records.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			Records[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<DBGuildRecord> Records;
};

class MsgDBGuildRecordAdd : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 42 };

	MsgDBGuildRecordAdd() :
		MessageEx(Category, Id)
	{
		gid = 0;
		type = 0;
		datax = 0;
		datay = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildRecordAdd";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return gid;
	}

	virtual bool getSendBack() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 14;
		length += sizeof(short) + namex.size();
		length += sizeof(short) + namey.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << gid;
		s << type;
		s << datax;
		s << datay;
		s << namex;
		s << namey;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> gid;
		s >> type;
		s >> datax;
		s >> datay;
		s >> namex;
		s >> namey;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "gid", gid);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "datax", datax);
		lua::settable(L, -1, "datay", datay);
		lua::settable(L, -1, "namex", namex);
		lua::settable(L, -1, "namey", namey);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",gid=" << gid;
		buffer << ",type=" << type;
		buffer << ",datax=" << datax;
		buffer << ",datay=" << datay;
		buffer << ",namex=" << namex;
		buffer << ",namey=" << namey;
	}

public:
	int gid;
	short type;
	int datax;
	int datay;
	std::string namex;
	std::string namey;
};

class MsgDBGuildRecordDel : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 43 };

	MsgDBGuildRecordDel() :
		MessageEx(Category, Id)
	{
		gid = 0;
		recordtime = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildRecordDel";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return gid;
	}

	virtual bool getSendBack() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << gid;
		s << recordtime;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> gid;
		s >> recordtime;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "gid", gid);
		lua::settable(L, -1, "recordtime", recordtime);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",gid=" << gid;
		buffer << ",recordtime=" << recordtime;
	}

public:
	int gid;
	int recordtime;
};

struct DBGuildExData
{
public:
	DBGuildExData()
	{
		gid = 0;
		idx = 0;
		data = 0;
	}

	size_t getLength(bool ex) const
	{
		return 12;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << gid;
		s << idx;
		s << data;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> gid;
		s >> idx;
		s >> data;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "gid", gid);
		lua::settable(L, -1, "idx", idx);
		lua::settable(L, -1, "data", data);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "gid=" << gid;
		buffer << ",idx=" << idx;
		buffer << ",data=" << data;
	}

public:
	int gid;
	int idx;
	int data;
};

class MsgDBGuildExDataLoad : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 60 };

	MsgDBGuildExDataLoad() :
		MessageEx(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildExDataLoad";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength();
		length += sizeof(int);
		for (size_t i = 0; i < datas.size(); ++i)
		{
			length += datas[i].getLength(true);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		int datas_vector_size = (int)datas.size();
		s << datas_vector_size;
		if (datas_vector_size > 0)
		{
			for (auto it = datas.begin(); it != datas.end(); ++it)
			{
				(*it).serialize(s, true);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		int datas_vector_size = s.read_int32();
		datas.clear();
		while (datas_vector_size > 0)
		{
			datas_vector_size--;
			DBGuildExData val;
			val.unserialize(s, true);
			datas.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < datas.size(); ++i)
		{
			datas[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "datas");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",datas=[";
		for (size_t i = 0; i < datas.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			datas[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<DBGuildExData> datas;
};

class MsgDBGuildExDataUpdate : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 61 };

	MsgDBGuildExDataUpdate() :
		MessageEx(Category, Id)
	{
		gid = 0;
		idx = 0;
		data = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildExDataUpdate";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return gid;
	}

	virtual bool getSendBack() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << gid;
		s << idx;
		s << data;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> gid;
		s >> idx;
		s >> data;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "gid", gid);
		lua::settable(L, -1, "idx", idx);
		lua::settable(L, -1, "data", data);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",gid=" << gid;
		buffer << ",idx=" << idx;
		buffer << ",data=" << data;
	}

public:
	int gid;
	int idx;
	int data;
};

class MsgDBGuildExDataUpdateAll : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 62 };

	MsgDBGuildExDataUpdateAll() :
		MessageEx(Category, Id)
	{
		idx = 0;
		data = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildExDataUpdateAll";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << idx;
		s << data;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> idx;
		s >> data;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "idx", idx);
		lua::settable(L, -1, "data", data);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",idx=" << idx;
		buffer << ",data=" << data;
	}

public:
	int idx;
	int data;
};

class MsgDBGuildUpdateName : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 71 };

	MsgDBGuildUpdateName() :
		MessageEx(Category, Id)
	{
		guildid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildUpdateName";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return guildid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 4;
		length += sizeof(short) + name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << guildid;
		s << name;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> guildid;
		s >> name;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guildid", guildid);
		lua::settable(L, -1, "name", name);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",guildid=" << guildid;
		buffer << ",name=" << name;
	}

public:
	int guildid;
	std::string name;
};

struct DBGuildLeague
{
public:
	DBGuildLeague()
	{
		guild_id1 = 0;
		guild_id2 = 0;
		ctime = 0;
	}

	size_t getLength(bool ex) const
	{
		return 12;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << guild_id1;
		s << guild_id2;
		s << ctime;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> guild_id1;
		s >> guild_id2;
		s >> ctime;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guild_id1", guild_id1);
		lua::settable(L, -1, "guild_id2", guild_id2);
		lua::settable(L, -1, "ctime", ctime);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "guild_id1=" << guild_id1;
		buffer << ",guild_id2=" << guild_id2;
		buffer << ",ctime=" << ctime;
	}

public:
	int guild_id1; //申请行会ID 
	int guild_id2; //目标行会ID 
	int ctime; //创建时间 
};

class MsgDBGuildLeagueLoad : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 72 };

	MsgDBGuildLeagueLoad() :
		MessageEx(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildLeagueLoad";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength();
		length += sizeof(int);
		for (size_t i = 0; i < leagues.size(); ++i)
		{
			length += leagues[i].getLength(true);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		int leagues_vector_size = (int)leagues.size();
		s << leagues_vector_size;
		if (leagues_vector_size > 0)
		{
			for (auto it = leagues.begin(); it != leagues.end(); ++it)
			{
				(*it).serialize(s, true);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		int leagues_vector_size = s.read_int32();
		leagues.clear();
		while (leagues_vector_size > 0)
		{
			leagues_vector_size--;
			DBGuildLeague val;
			val.unserialize(s, true);
			leagues.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < leagues.size(); ++i)
		{
			leagues[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "leagues");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",leagues=[";
		for (size_t i = 0; i < leagues.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			leagues[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<DBGuildLeague> leagues;
};

class MsgDBGuildLeagueAdd : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 73 };

	MsgDBGuildLeagueAdd() :
		MessageEx(Category, Id)
	{
		guild_id1 = 0;
		guild_id2 = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildLeagueAdd";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << guild_id1;
		s << guild_id2;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> guild_id1;
		s >> guild_id2;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guild_id1", guild_id1);
		lua::settable(L, -1, "guild_id2", guild_id2);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",guild_id1=" << guild_id1;
		buffer << ",guild_id2=" << guild_id2;
	}

public:
	int guild_id1; //申请行会ID 
	int guild_id2; //目标行会ID 
};

class MsgDBGuildLeagueDelete : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 74 };

	MsgDBGuildLeagueDelete() :
		MessageEx(Category, Id)
	{
		guild_id1 = 0;
		guild_id2 = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildLeagueDelete";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << guild_id1;
		s << guild_id2;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> guild_id1;
		s >> guild_id2;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guild_id1", guild_id1);
		lua::settable(L, -1, "guild_id2", guild_id2);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",guild_id1=" << guild_id1;
		buffer << ",guild_id2=" << guild_id2;
	}

public:
	int guild_id1; //申请行会ID 
	int guild_id2; //目标行会ID 
};

struct DBGuildLeagueApp
{
public:
	DBGuildLeagueApp()
	{
		guild_id1 = 0;
		guild_id2 = 0;
		ctime = 0;
	}

	size_t getLength(bool ex) const
	{
		return 12;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << guild_id1;
		s << guild_id2;
		s << ctime;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> guild_id1;
		s >> guild_id2;
		s >> ctime;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guild_id1", guild_id1);
		lua::settable(L, -1, "guild_id2", guild_id2);
		lua::settable(L, -1, "ctime", ctime);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "guild_id1=" << guild_id1;
		buffer << ",guild_id2=" << guild_id2;
		buffer << ",ctime=" << ctime;
	}

public:
	int guild_id1; //申请行会ID 
	int guild_id2; //目标行会ID 
	int ctime; //申请时间 
};

class MsgDBGuildLeagueAppLoad : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 75 };

	MsgDBGuildLeagueAppLoad() :
		MessageEx(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildLeagueAppLoad";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength();
		length += sizeof(int);
		for (size_t i = 0; i < apps.size(); ++i)
		{
			length += apps[i].getLength(true);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		int apps_vector_size = (int)apps.size();
		s << apps_vector_size;
		if (apps_vector_size > 0)
		{
			for (auto it = apps.begin(); it != apps.end(); ++it)
			{
				(*it).serialize(s, true);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		int apps_vector_size = s.read_int32();
		apps.clear();
		while (apps_vector_size > 0)
		{
			apps_vector_size--;
			DBGuildLeagueApp val;
			val.unserialize(s, true);
			apps.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < apps.size(); ++i)
		{
			apps[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "apps");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",apps=[";
		for (size_t i = 0; i < apps.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			apps[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<DBGuildLeagueApp> apps;
};

class MsgDBGuildLeagueAppAdd : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 76 };

	MsgDBGuildLeagueAppAdd() :
		MessageEx(Category, Id)
	{
		guild_id1 = 0;
		guild_id2 = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildLeagueAppAdd";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << guild_id1;
		s << guild_id2;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> guild_id1;
		s >> guild_id2;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guild_id1", guild_id1);
		lua::settable(L, -1, "guild_id2", guild_id2);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",guild_id1=" << guild_id1;
		buffer << ",guild_id2=" << guild_id2;
	}

public:
	int guild_id1; //申请行会ID 
	int guild_id2; //目标行会ID 
};

class MsgDBGuildLeagueAppDelete : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 77 };

	MsgDBGuildLeagueAppDelete() :
		MessageEx(Category, Id)
	{
		guild_id1 = 0;
		guild_id2 = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildLeagueAppDelete";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << guild_id1;
		s << guild_id2;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> guild_id1;
		s >> guild_id2;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guild_id1", guild_id1);
		lua::settable(L, -1, "guild_id2", guild_id2);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",guild_id1=" << guild_id1;
		buffer << ",guild_id2=" << guild_id2;
	}

public:
	int guild_id1; //申请行会ID 
	int guild_id2; //目标行会ID 
};

struct DBGuildMemberRank
{
public:
	DBGuildMemberRank()
	{
		gid = 0;
		pid = 0;
		contribution = 0;
	}

	size_t getLength(bool ex) const
	{
		return 12;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << gid;
		s << pid;
		s << contribution;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> gid;
		s >> pid;
		s >> contribution;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "gid", gid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "contribution", contribution);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "gid=" << gid;
		buffer << ",pid=" << pid;
		buffer << ",contribution=" << contribution;
	}

public:
	int gid;
	int pid;
	int contribution;
};

class MsgDBGuildMemberRankLoad : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 81 };

	MsgDBGuildMemberRankLoad() :
		MessageEx(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildMemberRankLoad";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength();
		length += sizeof(int);
		for (size_t i = 0; i < members.size(); ++i)
		{
			length += members[i].getLength(true);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		int members_vector_size = (int)members.size();
		s << members_vector_size;
		if (members_vector_size > 0)
		{
			for (auto it = members.begin(); it != members.end(); ++it)
			{
				(*it).serialize(s, true);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		int members_vector_size = s.read_int32();
		members.clear();
		while (members_vector_size > 0)
		{
			members_vector_size--;
			DBGuildMemberRank val;
			val.unserialize(s, true);
			members.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < members.size(); ++i)
		{
			members[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "members");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",members=[";
		for (size_t i = 0; i < members.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			members[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<DBGuildMemberRank> members;
};

struct DBGuildRed
{
public:
	DBGuildRed()
	{
		id = 0;
		redtype = 0;
		guildid = 0;
		maxgold = 0;
		createtime = 0;
		maxcount = 0;
		curcount = 0;
		curgold = 0;
		pid = 0;
		job = 0;
		gender = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 42;
		length += sizeof(short) + name.size();
		length += sizeof(short) + desc.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << id;
		s << redtype;
		s << guildid;
		s << maxgold;
		s << createtime;
		s << maxcount;
		s << curcount;
		s << curgold;
		s << pid;
		s << job;
		s << gender;
		s << name;
		s << desc;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> id;
		s >> redtype;
		s >> guildid;
		s >> maxgold;
		s >> createtime;
		s >> maxcount;
		s >> curcount;
		s >> curgold;
		s >> pid;
		s >> job;
		s >> gender;
		s >> name;
		s >> desc;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "redtype", redtype);
		lua::settable(L, -1, "guildid", guildid);
		lua::settable(L, -1, "maxgold", maxgold);
		lua::settable(L, -1, "createtime", createtime);
		lua::settable(L, -1, "maxcount", maxcount);
		lua::settable(L, -1, "curcount", curcount);
		lua::settable(L, -1, "curgold", curgold);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "job", job);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "desc", desc);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",redtype=" << redtype;
		buffer << ",guildid=" << guildid;
		buffer << ",maxgold=" << maxgold;
		buffer << ",createtime=" << createtime;
		buffer << ",maxcount=" << maxcount;
		buffer << ",curcount=" << curcount;
		buffer << ",curgold=" << curgold;
		buffer << ",pid=" << pid;
		buffer << ",job=" << job;
		buffer << ",gender=" << gender;
		buffer << ",name=" << name;
		buffer << ",desc=" << desc;
	}

public:
	int id;
	short redtype;
	int guildid;
	int maxgold;
	int createtime;
	int maxcount;
	int curcount;
	int curgold;
	int pid;
	int job;
	int gender;
	std::string name;
	std::string desc;
};

class MsgDBGuildRedLoad : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 82 };

	MsgDBGuildRedLoad() :
		MessageEx(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildRedLoad";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength();
		length += sizeof(int);
		for (size_t i = 0; i < GuildReds.size(); ++i)
		{
			length += GuildReds[i].getLength(true);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		int GuildReds_vector_size = (int)GuildReds.size();
		s << GuildReds_vector_size;
		if (GuildReds_vector_size > 0)
		{
			for (auto it = GuildReds.begin(); it != GuildReds.end(); ++it)
			{
				(*it).serialize(s, true);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		int GuildReds_vector_size = s.read_int32();
		GuildReds.clear();
		while (GuildReds_vector_size > 0)
		{
			GuildReds_vector_size--;
			DBGuildRed val;
			val.unserialize(s, true);
			GuildReds.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < GuildReds.size(); ++i)
		{
			GuildReds[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "GuildReds");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",GuildReds=[";
		for (size_t i = 0; i < GuildReds.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			GuildReds[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<DBGuildRed> GuildReds;
};

class MsgDBGuildRedAdd : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 83 };

	MsgDBGuildRedAdd() :
		MessageEx(Category, Id)
	{
		id = 0;
		redtype = 0;
		guildid = 0;
		maxgold = 0;
		createtime = 0;
		maxcount = 0;
		curcount = 0;
		curgold = 0;
		pid = 0;
		job = 0;
		vipLevel = 0;
		gender = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildRedAdd";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return guildid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 46;
		length += sizeof(short) + name.size();
		length += sizeof(short) + desc.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << id;
		s << redtype;
		s << guildid;
		s << maxgold;
		s << createtime;
		s << maxcount;
		s << curcount;
		s << curgold;
		s << pid;
		s << job;
		s << vipLevel;
		s << gender;
		s << name;
		s << desc;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> id;
		s >> redtype;
		s >> guildid;
		s >> maxgold;
		s >> createtime;
		s >> maxcount;
		s >> curcount;
		s >> curgold;
		s >> pid;
		s >> job;
		s >> vipLevel;
		s >> gender;
		s >> name;
		s >> desc;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "redtype", redtype);
		lua::settable(L, -1, "guildid", guildid);
		lua::settable(L, -1, "maxgold", maxgold);
		lua::settable(L, -1, "createtime", createtime);
		lua::settable(L, -1, "maxcount", maxcount);
		lua::settable(L, -1, "curcount", curcount);
		lua::settable(L, -1, "curgold", curgold);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "job", job);
		lua::settable(L, -1, "vipLevel", vipLevel);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "desc", desc);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",id=" << id;
		buffer << ",redtype=" << redtype;
		buffer << ",guildid=" << guildid;
		buffer << ",maxgold=" << maxgold;
		buffer << ",createtime=" << createtime;
		buffer << ",maxcount=" << maxcount;
		buffer << ",curcount=" << curcount;
		buffer << ",curgold=" << curgold;
		buffer << ",pid=" << pid;
		buffer << ",job=" << job;
		buffer << ",vipLevel=" << vipLevel;
		buffer << ",gender=" << gender;
		buffer << ",name=" << name;
		buffer << ",desc=" << desc;
	}

public:
	int id;
	short redtype;
	int guildid;
	int maxgold;
	int createtime;
	int maxcount;
	int curcount;
	int curgold;
	int pid;
	int job;
	int vipLevel;
	int gender;
	std::string name;
	std::string desc;
};

class MsgDBGuildRedUpdate : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 84 };

	MsgDBGuildRedUpdate() :
		MessageEx(Category, Id)
	{
		id = 0;
		curgold = 0;
		curcount = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildRedUpdate";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return id;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << id;
		s << curgold;
		s << curcount;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> id;
		s >> curgold;
		s >> curcount;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "curgold", curgold);
		lua::settable(L, -1, "curcount", curcount);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",id=" << id;
		buffer << ",curgold=" << curgold;
		buffer << ",curcount=" << curcount;
	}

public:
	int id;
	int curgold;
	int curcount;
};

struct DBGuildRedRecord
{
public:
	DBGuildRedRecord()
	{
		id = 0;
		redid = 0;
		redtype = 0;
		guildid = 0;
		spid = 0;
		gold = 0;
		dpid = 0;
		djob = 0;
		dgender = 0;
		type = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 38;
		length += sizeof(short) + sname.size();
		length += sizeof(short) + dname.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << id;
		s << redid;
		s << redtype;
		s << guildid;
		s << spid;
		s << sname;
		s << gold;
		s << dpid;
		s << djob;
		s << dgender;
		s << dname;
		s << type;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> id;
		s >> redid;
		s >> redtype;
		s >> guildid;
		s >> spid;
		s >> sname;
		s >> gold;
		s >> dpid;
		s >> djob;
		s >> dgender;
		s >> dname;
		s >> type;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "redid", redid);
		lua::settable(L, -1, "redtype", redtype);
		lua::settable(L, -1, "guildid", guildid);
		lua::settable(L, -1, "spid", spid);
		lua::settable(L, -1, "sname", sname);
		lua::settable(L, -1, "gold", gold);
		lua::settable(L, -1, "dpid", dpid);
		lua::settable(L, -1, "djob", djob);
		lua::settable(L, -1, "dgender", dgender);
		lua::settable(L, -1, "dname", dname);
		lua::settable(L, -1, "type", type);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",redid=" << redid;
		buffer << ",redtype=" << redtype;
		buffer << ",guildid=" << guildid;
		buffer << ",spid=" << spid;
		buffer << ",sname=" << sname;
		buffer << ",gold=" << gold;
		buffer << ",dpid=" << dpid;
		buffer << ",djob=" << djob;
		buffer << ",dgender=" << dgender;
		buffer << ",dname=" << dname;
		buffer << ",type=" << type;
	}

public:
	int id;
	int redid;
	short redtype;
	int guildid;
	int spid;
	std::string sname;
	int gold;
	int dpid;
	int djob;
	int dgender;
	std::string dname;
	int type;
};

class MsgDBGuildRedRecordLoad : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 85 };

	MsgDBGuildRedRecordLoad() :
		MessageEx(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildRedRecordLoad";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength();
		length += sizeof(int);
		for (size_t i = 0; i < GuildRedRecords.size(); ++i)
		{
			length += GuildRedRecords[i].getLength(true);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		int GuildRedRecords_vector_size = (int)GuildRedRecords.size();
		s << GuildRedRecords_vector_size;
		if (GuildRedRecords_vector_size > 0)
		{
			for (auto it = GuildRedRecords.begin(); it != GuildRedRecords.end(); ++it)
			{
				(*it).serialize(s, true);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		int GuildRedRecords_vector_size = s.read_int32();
		GuildRedRecords.clear();
		while (GuildRedRecords_vector_size > 0)
		{
			GuildRedRecords_vector_size--;
			DBGuildRedRecord val;
			val.unserialize(s, true);
			GuildRedRecords.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < GuildRedRecords.size(); ++i)
		{
			GuildRedRecords[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "GuildRedRecords");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",GuildRedRecords=[";
		for (size_t i = 0; i < GuildRedRecords.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			GuildRedRecords[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<DBGuildRedRecord> GuildRedRecords;
};

class MsgDBGuildRedRecordAdd : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 86 };

	MsgDBGuildRedRecordAdd() :
		MessageEx(Category, Id)
	{
		redid = 0;
		redtype = 0;
		guildid = 0;
		spid = 0;
		gold = 0;
		dpid = 0;
		djob = 0;
		dgender = 0;
		type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildRedRecordAdd";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return redid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 34;
		length += sizeof(short) + sname.size();
		length += sizeof(short) + dname.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << redid;
		s << redtype;
		s << guildid;
		s << spid;
		s << sname;
		s << gold;
		s << dpid;
		s << djob;
		s << dgender;
		s << dname;
		s << type;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> redid;
		s >> redtype;
		s >> guildid;
		s >> spid;
		s >> sname;
		s >> gold;
		s >> dpid;
		s >> djob;
		s >> dgender;
		s >> dname;
		s >> type;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "redid", redid);
		lua::settable(L, -1, "redtype", redtype);
		lua::settable(L, -1, "guildid", guildid);
		lua::settable(L, -1, "spid", spid);
		lua::settable(L, -1, "sname", sname);
		lua::settable(L, -1, "gold", gold);
		lua::settable(L, -1, "dpid", dpid);
		lua::settable(L, -1, "djob", djob);
		lua::settable(L, -1, "dgender", dgender);
		lua::settable(L, -1, "dname", dname);
		lua::settable(L, -1, "type", type);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",redid=" << redid;
		buffer << ",redtype=" << redtype;
		buffer << ",guildid=" << guildid;
		buffer << ",spid=" << spid;
		buffer << ",sname=" << sname;
		buffer << ",gold=" << gold;
		buffer << ",dpid=" << dpid;
		buffer << ",djob=" << djob;
		buffer << ",dgender=" << dgender;
		buffer << ",dname=" << dname;
		buffer << ",type=" << type;
	}

public:
	int redid;
	short redtype;
	int guildid;
	int spid;
	std::string sname;
	int gold;
	int dpid;
	int djob;
	int dgender;
	std::string dname;
	int type;
};

class MsgDBGuildRedDel : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 87 };

	MsgDBGuildRedDel() :
		MessageEx(Category, Id)
	{
		guildid = 0;
		redid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildRedDel";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return redid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << guildid;
		s << redid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> guildid;
		s >> redid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guildid", guildid);
		lua::settable(L, -1, "redid", redid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",guildid=" << guildid;
		buffer << ",redid=" << redid;
	}

public:
	int guildid;
	int redid;
};

struct DBGczLeaderInfo
{
public:
	DBGczLeaderInfo()
	{
		pid = 0;
		gender = 0;
		job = 0;
		weapon = 0;
		cloth = 0;
		hat = 0;
		shield = 0;
		guardLevel = 0;
		hunhuan = 0;
		jingling = 0;
		post = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 38;
		length += sizeof(short) + name.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << pid;
		s << name;
		s << gender;
		s << job;
		s << weapon;
		s << cloth;
		s << hat;
		s << shield;
		s << guardLevel;
		s << hunhuan;
		s << jingling;
		s << post;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> pid;
		s >> name;
		s >> gender;
		s >> job;
		s >> weapon;
		s >> cloth;
		s >> hat;
		s >> shield;
		s >> guardLevel;
		s >> hunhuan;
		s >> jingling;
		s >> post;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "job", job);
		lua::settable(L, -1, "weapon", weapon);
		lua::settable(L, -1, "cloth", cloth);
		lua::settable(L, -1, "hat", hat);
		lua::settable(L, -1, "shield", shield);
		lua::settable(L, -1, "guardLevel", guardLevel);
		lua::settable(L, -1, "hunhuan", hunhuan);
		lua::settable(L, -1, "jingling", jingling);
		lua::settable(L, -1, "post", post);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",gender=" << gender;
		buffer << ",job=" << job;
		buffer << ",weapon=" << weapon;
		buffer << ",cloth=" << cloth;
		buffer << ",hat=" << hat;
		buffer << ",shield=" << shield;
		buffer << ",guardLevel=" << guardLevel;
		buffer << ",hunhuan=" << hunhuan;
		buffer << ",jingling=" << jingling;
		buffer << ",post=" << post;
	}

public:
	int pid;
	std::string name;
	short gender;
	short job;
	int weapon;
	int cloth;
	int hat;
	int shield;
	int guardLevel;
	int hunhuan;
	int jingling;
	short post;
};

class MsgDBSeachGczLeader : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 88 };

	MsgDBSeachGczLeader() :
		MessageEx(Category, Id)
	{
		pid = 0;
		guildid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBSeachGczLeader";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 8;
		length += sizeof(int);
		for (size_t i = 0; i < vInfo.size(); ++i)
		{
			length += vInfo[i].getLength(true);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << pid;
		s << guildid;
		int vInfo_vector_size = (int)vInfo.size();
		s << vInfo_vector_size;
		if (vInfo_vector_size > 0)
		{
			for (auto it = vInfo.begin(); it != vInfo.end(); ++it)
			{
				(*it).serialize(s, true);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> pid;
		s >> guildid;
		int vInfo_vector_size = s.read_int32();
		vInfo.clear();
		while (vInfo_vector_size > 0)
		{
			vInfo_vector_size--;
			DBGczLeaderInfo val;
			val.unserialize(s, true);
			vInfo.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "guildid", guildid);
		lua::newtable(lua::L);
		for (size_t i = 0; i < vInfo.size(); ++i)
		{
			vInfo[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "vInfo");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",pid=" << pid;
		buffer << ",guildid=" << guildid;
		buffer << ",vInfo=[";
		for (size_t i = 0; i < vInfo.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			vInfo[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int pid;
	int guildid;
	std::vector<DBGczLeaderInfo> vInfo;
};

class MsgDBClearGuilds : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 89 };

	MsgDBClearGuilds() :
		MessageEx(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgDBClearGuilds";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return __super::getLength();
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
	}

public:
};

class MsgDBQmRedRecordAdd : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 90 };

	MsgDBQmRedRecordAdd() :
		MessageEx(Category, Id)
	{
		spid = 0;
		gender = 0;
		job = 0;
		guildid = 0;
		money = 0;
		moneyall = 0;
		mode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBQmRedRecordAdd";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return spid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 28;
		length += sizeof(short) + sname.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << spid;
		s << sname;
		s << gender;
		s << job;
		s << guildid;
		s << money;
		s << moneyall;
		s << mode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> spid;
		s >> sname;
		s >> gender;
		s >> job;
		s >> guildid;
		s >> money;
		s >> moneyall;
		s >> mode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "spid", spid);
		lua::settable(L, -1, "sname", sname);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "job", job);
		lua::settable(L, -1, "guildid", guildid);
		lua::settable(L, -1, "money", money);
		lua::settable(L, -1, "moneyall", moneyall);
		lua::settable(L, -1, "mode", mode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",spid=" << spid;
		buffer << ",sname=" << sname;
		buffer << ",gender=" << gender;
		buffer << ",job=" << job;
		buffer << ",guildid=" << guildid;
		buffer << ",money=" << money;
		buffer << ",moneyall=" << moneyall;
		buffer << ",mode=" << mode;
	}

public:
	int spid;
	std::string sname;
	int gender;
	int job;
	int guildid;
	int money;
	int moneyall;
	int mode;
};

struct DBQmRedRecord
{
public:
	DBQmRedRecord()
	{
		id = 0;
		spid = 0;
		gender = 0;
		job = 0;
		guildid = 0;
		money = 0;
		moneyall = 0;
		mode = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 32;
		length += sizeof(short) + sname.size();
		length += sizeof(short) + guildname.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << id;
		s << spid;
		s << sname;
		s << gender;
		s << job;
		s << guildid;
		s << guildname;
		s << money;
		s << moneyall;
		s << mode;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> id;
		s >> spid;
		s >> sname;
		s >> gender;
		s >> job;
		s >> guildid;
		s >> guildname;
		s >> money;
		s >> moneyall;
		s >> mode;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "spid", spid);
		lua::settable(L, -1, "sname", sname);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "job", job);
		lua::settable(L, -1, "guildid", guildid);
		lua::settable(L, -1, "guildname", guildname);
		lua::settable(L, -1, "money", money);
		lua::settable(L, -1, "moneyall", moneyall);
		lua::settable(L, -1, "mode", mode);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",spid=" << spid;
		buffer << ",sname=" << sname;
		buffer << ",gender=" << gender;
		buffer << ",job=" << job;
		buffer << ",guildid=" << guildid;
		buffer << ",guildname=" << guildname;
		buffer << ",money=" << money;
		buffer << ",moneyall=" << moneyall;
		buffer << ",mode=" << mode;
	}

public:
	int id;
	int spid;
	std::string sname;
	int gender;
	int job;
	int guildid;
	std::string guildname;
	int money;
	int moneyall;
	int mode;
};

class MsgDBQmRedRecordLoad : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 91 };

	MsgDBQmRedRecordLoad() :
		MessageEx(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBQmRedRecordLoad";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 4;
		length += sizeof(int);
		for (size_t i = 0; i < QmRedRecord.size(); ++i)
		{
			length += QmRedRecord[i].getLength(true);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << pid;
		int QmRedRecord_vector_size = (int)QmRedRecord.size();
		s << QmRedRecord_vector_size;
		if (QmRedRecord_vector_size > 0)
		{
			for (auto it = QmRedRecord.begin(); it != QmRedRecord.end(); ++it)
			{
				(*it).serialize(s, true);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> pid;
		int QmRedRecord_vector_size = s.read_int32();
		QmRedRecord.clear();
		while (QmRedRecord_vector_size > 0)
		{
			QmRedRecord_vector_size--;
			DBQmRedRecord val;
			val.unserialize(s, true);
			QmRedRecord.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::newtable(lua::L);
		for (size_t i = 0; i < QmRedRecord.size(); ++i)
		{
			QmRedRecord[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "QmRedRecord");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",pid=" << pid;
		buffer << ",QmRedRecord=[";
		for (size_t i = 0; i < QmRedRecord.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			QmRedRecord[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int pid;
	std::vector<DBQmRedRecord> QmRedRecord;
};

class MsgDBQmRedRecordClear : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 92 };

	MsgDBQmRedRecordClear() :
		MessageEx(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgDBQmRedRecordClear";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength();
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
	}

public:
};

struct DBQmRedOrderItem
{
public:
	DBQmRedOrderItem()
	{
		id = 0;
		order = 0;
		spid = 0;
		money = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 16;
		length += sizeof(short) + sname.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << id;
		s << order;
		s << spid;
		s << sname;
		s << money;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> id;
		s >> order;
		s >> spid;
		s >> sname;
		s >> money;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "order", order);
		lua::settable(L, -1, "spid", spid);
		lua::settable(L, -1, "sname", sname);
		lua::settable(L, -1, "money", money);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",order=" << order;
		buffer << ",spid=" << spid;
		buffer << ",sname=" << sname;
		buffer << ",money=" << money;
	}

public:
	int id;
	int order;
	int spid;
	std::string sname;
	int money;
};

class MsgDBQmRedOrderUpdate : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 93 };

	MsgDBQmRedOrderUpdate() :
		MessageEx(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgDBQmRedOrderUpdate";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength();
		length += sizeof(int);
		for (size_t i = 0; i < qmRedOrderItem.size(); ++i)
		{
			length += qmRedOrderItem[i].getLength(true);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		int qmRedOrderItem_vector_size = (int)qmRedOrderItem.size();
		s << qmRedOrderItem_vector_size;
		if (qmRedOrderItem_vector_size > 0)
		{
			for (auto it = qmRedOrderItem.begin(); it != qmRedOrderItem.end(); ++it)
			{
				(*it).serialize(s, true);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		int qmRedOrderItem_vector_size = s.read_int32();
		qmRedOrderItem.clear();
		while (qmRedOrderItem_vector_size > 0)
		{
			qmRedOrderItem_vector_size--;
			DBQmRedOrderItem val;
			val.unserialize(s, true);
			qmRedOrderItem.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < qmRedOrderItem.size(); ++i)
		{
			qmRedOrderItem[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "qmRedOrderItem");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",qmRedOrderItem=[";
		for (size_t i = 0; i < qmRedOrderItem.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			qmRedOrderItem[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<DBQmRedOrderItem> qmRedOrderItem;
};

struct GuildQFInfo
{
public:
	GuildQFInfo()
	{
		id = 0;
		guildid = 0;
		percent = 0;
		percentOld = 0;
	}

	size_t getLength(bool ex) const
	{
		return 16;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << id;
		s << guildid;
		s << percent;
		s << percentOld;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> id;
		s >> guildid;
		s >> percent;
		s >> percentOld;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "guildid", guildid);
		lua::settable(L, -1, "percent", percent);
		lua::settable(L, -1, "percentOld", percentOld);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",guildid=" << guildid;
		buffer << ",percent=" << percent;
		buffer << ",percentOld=" << percentOld;
	}

public:
	int id;
	int guildid;
	int percent;
	int percentOld;
};

class MsgDBQiFuLoad : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 94 };

	MsgDBQiFuLoad() :
		MessageEx(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgDBQiFuLoad";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength();
		length += sizeof(int);
		for (size_t i = 0; i < guildQfItems.size(); ++i)
		{
			length += guildQfItems[i].getLength(true);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		int guildQfItems_vector_size = (int)guildQfItems.size();
		s << guildQfItems_vector_size;
		if (guildQfItems_vector_size > 0)
		{
			for (auto it = guildQfItems.begin(); it != guildQfItems.end(); ++it)
			{
				(*it).serialize(s, true);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		int guildQfItems_vector_size = s.read_int32();
		guildQfItems.clear();
		while (guildQfItems_vector_size > 0)
		{
			guildQfItems_vector_size--;
			GuildQFInfo val;
			val.unserialize(s, true);
			guildQfItems.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < guildQfItems.size(); ++i)
		{
			guildQfItems[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "guildQfItems");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",guildQfItems=[";
		for (size_t i = 0; i < guildQfItems.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			guildQfItems[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<GuildQFInfo> guildQfItems;
};

class MsgDBQiFuUpdate : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 95 };

	MsgDBQiFuUpdate() :
		MessageEx(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgDBQiFuUpdate";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength();
		length += sizeof(int);
		for (size_t i = 0; i < guildQfItems.size(); ++i)
		{
			length += guildQfItems[i].getLength(true);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		int guildQfItems_vector_size = (int)guildQfItems.size();
		s << guildQfItems_vector_size;
		if (guildQfItems_vector_size > 0)
		{
			for (auto it = guildQfItems.begin(); it != guildQfItems.end(); ++it)
			{
				(*it).serialize(s, true);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		int guildQfItems_vector_size = s.read_int32();
		guildQfItems.clear();
		while (guildQfItems_vector_size > 0)
		{
			guildQfItems_vector_size--;
			GuildQFInfo val;
			val.unserialize(s, true);
			guildQfItems.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < guildQfItems.size(); ++i)
		{
			guildQfItems[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "guildQfItems");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",guildQfItems=[";
		for (size_t i = 0; i < guildQfItems.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			guildQfItems[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<GuildQFInfo> guildQfItems;
};

struct DBGuildShopItems
{
public:
	DBGuildShopItems()
	{
		guildid = 0;
		sid = 0;
		buycount = 0;
	}

	size_t getLength(bool ex) const
	{
		return 12;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << guildid;
		s << sid;
		s << buycount;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> guildid;
		s >> sid;
		s >> buycount;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guildid", guildid);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "buycount", buycount);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "guildid=" << guildid;
		buffer << ",sid=" << sid;
		buffer << ",buycount=" << buycount;
	}

public:
	int guildid;
	int sid;
	int buycount;
};

class MsgDBLoadGuildShop : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 96 };

	MsgDBLoadGuildShop() :
		MessageEx(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgDBLoadGuildShop";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength();
		length += sizeof(int);
		for (size_t i = 0; i < items.size(); ++i)
		{
			length += items[i].getLength(true);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		int items_vector_size = (int)items.size();
		s << items_vector_size;
		if (items_vector_size > 0)
		{
			for (auto it = items.begin(); it != items.end(); ++it)
			{
				(*it).serialize(s, true);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		int items_vector_size = s.read_int32();
		items.clear();
		while (items_vector_size > 0)
		{
			items_vector_size--;
			DBGuildShopItems val;
			val.unserialize(s, true);
			items.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < items.size(); ++i)
		{
			items[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "items");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",items=[";
		for (size_t i = 0; i < items.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			items[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<DBGuildShopItems> items;
};

class MsgDBGuildShopAdd : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 97 };

	MsgDBGuildShopAdd() :
		MessageEx(Category, Id)
	{
		guildId = 0;
		sid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildShopAdd";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << guildId;
		s << sid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> guildId;
		s >> sid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guildId", guildId);
		lua::settable(L, -1, "sid", sid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",guildId=" << guildId;
		buffer << ",sid=" << sid;
	}

public:
	int guildId;
	int sid;
};

class MsgDBGuildShopDel : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 98 };

	MsgDBGuildShopDel() :
		MessageEx(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildShopDel";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength();
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
	}

public:
};

class MsgDBUpdataGuildShopItemNum : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 99 };

	MsgDBUpdataGuildShopItemNum() :
		MessageEx(Category, Id)
	{
		guildId = 0;
		sid = 0;
		sellCount = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBUpdataGuildShopItemNum";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << guildId;
		s << sid;
		s << sellCount;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> guildId;
		s >> sid;
		s >> sellCount;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guildId", guildId);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "sellCount", sellCount);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",guildId=" << guildId;
		buffer << ",sid=" << sid;
		buffer << ",sellCount=" << sellCount;
	}

public:
	int guildId;
	int sid;
	int sellCount;
};

struct DBGuildCrossIntegralItem
{
public:
	DBGuildCrossIntegralItem()
	{
		sid = 0;
		value = 0;
	}

	size_t getLength(bool ex) const
	{
		return 8;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << sid;
		s << value;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> sid;
		s >> value;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "value", value);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "sid=" << sid;
		buffer << ",value=" << value;
	}

public:
	int sid;
	int value;
};

class MsgDBLoadGuildCrossIntegral : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 100 };

	MsgDBLoadGuildCrossIntegral() :
		MessageEx(Category, Id)
	{
		guildId = 0;
		eventid = 0;
		tindex = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBLoadGuildCrossIntegral";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 12;
		length += sizeof(int);
		for (size_t i = 0; i < members.size(); ++i)
		{
			length += members[i].getLength(true);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << guildId;
		s << eventid;
		s << tindex;
		int members_vector_size = (int)members.size();
		s << members_vector_size;
		if (members_vector_size > 0)
		{
			for (auto it = members.begin(); it != members.end(); ++it)
			{
				(*it).serialize(s, true);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> guildId;
		s >> eventid;
		s >> tindex;
		int members_vector_size = s.read_int32();
		members.clear();
		while (members_vector_size > 0)
		{
			members_vector_size--;
			DBGuildCrossIntegralItem val;
			val.unserialize(s, true);
			members.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guildId", guildId);
		lua::settable(L, -1, "eventid", eventid);
		lua::settable(L, -1, "tindex", tindex);
		lua::newtable(lua::L);
		for (size_t i = 0; i < members.size(); ++i)
		{
			members[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "members");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",guildId=" << guildId;
		buffer << ",eventid=" << eventid;
		buffer << ",tindex=" << tindex;
		buffer << ",members=[";
		for (size_t i = 0; i < members.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			members[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int guildId;
	int eventid;
	int tindex;
	std::vector<DBGuildCrossIntegralItem> members;
};

struct DBGuildGuishiItems
{
public:
	DBGuildGuishiItems()
	{
		guildid = 0;
		sid = 0;
		cid = 0;
	}

	size_t getLength(bool ex) const
	{
		return 12;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << guildid;
		s << sid;
		s << cid;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> guildid;
		s >> sid;
		s >> cid;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guildid", guildid);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "cid", cid);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "guildid=" << guildid;
		buffer << ",sid=" << sid;
		buffer << ",cid=" << cid;
	}

public:
	int guildid;
	int sid;
	int cid;
};

class MsgDBLoadGuildGuishi : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 101 };

	MsgDBLoadGuildGuishi() :
		MessageEx(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgDBLoadGuildGuishi";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength();
		length += sizeof(int);
		for (size_t i = 0; i < items.size(); ++i)
		{
			length += items[i].getLength(true);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		int items_vector_size = (int)items.size();
		s << items_vector_size;
		if (items_vector_size > 0)
		{
			for (auto it = items.begin(); it != items.end(); ++it)
			{
				(*it).serialize(s, true);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		int items_vector_size = s.read_int32();
		items.clear();
		while (items_vector_size > 0)
		{
			items_vector_size--;
			DBGuildGuishiItems val;
			val.unserialize(s, true);
			items.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < items.size(); ++i)
		{
			items[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "items");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",items=[";
		for (size_t i = 0; i < items.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			items[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<DBGuildGuishiItems> items;
};

class MsgDBGuildGuishiAdd : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 102 };

	MsgDBGuildGuishiAdd() :
		MessageEx(Category, Id)
	{
		guildId = 0;
		sid = 0;
		cid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildGuishiAdd";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << guildId;
		s << sid;
		s << cid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> guildId;
		s >> sid;
		s >> cid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guildId", guildId);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "cid", cid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",guildId=" << guildId;
		buffer << ",sid=" << sid;
		buffer << ",cid=" << cid;
	}

public:
	int guildId;
	int sid;
	int cid;
};

class MsgDBGuildGuishiDel : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_GUILD, Id = 103 };

	MsgDBGuildGuishiDel() :
		MessageEx(Category, Id)
	{
		guildId = 0;
		cid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBGuildGuishiDel";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << guildId;
		s << cid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> guildId;
		s >> cid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guildId", guildId);
		lua::settable(L, -1, "cid", cid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",guildId=" << guildId;
		buffer << ",cid=" << cid;
	}

public:
	int guildId;
	int cid;
};

#endif	//_DB_MSG_GUILD_H_INCLUDED
