//
//Generated by lua
//2009-2012	(C) XianFeng Inc. Reserved
//

#ifndef _MSG_ZHAN_DUI_H_INCLUDED
#define _MSG_ZHAN_DUI_H_INCLUDED

#include "category.h"
#include "common/Message.h"

struct ZhanDuiInfo
{
public:
	ZhanDuiInfo()
	{
		zhandui_id = 0;
		master_id = 0;
		master_online = 0;
		member_count = 0;
		auto_join_reborn = 0;
		ctime = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 19;
		length += sizeof(short) + zhandui_name.size();
		length += sizeof(short) + master_name.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << zhandui_id;
		s << zhandui_name;
		s << master_id;
		s << master_name;
		s << master_online;
		s << member_count;
		s << auto_join_reborn;
		s << ctime;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> zhandui_id;
		s >> zhandui_name;
		s >> master_id;
		s >> master_name;
		s >> master_online;
		s >> member_count;
		s >> auto_join_reborn;
		s >> ctime;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "zhandui_id", zhandui_id);
		lua::settable(L, -1, "zhandui_name", zhandui_name);
		lua::settable(L, -1, "master_id", master_id);
		lua::settable(L, -1, "master_name", master_name);
		lua::settable(L, -1, "master_online", master_online);
		lua::settable(L, -1, "member_count", member_count);
		lua::settable(L, -1, "auto_join_reborn", auto_join_reborn);
		lua::settable(L, -1, "ctime", ctime);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "zhandui_id=" << zhandui_id;
		buffer << ",zhandui_name=" << zhandui_name;
		buffer << ",master_id=" << master_id;
		buffer << ",master_name=" << master_name;
		buffer << ",master_online=" << master_online;
		buffer << ",member_count=" << member_count;
		buffer << ",auto_join_reborn=" << auto_join_reborn;
		buffer << ",ctime=" << ctime;
	}

public:
	int zhandui_id;
	std::string zhandui_name;
	int master_id;
	std::string master_name;
	char master_online;
	short member_count;
	int auto_join_reborn;
	int ctime;
};

class MsgZhanDuiListRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ZHANDUI, Id = 1 };

	MsgZhanDuiListRequest() :
		Message(Category, Id)
	{
		version = 0;
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiListRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << version;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> version;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "version", version);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "version=" << version;
	}

public:
	short version;
};

class MsgZhanDuiListResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ZHANDUI, Id = 2 };

	MsgZhanDuiListResponse() :
		Message(Category, Id)
	{
		version = 0;
		maxpage = 0;
		page = 0;
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiListResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 8;
		length += sizeof(short);
		for (size_t i = 0; i < zhanduis.size(); ++i)
		{
			length += zhanduis[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << version;
		s << maxpage;
		s << page;
		short zhanduis_vector_size = (short)zhanduis.size();
		s << zhanduis_vector_size;
		if (zhanduis_vector_size > 0)
		{
			for (auto it = zhanduis.begin(); it != zhanduis.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> version;
		s >> maxpage;
		s >> page;
		int zhanduis_vector_size = s.read_int16();
		zhanduis.clear();
		while (zhanduis_vector_size > 0)
		{
			zhanduis_vector_size--;
			ZhanDuiInfo val;
			val.unserialize(s, false);
			zhanduis.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "version", version);
		lua::settable(L, -1, "maxpage", maxpage);
		lua::settable(L, -1, "page", page);
		lua::newtable(lua::L);
		for (size_t i = 0; i < zhanduis.size(); ++i)
		{
			zhanduis[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "zhanduis");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "version=" << version;
		buffer << ",maxpage=" << maxpage;
		buffer << ",page=" << page;
		buffer << ",zhanduis=[";
		for (size_t i = 0; i < zhanduis.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			zhanduis[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int version;
	short maxpage;
	short page;
	std::vector<ZhanDuiInfo> zhanduis;
};

class MsgZhanDuiCreateRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ZHANDUI, Id = 4 };

	MsgZhanDuiCreateRequest() :
		Message(Category, Id)
	{
		auto_join_reborn = 0;
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiCreateRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 2;
		length += sizeof(short) + zhandui_name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << zhandui_name;
		s << auto_join_reborn;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> zhandui_name;
		s >> auto_join_reborn;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "zhandui_name", zhandui_name);
		lua::settable(L, -1, "auto_join_reborn", auto_join_reborn);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "zhandui_name=" << zhandui_name;
		buffer << ",auto_join_reborn=" << auto_join_reborn;
	}

public:
	std::string zhandui_name;
	short auto_join_reborn;
};

class MsgZhanDuiCreateResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ZHANDUI, Id = 5 };

	MsgZhanDuiCreateResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiCreateResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgZhanDuiSetAutoJoinRebornRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ZHANDUI, Id = 7 };

	MsgZhanDuiSetAutoJoinRebornRequest() :
		Message(Category, Id)
	{
		auto_join_reborn = 0;
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiSetAutoJoinRebornRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << auto_join_reborn;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> auto_join_reborn;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "auto_join_reborn", auto_join_reborn);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "auto_join_reborn=" << auto_join_reborn;
	}

public:
	short auto_join_reborn;
};

class MsgZhanDuiSetAutoJoinRebornResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ZHANDUI, Id = 8 };

	MsgZhanDuiSetAutoJoinRebornResponse() :
		Message(Category, Id)
	{
		auto_join_reborn = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiSetAutoJoinRebornResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << auto_join_reborn;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> auto_join_reborn;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "auto_join_reborn", auto_join_reborn);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "auto_join_reborn=" << auto_join_reborn;
		buffer << ",errcode=" << errcode;
	}

public:
	short auto_join_reborn;
	short errcode; //错误码 
};

class MsgZhanDuiSetMasterRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ZHANDUI, Id = 9 };

	MsgZhanDuiSetMasterRequest() :
		Message(Category, Id)
	{
		new_master_pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiSetMasterRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << new_master_pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> new_master_pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "new_master_pid", new_master_pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "new_master_pid=" << new_master_pid;
	}

public:
	int new_master_pid;
};

class MsgZhanDuiSetMasterResponse : public Message
{
public:
	enum { Category =  MSG_CATEGORY_ZHANDUI, Id = 10 };

	MsgZhanDuiSetMasterResponse() :
		Message(Category, Id)
	{
		new_master_pid = 0;
		errcode = 0;
		old_master_pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiSetMasterResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << new_master_pid;
		s << errcode;
		s << old_master_pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> new_master_pid;
		s >> errcode;
		s >> old_master_pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "new_master_pid", new_master_pid);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "old_master_pid", old_master_pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "new_master_pid=" << new_master_pid;
		buffer << ",errcode=" << errcode;
		buffer << ",old_master_pid=" << old_master_pid;
	}

public:
	int new_master_pid;
	short errcode;
	int old_master_pid;
};

class MsgZhanDuiUpdateNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ZHANDUI, Id = 11 };

	MsgZhanDuiUpdateNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiUpdateNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += zhandui.getLength(false);
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		zhandui.serialize(s, false);
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		zhandui.unserialize(s, false);
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		zhandui.push(L);
		lua::settable(L, -1, "zhandui");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "zhandui={";
		zhandui.dump(buffer);
		buffer << "}";
	}

public:
	ZhanDuiInfo zhandui;
};

class MsgZhanDuiDeleteNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ZHANDUI, Id = 12 };

	MsgZhanDuiDeleteNotify() :
		Message(Category, Id)
	{
		zhandui_id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiDeleteNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << zhandui_id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> zhandui_id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "zhandui_id", zhandui_id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "zhandui_id=" << zhandui_id;
	}

public:
	int zhandui_id;
};

struct ZhanDuiMemberInfo
{
public:
	ZhanDuiMemberInfo()
	{
		pid = 0;
		job = 0;
		gender = 0;
		level = 0;
		reborn = 0;
		post = 0;
		online = 0;
		sceneid = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 23;
		length += sizeof(short) + name.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << pid;
		s << name;
		s << job;
		s << gender;
		s << level;
		s << reborn;
		s << post;
		s << online;
		s << sceneid;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> pid;
		s >> name;
		s >> job;
		s >> gender;
		s >> level;
		s >> reborn;
		s >> post;
		s >> online;
		s >> sceneid;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "job", job);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "reborn", reborn);
		lua::settable(L, -1, "post", post);
		lua::settable(L, -1, "online", online);
		lua::settable(L, -1, "sceneid", sceneid);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",job=" << job;
		buffer << ",gender=" << gender;
		buffer << ",level=" << level;
		buffer << ",reborn=" << reborn;
		buffer << ",post=" << post;
		buffer << ",online=" << online;
		buffer << ",sceneid=" << sceneid;
	}

public:
	int pid;
	std::string name;
	int job;
	short gender;
	short level;
	int reborn;
	short post;
	char online;
	int sceneid;
};

class MsgZhanDuiMemberListNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ZHANDUI, Id = 21 };

	MsgZhanDuiMemberListNotify() :
		Message(Category, Id)
	{
		zhandui_id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiMemberListNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short);
		for (size_t i = 0; i < members.size(); ++i)
		{
			length += members[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << zhandui_id;
		short members_vector_size = (short)members.size();
		s << members_vector_size;
		if (members_vector_size > 0)
		{
			for (auto it = members.begin(); it != members.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> zhandui_id;
		int members_vector_size = s.read_int16();
		members.clear();
		while (members_vector_size > 0)
		{
			members_vector_size--;
			ZhanDuiMemberInfo val;
			val.unserialize(s, false);
			members.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "zhandui_id", zhandui_id);
		lua::newtable(lua::L);
		for (size_t i = 0; i < members.size(); ++i)
		{
			members[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "members");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "zhandui_id=" << zhandui_id;
		buffer << ",members=[";
		for (size_t i = 0; i < members.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			members[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int zhandui_id;
	std::vector<ZhanDuiMemberInfo> members;
};

class MsgZhanDuiMemberDeleteRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ZHANDUI, Id = 22 };

	MsgZhanDuiMemberDeleteRequest() :
		Message(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiMemberDeleteRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
	}

public:
	int pid;
};

class MsgZhanDuiMemberDeleteResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ZHANDUI, Id = 23 };

	MsgZhanDuiMemberDeleteResponse() :
		Message(Category, Id)
	{
		pid = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiMemberDeleteResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",errcode=" << errcode;
	}

public:
	int pid;
	short errcode;
};

class MsgZhanDuiMemberQuitRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ZHANDUI, Id = 24 };

	MsgZhanDuiMemberQuitRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiMemberQuitRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgZhanDuiMemberQuitResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ZHANDUI, Id = 25 };

	MsgZhanDuiMemberQuitResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiMemberQuitResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgZhanDuiMemberUpdateNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ZHANDUI, Id = 26 };

	MsgZhanDuiMemberUpdateNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiMemberUpdateNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += member.getLength(false);
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		member.serialize(s, false);
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		member.unserialize(s, false);
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		member.push(L);
		lua::settable(L, -1, "member");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "member={";
		member.dump(buffer);
		buffer << "}";
	}

public:
	ZhanDuiMemberInfo member;
};

class MsgZhanDuiMemberDeleteNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ZHANDUI, Id = 27 };

	MsgZhanDuiMemberDeleteNotify() :
		Message(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiMemberDeleteNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
	}

public:
	int pid;
};

class MsgZhanDuiMemberOnlineNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ZHANDUI, Id = 28 };

	MsgZhanDuiMemberOnlineNotify() :
		Message(Category, Id)
	{
		pid = 0;
		online = 0;
		sceneid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiMemberOnlineNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 9;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << online;
		s << sceneid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> online;
		s >> sceneid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "online", online);
		lua::settable(L, -1, "sceneid", sceneid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",online=" << online;
		buffer << ",sceneid=" << sceneid;
	}

public:
	int pid;
	char online;
	int sceneid;
};

struct ZhanDuiAppInfo
{
public:
	ZhanDuiAppInfo()
	{
		pid = 0;
		job = 0;
		gender = 0;
		level = 0;
		reborn = 0;
		apptime = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 18;
		length += sizeof(short) + name.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << pid;
		s << name;
		s << job;
		s << gender;
		s << level;
		s << reborn;
		s << apptime;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> pid;
		s >> name;
		s >> job;
		s >> gender;
		s >> level;
		s >> reborn;
		s >> apptime;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "job", job);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "reborn", reborn);
		lua::settable(L, -1, "apptime", apptime);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",job=" << job;
		buffer << ",gender=" << gender;
		buffer << ",level=" << level;
		buffer << ",reborn=" << reborn;
		buffer << ",apptime=" << apptime;
	}

public:
	int pid;
	std::string name;
	short job;
	short gender;
	short level;
	int reborn;
	int apptime;
};

class MsgZhanDuiApplicationListNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ZHANDUI, Id = 41 };

	MsgZhanDuiApplicationListNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiApplicationListNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < apps.size(); ++i)
		{
			length += apps[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short apps_vector_size = (short)apps.size();
		s << apps_vector_size;
		if (apps_vector_size > 0)
		{
			for (auto it = apps.begin(); it != apps.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int apps_vector_size = s.read_int16();
		apps.clear();
		while (apps_vector_size > 0)
		{
			apps_vector_size--;
			ZhanDuiAppInfo val;
			val.unserialize(s, false);
			apps.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < apps.size(); ++i)
		{
			apps[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "apps");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "apps=[";
		for (size_t i = 0; i < apps.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			apps[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<ZhanDuiAppInfo> apps;
};

class MsgZhanDuiApplicationAddNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ZHANDUI, Id = 42 };

	MsgZhanDuiApplicationAddNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiApplicationAddNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += app.getLength(false);
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		app.serialize(s, false);
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		app.unserialize(s, false);
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		app.push(L);
		lua::settable(L, -1, "app");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "app={";
		app.dump(buffer);
		buffer << "}";
	}

public:
	ZhanDuiAppInfo app;
};

class MsgZhanDuiApplicationDeleteNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ZHANDUI, Id = 43 };

	MsgZhanDuiApplicationDeleteNotify() :
		Message(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiApplicationDeleteNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
	}

public:
	int pid;
};

class MsgZhanDuiJoinRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ZHANDUI, Id = 44 };

	MsgZhanDuiJoinRequest() :
		Message(Category, Id)
	{
		zhandui_id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiJoinRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << zhandui_id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> zhandui_id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "zhandui_id", zhandui_id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "zhandui_id=" << zhandui_id;
	}

public:
	int zhandui_id;
};

class MsgZhanDuiJoinResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ZHANDUI, Id = 45 };

	MsgZhanDuiJoinResponse() :
		Message(Category, Id)
	{
		zhandui_id = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiJoinResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << zhandui_id;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> zhandui_id;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "zhandui_id", zhandui_id);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "zhandui_id=" << zhandui_id;
		buffer << ",errcode=" << errcode;
	}

public:
	int zhandui_id;
	short errcode;
};

class MsgZhanDuiCancelRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ZHANDUI, Id = 46 };

	MsgZhanDuiCancelRequest() :
		Message(Category, Id)
	{
		zhandui_id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiCancelRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << zhandui_id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> zhandui_id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "zhandui_id", zhandui_id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "zhandui_id=" << zhandui_id;
	}

public:
	int zhandui_id;
};

class MsgZhanDuiCancelResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ZHANDUI, Id = 47 };

	MsgZhanDuiCancelResponse() :
		Message(Category, Id)
	{
		zhandui_id = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiCancelResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << zhandui_id;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> zhandui_id;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "zhandui_id", zhandui_id);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "zhandui_id=" << zhandui_id;
		buffer << ",errcode=" << errcode;
	}

public:
	int zhandui_id;
	short errcode;
};

class MsgZhanDuiDecideRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_ZHANDUI, Id = 48 };

	MsgZhanDuiDecideRequest() :
		Message(Category, Id)
	{
		pid = 0;
		decide = 0;
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiDecideRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << decide;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> decide;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "decide", decide);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",decide=" << decide;
	}

public:
	int pid;
	short decide;
};

class MsgZhanDuiDecideResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_ZHANDUI, Id = 49 };

	MsgZhanDuiDecideResponse() :
		Message(Category, Id)
	{
		pid = 0;
		decide = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiDecideResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << decide;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> decide;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "decide", decide);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",decide=" << decide;
		buffer << ",errcode=" << errcode;
	}

public:
	int pid;
	short decide;
	short errcode;
};

class MsgZhanDuiExDataNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ZHANDUI, Id = 61 };

	MsgZhanDuiExDataNotify() :
		Message(Category, Id)
	{
		idx = 0;
		data = 0;
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiExDataNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << idx;
		s << data;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> idx;
		s >> data;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "idx", idx);
		lua::settable(L, -1, "data", data);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "idx=" << idx;
		buffer << ",data=" << data;
	}

public:
	int idx;
	int data;
};

class MsgZhanDuiExDataStringNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ZHANDUI, Id = 62 };

	MsgZhanDuiExDataStringNotify() :
		Message(Category, Id)
	{
		idx = 0;
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiExDataStringNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short) + data.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << idx;
		s << data;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> idx;
		s >> data;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "idx", idx);
		lua::settable(L, -1, "data", data);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "idx=" << idx;
		buffer << ",data=" << data;
	}

public:
	int idx;
	std::string data;
};

struct ZhanDuiRecord
{
public:
	ZhanDuiRecord()
	{
		id = 0;
		type = 0;
		datax = 0;
		datay = 0;
		dataz = 0;
		ctime = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 22;
		length += sizeof(short) + name1.size();
		length += sizeof(short) + name2.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << id;
		s << type;
		s << datax;
		s << datay;
		s << dataz;
		s << name1;
		s << name2;
		s << ctime;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> id;
		s >> type;
		s >> datax;
		s >> datay;
		s >> dataz;
		s >> name1;
		s >> name2;
		s >> ctime;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "datax", datax);
		lua::settable(L, -1, "datay", datay);
		lua::settable(L, -1, "dataz", dataz);
		lua::settable(L, -1, "name1", name1);
		lua::settable(L, -1, "name2", name2);
		lua::settable(L, -1, "ctime", ctime);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",type=" << type;
		buffer << ",datax=" << datax;
		buffer << ",datay=" << datay;
		buffer << ",dataz=" << dataz;
		buffer << ",name1=" << name1;
		buffer << ",name2=" << name2;
		buffer << ",ctime=" << ctime;
	}

public:
	int id;
	short type;
	int datax;
	int datay;
	int dataz;
	std::string name1;
	std::string name2;
	int ctime;
};

class MsgZhanDuiRecordListNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ZHANDUI, Id = 71 };

	MsgZhanDuiRecordListNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiRecordListNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < records.size(); ++i)
		{
			length += records[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short records_vector_size = (short)records.size();
		s << records_vector_size;
		if (records_vector_size > 0)
		{
			for (auto it = records.begin(); it != records.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int records_vector_size = s.read_int16();
		records.clear();
		while (records_vector_size > 0)
		{
			records_vector_size--;
			ZhanDuiRecord val;
			val.unserialize(s, false);
			records.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < records.size(); ++i)
		{
			records[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "records");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "records=[";
		for (size_t i = 0; i < records.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			records[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<ZhanDuiRecord> records;
};

class MsgZhanDuiRecordAddNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_ZHANDUI, Id = 72 };

	MsgZhanDuiRecordAddNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgZhanDuiRecordAddNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += record.getLength(false);
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		record.serialize(s, false);
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		record.unserialize(s, false);
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		record.push(L);
		lua::settable(L, -1, "record");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "record={";
		record.dump(buffer);
		buffer << "}";
	}

public:
	ZhanDuiRecord record;
};

#endif	//_MSG_ZHAN_DUI_H_INCLUDED
