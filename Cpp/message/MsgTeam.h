//
//Generated by lua
//2009-2012	(C) XianFeng Inc. Reserved
//

#ifndef _MSG_TEAM_H_INCLUDED
#define _MSG_TEAM_H_INCLUDED

#include "category.h"
#include "common/Message.h"

class MsgTeamInviteRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_TEAM, Id = 1 };

	MsgTeamInviteRequest() :
		Message(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTeamInviteRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
	}

public:
	int pid;
};

class MsgTeamInviteResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_TEAM, Id = 2 };

	MsgTeamInviteResponse() :
		Message(Category, Id)
	{
		pid = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTeamInviteResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",errcode=" << errcode;
	}

public:
	int pid;
	short errcode;
};

class MsgTeamJoinRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_TEAM, Id = 3 };

	MsgTeamJoinRequest() :
		Message(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTeamJoinRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
	}

public:
	int pid;
};

class MsgTeamJoinResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_TEAM, Id = 4 };

	MsgTeamJoinResponse() :
		Message(Category, Id)
	{
		pid = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTeamJoinResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",errcode=" << errcode;
	}

public:
	int pid;
	short errcode;
};

class MsgTeamQuitRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_TEAM, Id = 5 };

	MsgTeamQuitRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgTeamQuitRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgTeamQuitResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_TEAM, Id = 6 };

	MsgTeamQuitResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTeamQuitResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgTeamMakeOperation : public Message
{
public:
	enum { Category = MSG_CATEGORY_TEAM, Id = 10 };

	MsgTeamMakeOperation() :
		Message(Category, Id)
	{
		opid = 0;
		type = 0;
		pid = 0;
		job = 0;
		gender = 0;
		level = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTeamMakeOperation";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 22;
		length += sizeof(short) + name.size();
		length += sizeof(short) + guild.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opid;
		s << type;
		s << pid;
		s << name;
		s << job;
		s << gender;
		s << level;
		s << guild;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opid;
		s >> type;
		s >> pid;
		s >> name;
		s >> job;
		s >> gender;
		s >> level;
		s >> guild;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opid", opid);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "job", job);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "guild", guild);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opid=" << opid;
		buffer << ",type=" << type;
		buffer << ",pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",job=" << job;
		buffer << ",gender=" << gender;
		buffer << ",level=" << level;
		buffer << ",guild=" << guild;
	}

public:
	int opid;
	short type;
	int pid;
	std::string name;
	int job;
	int gender;
	int level;
	std::string guild;
};

class MsgTeamMakeOperationReply : public Message
{
public:
	enum { Category = MSG_CATEGORY_TEAM, Id = 11 };

	MsgTeamMakeOperationReply() :
		Message(Category, Id)
	{
		opid = 0;
		type = 0;
		pid = 0;
		result = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTeamMakeOperationReply";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 14;
		length += sizeof(short) + name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opid;
		s << type;
		s << pid;
		s << name;
		s << result;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opid;
		s >> type;
		s >> pid;
		s >> name;
		s >> result;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opid", opid);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "result", result);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opid=" << opid;
		buffer << ",type=" << type;
		buffer << ",pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",result=" << result;
	}

public:
	int opid;
	int type;
	int pid;
	std::string name;
	short result;
};

class MsgTeamMakeDecisionRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_TEAM, Id = 12 };

	MsgTeamMakeDecisionRequest() :
		Message(Category, Id)
	{
		opid = 0;
		decide = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTeamMakeDecisionRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opid;
		s << decide;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opid;
		s >> decide;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opid", opid);
		lua::settable(L, -1, "decide", decide);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opid=" << opid;
		buffer << ",decide=" << decide;
	}

public:
	int opid;
	short decide;
};

class MsgTeamMakeDecisionResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_TEAM, Id = 13 };

	MsgTeamMakeDecisionResponse() :
		Message(Category, Id)
	{
		opid = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTeamMakeDecisionResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << opid;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> opid;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "opid", opid);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "opid=" << opid;
		buffer << ",errcode=" << errcode;
	}

public:
	int opid;
	short errcode;
};

struct TeamMate
{
public:
	TeamMate()
	{
		pid = 0;
		leader = 0;
		gender = 0;
		clazz = 0;
		reborn = 0;
		level = 0;
		online = 0;
		zhanli = 0;
		weapon = 0;
		cloth = 0;
		wings = 0;
		mapid = 0;
		logintime = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 40;
		length += sizeof(short) + name.size();
		length += sizeof(short) + guild.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << pid;
		s << name;
		s << leader;
		s << gender;
		s << clazz;
		s << reborn;
		s << level;
		s << guild;
		s << online;
		s << zhanli;
		s << weapon;
		s << cloth;
		s << wings;
		s << mapid;
		s << logintime;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> pid;
		s >> name;
		s >> leader;
		s >> gender;
		s >> clazz;
		s >> reborn;
		s >> level;
		s >> guild;
		s >> online;
		s >> zhanli;
		s >> weapon;
		s >> cloth;
		s >> wings;
		s >> mapid;
		s >> logintime;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "leader", leader);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "clazz", clazz);
		lua::settable(L, -1, "reborn", reborn);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "guild", guild);
		lua::settable(L, -1, "online", online);
		lua::settable(L, -1, "zhanli", zhanli);
		lua::settable(L, -1, "weapon", weapon);
		lua::settable(L, -1, "cloth", cloth);
		lua::settable(L, -1, "wings", wings);
		lua::settable(L, -1, "mapid", mapid);
		lua::settable(L, -1, "logintime", logintime);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",leader=" << leader;
		buffer << ",gender=" << gender;
		buffer << ",clazz=" << clazz;
		buffer << ",reborn=" << reborn;
		buffer << ",level=" << level;
		buffer << ",guild=" << guild;
		buffer << ",online=" << online;
		buffer << ",zhanli=" << zhanli;
		buffer << ",weapon=" << weapon;
		buffer << ",cloth=" << cloth;
		buffer << ",wings=" << wings;
		buffer << ",mapid=" << mapid;
		buffer << ",logintime=" << logintime;
	}

public:
	int pid;
	std::string name;
	char leader;
	char gender;
	char clazz;
	int reborn;
	int level;
	std::string guild;
	char online;
	int zhanli;
	int weapon;
	int cloth;
	int wings;
	int mapid;
	int logintime;
};

class MsgTeamInfoNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_TEAM, Id = 20 };

	MsgTeamInfoNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgTeamInfoNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < teammates.size(); ++i)
		{
			length += teammates[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short teammates_vector_size = (short)teammates.size();
		s << teammates_vector_size;
		if (teammates_vector_size > 0)
		{
			for (auto it = teammates.begin(); it != teammates.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int teammates_vector_size = s.read_int16();
		teammates.clear();
		while (teammates_vector_size > 0)
		{
			teammates_vector_size--;
			TeamMate val;
			val.unserialize(s, false);
			teammates.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < teammates.size(); ++i)
		{
			teammates[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "teammates");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "teammates=[";
		for (size_t i = 0; i < teammates.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			teammates[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<TeamMate> teammates;
};

class MsgTeamInfoUpdNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_TEAM, Id = 21 };

	MsgTeamInfoUpdNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgTeamInfoUpdNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += mate.getLength(false);
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		mate.serialize(s, false);
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		mate.unserialize(s, false);
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		mate.push(L);
		lua::settable(L, -1, "mate");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "mate={";
		mate.dump(buffer);
		buffer << "}";
	}

public:
	TeamMate mate;
};

class MsgTeamInfoRmvNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_TEAM, Id = 22 };

	MsgTeamInfoRmvNotify() :
		Message(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTeamInfoRmvNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
	}

public:
	int pid;
};

class MsgTeamKickPlayerRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_TEAM, Id = 30 };

	MsgTeamKickPlayerRequest() :
		Message(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTeamKickPlayerRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
	}

public:
	int pid;
};

class MsgTeamKickPlayerResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_TEAM, Id = 31 };

	MsgTeamKickPlayerResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTeamKickPlayerResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgTeamSetLeaderRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_TEAM, Id = 32 };

	MsgTeamSetLeaderRequest() :
		Message(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTeamSetLeaderRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
	}

public:
	int pid;
};

class MsgTeamSetLeaderResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_TEAM, Id = 33 };

	MsgTeamSetLeaderResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTeamSetLeaderResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgTeamCreateRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_TEAM, Id = 35 };

	MsgTeamCreateRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgTeamCreateRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgTeamCreateResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_TEAM, Id = 36 };

	MsgTeamCreateResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTeamCreateResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgTeamDestroyRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_TEAM, Id = 37 };

	MsgTeamDestroyRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgTeamDestroyRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgTeamDestroyResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_TEAM, Id = 38 };

	MsgTeamDestroyResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTeamDestroyResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgTeamListRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_TEAM, Id = 39 };

	MsgTeamListRequest() :
		Message(Category, Id)
	{
		flag = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTeamListRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << flag;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> flag;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "flag", flag);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "flag=" << flag;
	}

public:
	int flag;
};

class MsgTeamListResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_TEAM, Id = 40 };

	MsgTeamListResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		flag = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTeamListResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << flag;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> flag;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "flag", flag);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",flag=" << flag;
	}

public:
	short errcode;
	int flag;
};

class MsgTeamNearbyRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_TEAM, Id = 41 };

	MsgTeamNearbyRequest() :
		Message(Category, Id)
	{
		flag = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTeamNearbyRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << flag;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> flag;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "flag", flag);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "flag=" << flag;
	}

public:
	int flag;
};

struct TeamNearbyList
{
public:
	TeamNearbyList()
	{
		pid = 0;
		gender = 0;
		clazz = 0;
		level = 0;
		reborn = 0;
		zhanli = 0;
		membercount = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 28;
		length += sizeof(short) + name.size();
		length += sizeof(short) + guild_name.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << pid;
		s << name;
		s << guild_name;
		s << gender;
		s << clazz;
		s << level;
		s << reborn;
		s << zhanli;
		s << membercount;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> pid;
		s >> name;
		s >> guild_name;
		s >> gender;
		s >> clazz;
		s >> level;
		s >> reborn;
		s >> zhanli;
		s >> membercount;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "guild_name", guild_name);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "clazz", clazz);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "reborn", reborn);
		lua::settable(L, -1, "zhanli", zhanli);
		lua::settable(L, -1, "membercount", membercount);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",guild_name=" << guild_name;
		buffer << ",gender=" << gender;
		buffer << ",clazz=" << clazz;
		buffer << ",level=" << level;
		buffer << ",reborn=" << reborn;
		buffer << ",zhanli=" << zhanli;
		buffer << ",membercount=" << membercount;
	}

public:
	int pid;
	std::string name;
	std::string guild_name;
	int gender;
	int clazz;
	int level;
	int reborn;
	int zhanli;
	int membercount;
};

class MsgTeamNearbyResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_TEAM, Id = 42 };

	MsgTeamNearbyResponse() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgTeamNearbyResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < teamnearbylistvec.size(); ++i)
		{
			length += teamnearbylistvec[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short teamnearbylistvec_vector_size = (short)teamnearbylistvec.size();
		s << teamnearbylistvec_vector_size;
		if (teamnearbylistvec_vector_size > 0)
		{
			for (auto it = teamnearbylistvec.begin(); it != teamnearbylistvec.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int teamnearbylistvec_vector_size = s.read_int16();
		teamnearbylistvec.clear();
		while (teamnearbylistvec_vector_size > 0)
		{
			teamnearbylistvec_vector_size--;
			TeamNearbyList val;
			val.unserialize(s, false);
			teamnearbylistvec.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < teamnearbylistvec.size(); ++i)
		{
			teamnearbylistvec[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "teamnearbylistvec");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "teamnearbylistvec=[";
		for (size_t i = 0; i < teamnearbylistvec.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			teamnearbylistvec[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<TeamNearbyList> teamnearbylistvec;
};

class MsgTeamMataInvitePlayerResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_TEAM, Id = 43 };

	MsgTeamMataInvitePlayerResponse() :
		Message(Category, Id)
	{
		pidinvite = 0;
		pidinvited = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTeamMataInvitePlayerResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 8;
		length += sizeof(short) + nameinvite.size();
		length += sizeof(short) + nameinvited.size();
		length += sizeof(short) + nameinvitedguild.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pidinvite;
		s << nameinvite;
		s << pidinvited;
		s << nameinvited;
		s << nameinvitedguild;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pidinvite;
		s >> nameinvite;
		s >> pidinvited;
		s >> nameinvited;
		s >> nameinvitedguild;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pidinvite", pidinvite);
		lua::settable(L, -1, "nameinvite", nameinvite);
		lua::settable(L, -1, "pidinvited", pidinvited);
		lua::settable(L, -1, "nameinvited", nameinvited);
		lua::settable(L, -1, "nameinvitedguild", nameinvitedguild);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pidinvite=" << pidinvite;
		buffer << ",nameinvite=" << nameinvite;
		buffer << ",pidinvited=" << pidinvited;
		buffer << ",nameinvited=" << nameinvited;
		buffer << ",nameinvitedguild=" << nameinvitedguild;
	}

public:
	int pidinvite;
	std::string nameinvite;
	int pidinvited;
	std::string nameinvited;
	std::string nameinvitedguild;
};

class MsgTeamMataInvitePlayerRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_TEAM, Id = 44 };

	MsgTeamMataInvitePlayerRequest() :
		Message(Category, Id)
	{
		result = 0;
		captain_set = 0;
		pidinvite = 0;
		pidinvited = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTeamMataInvitePlayerRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 16;
		length += sizeof(short) + nameinvite.size();
		length += sizeof(short) + nameinvited.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << result;
		s << captain_set;
		s << pidinvite;
		s << nameinvite;
		s << pidinvited;
		s << nameinvited;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> result;
		s >> captain_set;
		s >> pidinvite;
		s >> nameinvite;
		s >> pidinvited;
		s >> nameinvited;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "result", result);
		lua::settable(L, -1, "captain_set", captain_set);
		lua::settable(L, -1, "pidinvite", pidinvite);
		lua::settable(L, -1, "nameinvite", nameinvite);
		lua::settable(L, -1, "pidinvited", pidinvited);
		lua::settable(L, -1, "nameinvited", nameinvited);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "result=" << result;
		buffer << ",captain_set=" << captain_set;
		buffer << ",pidinvite=" << pidinvite;
		buffer << ",nameinvite=" << nameinvite;
		buffer << ",pidinvited=" << pidinvited;
		buffer << ",nameinvited=" << nameinvited;
	}

public:
	int result;
	int captain_set;
	int pidinvite;
	std::string nameinvite;
	int pidinvited;
	std::string nameinvited;
};

class MsgTeamMemeberNearbyRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_TEAM, Id = 45 };

	MsgTeamMemeberNearbyRequest() :
		Message(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgTeamMemeberNearbyRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
	}

public:
	int pid;
};

struct TeamMemberNearbyList
{
public:
	TeamMemberNearbyList()
	{
		pid = 0;
		gender = 0;
		clazz = 0;
		level = 0;
		reborn = 0;
		zhanli = 0;
		isleader = 0;
		mapid = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 32;
		length += sizeof(short) + name.size();
		length += sizeof(short) + guild_name.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << pid;
		s << name;
		s << guild_name;
		s << gender;
		s << clazz;
		s << level;
		s << reborn;
		s << zhanli;
		s << isleader;
		s << mapid;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> pid;
		s >> name;
		s >> guild_name;
		s >> gender;
		s >> clazz;
		s >> level;
		s >> reborn;
		s >> zhanli;
		s >> isleader;
		s >> mapid;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "guild_name", guild_name);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "clazz", clazz);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "reborn", reborn);
		lua::settable(L, -1, "zhanli", zhanli);
		lua::settable(L, -1, "isleader", isleader);
		lua::settable(L, -1, "mapid", mapid);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",guild_name=" << guild_name;
		buffer << ",gender=" << gender;
		buffer << ",clazz=" << clazz;
		buffer << ",level=" << level;
		buffer << ",reborn=" << reborn;
		buffer << ",zhanli=" << zhanli;
		buffer << ",isleader=" << isleader;
		buffer << ",mapid=" << mapid;
	}

public:
	int pid;
	std::string name;
	std::string guild_name;
	int gender;
	int clazz;
	int level;
	int reborn;
	int zhanli;
	int isleader;
	int mapid;
};

class MsgTeamMemberNearbyResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_TEAM, Id = 46 };

	MsgTeamMemberNearbyResponse() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgTeamMemberNearbyResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < teammembernearbylistvec.size(); ++i)
		{
			length += teammembernearbylistvec[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short teammembernearbylistvec_vector_size = (short)teammembernearbylistvec.size();
		s << teammembernearbylistvec_vector_size;
		if (teammembernearbylistvec_vector_size > 0)
		{
			for (auto it = teammembernearbylistvec.begin(); it != teammembernearbylistvec.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int teammembernearbylistvec_vector_size = s.read_int16();
		teammembernearbylistvec.clear();
		while (teammembernearbylistvec_vector_size > 0)
		{
			teammembernearbylistvec_vector_size--;
			TeamMemberNearbyList val;
			val.unserialize(s, false);
			teammembernearbylistvec.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < teammembernearbylistvec.size(); ++i)
		{
			teammembernearbylistvec[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "teammembernearbylistvec");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "teammembernearbylistvec=[";
		for (size_t i = 0; i < teammembernearbylistvec.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			teammembernearbylistvec[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<TeamMemberNearbyList> teammembernearbylistvec;
};

#endif	//_MSG_TEAM_H_INCLUDED
