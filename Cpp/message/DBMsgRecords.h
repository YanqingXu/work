//
//Generated by lua
//2009-2012	(C) XianFeng Inc. Reserved
//

#ifndef _DB_MSG_RECORDS_H_INCLUDED
#define _DB_MSG_RECORDS_H_INCLUDED

#include "category.h"
#include "common/MessageEx.h"

class MsgDBRecordExpOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 1 };

	MsgDBRecordExpOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		opcode = 0;
		cnt = 0;
		type = 0;
		data = 0;
		old_count = 0;
		new_count = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordExpOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 44;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << opcode;
		s << cnt;
		s << type;
		s << data;
		s << old_count;
		s << new_count;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> opcode;
		s >> cnt;
		s >> type;
		s >> data;
		s >> old_count;
		s >> new_count;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "cnt", cnt);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "data", data);
		lua::settable(L, -1, "old_count", old_count);
		lua::settable(L, -1, "new_count", new_count);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",opcode=" << opcode;
		buffer << ",cnt=" << cnt;
		buffer << ",type=" << type;
		buffer << ",data=" << data;
		buffer << ",old_count=" << old_count;
		buffer << ",new_count=" << new_count;
	}

public:
	int aid;
	int pid;
	int opcode;
	long long cnt;
	int type;
	int data;
	long long old_count;
	long long new_count;
};

class MsgDBRecordLingFuOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 2 };

	MsgDBRecordLingFuOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		opcode = 0;
		cnt = 0;
		type = 0;
		data = 0;
		old_count = 0;
		new_count = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordLingFuOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 32;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << opcode;
		s << cnt;
		s << type;
		s << data;
		s << old_count;
		s << new_count;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> opcode;
		s >> cnt;
		s >> type;
		s >> data;
		s >> old_count;
		s >> new_count;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "cnt", cnt);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "data", data);
		lua::settable(L, -1, "old_count", old_count);
		lua::settable(L, -1, "new_count", new_count);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",opcode=" << opcode;
		buffer << ",cnt=" << cnt;
		buffer << ",type=" << type;
		buffer << ",data=" << data;
		buffer << ",old_count=" << old_count;
		buffer << ",new_count=" << new_count;
	}

public:
	int aid;
	int pid;
	int opcode;
	int cnt;
	int type;
	int data;
	int old_count;
	int new_count;
};

class MsgDBRecordIngotOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 3 };

	MsgDBRecordIngotOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		opcode = 0;
		cnt = 0;
		type = 0;
		data = 0;
		old_count = 0;
		new_count = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordIngotOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 44;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << opcode;
		s << cnt;
		s << type;
		s << data;
		s << old_count;
		s << new_count;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> opcode;
		s >> cnt;
		s >> type;
		s >> data;
		s >> old_count;
		s >> new_count;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "cnt", cnt);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "data", data);
		lua::settable(L, -1, "old_count", old_count);
		lua::settable(L, -1, "new_count", new_count);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",opcode=" << opcode;
		buffer << ",cnt=" << cnt;
		buffer << ",type=" << type;
		buffer << ",data=" << data;
		buffer << ",old_count=" << old_count;
		buffer << ",new_count=" << new_count;
	}

public:
	int aid;
	int pid;
	int opcode;
	long long cnt;
	int type;
	int data;
	long long old_count;
	long long new_count;
};

class MsgDBRecordBoundLingFuOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 4 };

	MsgDBRecordBoundLingFuOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		opcode = 0;
		cnt = 0;
		type = 0;
		data = 0;
		old_count = 0;
		new_count = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordBoundLingFuOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 32;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << opcode;
		s << cnt;
		s << type;
		s << data;
		s << old_count;
		s << new_count;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> opcode;
		s >> cnt;
		s >> type;
		s >> data;
		s >> old_count;
		s >> new_count;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "cnt", cnt);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "data", data);
		lua::settable(L, -1, "old_count", old_count);
		lua::settable(L, -1, "new_count", new_count);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",opcode=" << opcode;
		buffer << ",cnt=" << cnt;
		buffer << ",type=" << type;
		buffer << ",data=" << data;
		buffer << ",old_count=" << old_count;
		buffer << ",new_count=" << new_count;
	}

public:
	int aid;
	int pid;
	int opcode;
	int cnt;
	int type;
	int data;
	int old_count;
	int new_count;
};

class MsgDBRecordBoundIngotOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 5 };

	MsgDBRecordBoundIngotOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		opcode = 0;
		cnt = 0;
		type = 0;
		data = 0;
		old_count = 0;
		new_count = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordBoundIngotOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 44;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << opcode;
		s << cnt;
		s << type;
		s << data;
		s << old_count;
		s << new_count;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> opcode;
		s >> cnt;
		s >> type;
		s >> data;
		s >> old_count;
		s >> new_count;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "cnt", cnt);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "data", data);
		lua::settable(L, -1, "old_count", old_count);
		lua::settable(L, -1, "new_count", new_count);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",opcode=" << opcode;
		buffer << ",cnt=" << cnt;
		buffer << ",type=" << type;
		buffer << ",data=" << data;
		buffer << ",old_count=" << old_count;
		buffer << ",new_count=" << new_count;
	}

public:
	int aid;
	int pid;
	int opcode;
	long long cnt;
	int type;
	int data;
	long long old_count;
	long long new_count;
};

class MsgDBRecordHonorOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 6 };

	MsgDBRecordHonorOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		opcode = 0;
		cnt = 0;
		type = 0;
		data = 0;
		old_count = 0;
		new_count = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordHonorOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 32;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << opcode;
		s << cnt;
		s << type;
		s << data;
		s << old_count;
		s << new_count;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> opcode;
		s >> cnt;
		s >> type;
		s >> data;
		s >> old_count;
		s >> new_count;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "cnt", cnt);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "data", data);
		lua::settable(L, -1, "old_count", old_count);
		lua::settable(L, -1, "new_count", new_count);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",opcode=" << opcode;
		buffer << ",cnt=" << cnt;
		buffer << ",type=" << type;
		buffer << ",data=" << data;
		buffer << ",old_count=" << old_count;
		buffer << ",new_count=" << new_count;
	}

public:
	int aid;
	int pid;
	int opcode;
	int cnt;
	int type;
	int data;
	int old_count;
	int new_count;
};

class MsgDBRecordBsscOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 7 };

	MsgDBRecordBsscOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		opcode = 0;
		cnt = 0;
		type = 0;
		data = 0;
		old_count = 0;
		new_count = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordBsscOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 32;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << opcode;
		s << cnt;
		s << type;
		s << data;
		s << old_count;
		s << new_count;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> opcode;
		s >> cnt;
		s >> type;
		s >> data;
		s >> old_count;
		s >> new_count;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "cnt", cnt);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "data", data);
		lua::settable(L, -1, "old_count", old_count);
		lua::settable(L, -1, "new_count", new_count);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",opcode=" << opcode;
		buffer << ",cnt=" << cnt;
		buffer << ",type=" << type;
		buffer << ",data=" << data;
		buffer << ",old_count=" << old_count;
		buffer << ",new_count=" << new_count;
	}

public:
	int aid;
	int pid;
	int opcode;
	int cnt;
	int type;
	int data;
	int old_count;
	int new_count;
};

class MsgDBRecordContributionOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 8 };

	MsgDBRecordContributionOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		opcode = 0;
		cnt = 0;
		type = 0;
		data = 0;
		old_count = 0;
		new_count = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordContributionOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 32;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << opcode;
		s << cnt;
		s << type;
		s << data;
		s << old_count;
		s << new_count;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> opcode;
		s >> cnt;
		s >> type;
		s >> data;
		s >> old_count;
		s >> new_count;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "cnt", cnt);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "data", data);
		lua::settable(L, -1, "old_count", old_count);
		lua::settable(L, -1, "new_count", new_count);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",opcode=" << opcode;
		buffer << ",cnt=" << cnt;
		buffer << ",type=" << type;
		buffer << ",data=" << data;
		buffer << ",old_count=" << old_count;
		buffer << ",new_count=" << new_count;
	}

public:
	int aid;
	int pid;
	int opcode;
	int cnt;
	int type;
	int data;
	int old_count;
	int new_count;
};

class MsgDBRecordRebornPointsOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 9 };

	MsgDBRecordRebornPointsOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		opcode = 0;
		cnt = 0;
		type = 0;
		data = 0;
		old_count = 0;
		new_count = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordRebornPointsOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 32;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << opcode;
		s << cnt;
		s << type;
		s << data;
		s << old_count;
		s << new_count;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> opcode;
		s >> cnt;
		s >> type;
		s >> data;
		s >> old_count;
		s >> new_count;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "cnt", cnt);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "data", data);
		lua::settable(L, -1, "old_count", old_count);
		lua::settable(L, -1, "new_count", new_count);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",opcode=" << opcode;
		buffer << ",cnt=" << cnt;
		buffer << ",type=" << type;
		buffer << ",data=" << data;
		buffer << ",old_count=" << old_count;
		buffer << ",new_count=" << new_count;
	}

public:
	int aid;
	int pid;
	int opcode;
	int cnt;
	int type;
	int data;
	int old_count;
	int new_count;
};

class MsgDBRecordSamsaraPointsOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 10 };

	MsgDBRecordSamsaraPointsOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		opcode = 0;
		cnt = 0;
		type = 0;
		data = 0;
		old_count = 0;
		new_count = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordSamsaraPointsOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 32;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << opcode;
		s << cnt;
		s << type;
		s << data;
		s << old_count;
		s << new_count;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> opcode;
		s >> cnt;
		s >> type;
		s >> data;
		s >> old_count;
		s >> new_count;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "cnt", cnt);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "data", data);
		lua::settable(L, -1, "old_count", old_count);
		lua::settable(L, -1, "new_count", new_count);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",opcode=" << opcode;
		buffer << ",cnt=" << cnt;
		buffer << ",type=" << type;
		buffer << ",data=" << data;
		buffer << ",old_count=" << old_count;
		buffer << ",new_count=" << new_count;
	}

public:
	int aid;
	int pid;
	int opcode;
	int cnt;
	int type;
	int data;
	int old_count;
	int new_count;
};

class MsgDBRecordItemOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 11 };

	MsgDBRecordItemOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		opcode = 0;
		sid = 0;
		cnt = 0;
		type = 0;
		data = 0;
		mapId = 0;
		posX = 0;
		posY = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordItemOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 40;
		length += sizeof(short) + name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << name;
		s << opcode;
		s << sid;
		s << cnt;
		s << type;
		s << data;
		s << mapId;
		s << posX;
		s << posY;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> name;
		s >> opcode;
		s >> sid;
		s >> cnt;
		s >> type;
		s >> data;
		s >> mapId;
		s >> posX;
		s >> posY;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "cnt", cnt);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "data", data);
		lua::settable(L, -1, "mapId", mapId);
		lua::settable(L, -1, "posX", posX);
		lua::settable(L, -1, "posY", posY);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",opcode=" << opcode;
		buffer << ",sid=" << sid;
		buffer << ",cnt=" << cnt;
		buffer << ",type=" << type;
		buffer << ",data=" << data;
		buffer << ",mapId=" << mapId;
		buffer << ",posX=" << posX;
		buffer << ",posY=" << posY;
	}

public:
	int aid;
	int pid;
	std::string name;
	int opcode;
	int sid;
	int cnt;
	int type;
	int data;
	int mapId;
	int posX;
	int posY;
};

class MsgDBRecordEnhance : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 12 };

	MsgDBRecordEnhance() :
		MessageEx(Category, Id)
	{
		pid = 0;
		iid = 0;
		sid = 0;
		enhancelevel = 0;
		enhancepropid = 0;
		enhancepropvalue = 0;
		opcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordEnhance";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 28;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << pid;
		s << iid;
		s << sid;
		s << enhancelevel;
		s << enhancepropid;
		s << enhancepropvalue;
		s << opcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> pid;
		s >> iid;
		s >> sid;
		s >> enhancelevel;
		s >> enhancepropid;
		s >> enhancepropvalue;
		s >> opcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "enhancelevel", enhancelevel);
		lua::settable(L, -1, "enhancepropid", enhancepropid);
		lua::settable(L, -1, "enhancepropvalue", enhancepropvalue);
		lua::settable(L, -1, "opcode", opcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",pid=" << pid;
		buffer << ",iid=" << iid;
		buffer << ",sid=" << sid;
		buffer << ",enhancelevel=" << enhancelevel;
		buffer << ",enhancepropid=" << enhancepropid;
		buffer << ",enhancepropvalue=" << enhancepropvalue;
		buffer << ",opcode=" << opcode;
	}

public:
	int pid;
	int iid;
	int sid;
	int enhancelevel;
	int enhancepropid;
	int enhancepropvalue;
	int opcode;
};

class MsgDBRecordEvaluate : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 13 };

	MsgDBRecordEvaluate() :
		MessageEx(Category, Id)
	{
		pid = 0;
		iid = 0;
		sid = 0;
		datacombo = 0;
		datax = 0;
		datay = 0;
		dataz = 0;
		evaluatecount = 0;
		playerevaluatecount = 0;
		opcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordEvaluate";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 40;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << pid;
		s << iid;
		s << sid;
		s << datacombo;
		s << datax;
		s << datay;
		s << dataz;
		s << evaluatecount;
		s << playerevaluatecount;
		s << opcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> pid;
		s >> iid;
		s >> sid;
		s >> datacombo;
		s >> datax;
		s >> datay;
		s >> dataz;
		s >> evaluatecount;
		s >> playerevaluatecount;
		s >> opcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "datacombo", datacombo);
		lua::settable(L, -1, "datax", datax);
		lua::settable(L, -1, "datay", datay);
		lua::settable(L, -1, "dataz", dataz);
		lua::settable(L, -1, "evaluatecount", evaluatecount);
		lua::settable(L, -1, "playerevaluatecount", playerevaluatecount);
		lua::settable(L, -1, "opcode", opcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",pid=" << pid;
		buffer << ",iid=" << iid;
		buffer << ",sid=" << sid;
		buffer << ",datacombo=" << datacombo;
		buffer << ",datax=" << datax;
		buffer << ",datay=" << datay;
		buffer << ",dataz=" << dataz;
		buffer << ",evaluatecount=" << evaluatecount;
		buffer << ",playerevaluatecount=" << playerevaluatecount;
		buffer << ",opcode=" << opcode;
	}

public:
	int pid;
	int iid;
	int sid;
	int datacombo;
	int datax;
	int datay;
	int dataz;
	int evaluatecount;
	int playerevaluatecount;
	int opcode;
};

class MsgDBRecordLevelOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 21 };

	MsgDBRecordLevelOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		old_level = 0;
		new_level = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordLevelOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 16;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << old_level;
		s << new_level;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> old_level;
		s >> new_level;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "old_level", old_level);
		lua::settable(L, -1, "new_level", new_level);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",old_level=" << old_level;
		buffer << ",new_level=" << new_level;
	}

public:
	int aid;
	int pid;
	int old_level;
	int new_level;
};

class MsgDBRecordRebornOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 22 };

	MsgDBRecordRebornOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		old_reborn = 0;
		new_reborn = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordRebornOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 16;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << old_reborn;
		s << new_reborn;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> old_reborn;
		s >> new_reborn;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "old_reborn", old_reborn);
		lua::settable(L, -1, "new_reborn", new_reborn);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",old_reborn=" << old_reborn;
		buffer << ",new_reborn=" << new_reborn;
	}

public:
	int aid;
	int pid;
	int old_reborn;
	int new_reborn;
};

class MsgDBRecordSamsaraOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 23 };

	MsgDBRecordSamsaraOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		old_samsara = 0;
		new_samsara = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordSamsaraOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 16;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << old_samsara;
		s << new_samsara;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> old_samsara;
		s >> new_samsara;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "old_samsara", old_samsara);
		lua::settable(L, -1, "new_samsara", new_samsara);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",old_samsara=" << old_samsara;
		buffer << ",new_samsara=" << new_samsara;
	}

public:
	int aid;
	int pid;
	int old_samsara;
	int new_samsara;
};

class MsgDBRecordQuestDesc : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 24 };

	MsgDBRecordQuestDesc() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		questid = 0;
		state = 0;
		overcnt = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordQuestDesc";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 20;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << questid;
		s << state;
		s << overcnt;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> questid;
		s >> state;
		s >> overcnt;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "questid", questid);
		lua::settable(L, -1, "state", state);
		lua::settable(L, -1, "overcnt", overcnt);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",questid=" << questid;
		buffer << ",state=" << state;
		buffer << ",overcnt=" << overcnt;
	}

public:
	int aid;
	int pid;
	int questid;
	int state;
	int overcnt;
};

class MsgDBRecordTradeOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 25 };

	MsgDBRecordTradeOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		aid_ = 0;
		pid_ = 0;
		sid = 0;
		cnt = 0;
		opcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordTradeOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 32;
		length += sizeof(short) + name.size();
		length += sizeof(short) + name_.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << name;
		s << aid_;
		s << pid_;
		s << name_;
		s << sid;
		s << cnt;
		s << opcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> name;
		s >> aid_;
		s >> pid_;
		s >> name_;
		s >> sid;
		s >> cnt;
		s >> opcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "aid_", aid_);
		lua::settable(L, -1, "pid_", pid_);
		lua::settable(L, -1, "name_", name_);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "cnt", cnt);
		lua::settable(L, -1, "opcode", opcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",aid_=" << aid_;
		buffer << ",pid_=" << pid_;
		buffer << ",name_=" << name_;
		buffer << ",sid=" << sid;
		buffer << ",cnt=" << cnt;
		buffer << ",opcode=" << opcode;
	}

public:
	int aid;
	int pid;
	std::string name;
	int aid_;
	int pid_;
	std::string name_;
	int sid;
	long long cnt;
	int opcode;
};

class MsgDBRecordCrossSceneOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 26 };

	MsgDBRecordCrossSceneOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		lastmap = 0;
		lastx = 0;
		lasty = 0;
		nowmap = 0;
		nowx = 0;
		nowy = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordCrossSceneOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 32;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << lastmap;
		s << lastx;
		s << lasty;
		s << nowmap;
		s << nowx;
		s << nowy;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> lastmap;
		s >> lastx;
		s >> lasty;
		s >> nowmap;
		s >> nowx;
		s >> nowy;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "lastmap", lastmap);
		lua::settable(L, -1, "lastx", lastx);
		lua::settable(L, -1, "lasty", lasty);
		lua::settable(L, -1, "nowmap", nowmap);
		lua::settable(L, -1, "nowx", nowx);
		lua::settable(L, -1, "nowy", nowy);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",lastmap=" << lastmap;
		buffer << ",lastx=" << lastx;
		buffer << ",lasty=" << lasty;
		buffer << ",nowmap=" << nowmap;
		buffer << ",nowx=" << nowx;
		buffer << ",nowy=" << nowy;
	}

public:
	int aid;
	int pid;
	int lastmap;
	int lastx;
	int lasty;
	int nowmap;
	int nowx;
	int nowy;
};

class MsgDBRecordGuildMoneyOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 31 };

	MsgDBRecordGuildMoneyOp() :
		MessageEx(Category, Id)
	{
		gid = 0;
		aid = 0;
		pid = 0;
		opcode = 0;
		cnt = 0;
		type = 0;
		data = 0;
		old_count = 0;
		new_count = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordGuildMoneyOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 36;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << gid;
		s << aid;
		s << pid;
		s << opcode;
		s << cnt;
		s << type;
		s << data;
		s << old_count;
		s << new_count;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> gid;
		s >> aid;
		s >> pid;
		s >> opcode;
		s >> cnt;
		s >> type;
		s >> data;
		s >> old_count;
		s >> new_count;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "gid", gid);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "cnt", cnt);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "data", data);
		lua::settable(L, -1, "old_count", old_count);
		lua::settable(L, -1, "new_count", new_count);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",gid=" << gid;
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",opcode=" << opcode;
		buffer << ",cnt=" << cnt;
		buffer << ",type=" << type;
		buffer << ",data=" << data;
		buffer << ",old_count=" << old_count;
		buffer << ",new_count=" << new_count;
	}

public:
	int gid;
	int aid;
	int pid;
	int opcode;
	int cnt;
	int type;
	int data;
	int old_count;
	int new_count;
};

class MsgDBRecordEnterEventOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 41 };

	MsgDBRecordEnterEventOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		id1 = 0;
		id2 = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordEnterEventOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 16;
		length += sizeof(short) + name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << name;
		s << id1;
		s << id2;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> name;
		s >> id1;
		s >> id2;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "id1", id1);
		lua::settable(L, -1, "id2", id2);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",id1=" << id1;
		buffer << ",id2=" << id2;
	}

public:
	int aid;
	int pid;
	std::string name;
	int id1;
	int id2;
};

class MsgDBRecordLeaveEventOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 42 };

	MsgDBRecordLeaveEventOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		id1 = 0;
		id2 = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordLeaveEventOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 16;
		length += sizeof(short) + name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << name;
		s << id1;
		s << id2;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> name;
		s >> id1;
		s >> id2;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "id1", id1);
		lua::settable(L, -1, "id2", id2);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",id1=" << id1;
		buffer << ",id2=" << id2;
	}

public:
	int aid;
	int pid;
	std::string name;
	int id1;
	int id2;
};

class MsgDBRecordGCZ : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 43 };

	MsgDBRecordGCZ() :
		MessageEx(Category, Id)
	{
		pid = 0;
		gid = 0;
		score = 0;
		serverId = 0;
		rank = 0;
		result = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordGCZ";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 24;
		length += sizeof(short) + playerName.size();
		length += sizeof(short) + guildName.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << pid;
		s << gid;
		s << score;
		s << serverId;
		s << rank;
		s << result;
		s << playerName;
		s << guildName;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> pid;
		s >> gid;
		s >> score;
		s >> serverId;
		s >> rank;
		s >> result;
		s >> playerName;
		s >> guildName;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "gid", gid);
		lua::settable(L, -1, "score", score);
		lua::settable(L, -1, "serverId", serverId);
		lua::settable(L, -1, "rank", rank);
		lua::settable(L, -1, "result", result);
		lua::settable(L, -1, "playerName", playerName);
		lua::settable(L, -1, "guildName", guildName);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",pid=" << pid;
		buffer << ",gid=" << gid;
		buffer << ",score=" << score;
		buffer << ",serverId=" << serverId;
		buffer << ",rank=" << rank;
		buffer << ",result=" << result;
		buffer << ",playerName=" << playerName;
		buffer << ",guildName=" << guildName;
	}

public:
	int pid;
	int gid;
	int score;
	int serverId;
	int rank;
	int result;
	std::string playerName;
	std::string guildName;
};

class MsgDBRecordBossKilled : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 44 };

	MsgDBRecordBossKilled() :
		MessageEx(Category, Id)
	{
		pid = 0;
		sid = 0;
		scene = 0;
		posx = 0;
		posy = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordBossKilled";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 20;
		length += sizeof(short) + name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << pid;
		s << name;
		s << sid;
		s << scene;
		s << posx;
		s << posy;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> pid;
		s >> name;
		s >> sid;
		s >> scene;
		s >> posx;
		s >> posy;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "scene", scene);
		lua::settable(L, -1, "posx", posx);
		lua::settable(L, -1, "posy", posy);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",sid=" << sid;
		buffer << ",scene=" << scene;
		buffer << ",posx=" << posx;
		buffer << ",posy=" << posy;
	}

public:
	int pid;
	std::string name;
	int sid;
	int scene;
	int posx;
	int posy;
};

class MsgDBRecordPlayerDead : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 45 };

	MsgDBRecordPlayerDead() :
		MessageEx(Category, Id)
	{
		pid = 0;
		scene = 0;
		posx = 0;
		posy = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordPlayerDead";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 16;
		length += sizeof(short) + name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << pid;
		s << name;
		s << scene;
		s << posx;
		s << posy;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> pid;
		s >> name;
		s >> scene;
		s >> posx;
		s >> posy;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "scene", scene);
		lua::settable(L, -1, "posx", posx);
		lua::settable(L, -1, "posy", posy);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",scene=" << scene;
		buffer << ",posx=" << posx;
		buffer << ",posy=" << posy;
	}

public:
	int pid;
	std::string name;
	int scene;
	int posx;
	int posy;
};

class MsgDBRecordAccelerator : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 51 };

	MsgDBRecordAccelerator() :
		MessageEx(Category, Id)
	{
		pid = 0;
		average = 0;
		times = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordAccelerator";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << pid;
		s << average;
		s << times;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> pid;
		s >> average;
		s >> times;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "average", average);
		lua::settable(L, -1, "times", times);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",pid=" << pid;
		buffer << ",average=" << average;
		buffer << ",times=" << times;
	}

public:
	int pid;
	int average;
	int times;
};

class MsgDBRecordRecharge : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 52 };

	MsgDBRecordRecharge() :
		MessageEx(Category, Id)
	{
		pid = 0;
		sid = 0;
		cnt = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordRecharge";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 12;
		length += sizeof(short) + serial.size();
		length += sizeof(short) + ext.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << serial;
		s << pid;
		s << sid;
		s << cnt;
		s << ext;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> serial;
		s >> pid;
		s >> sid;
		s >> cnt;
		s >> ext;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "serial", serial);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "cnt", cnt);
		lua::settable(L, -1, "ext", ext);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",serial=" << serial;
		buffer << ",pid=" << pid;
		buffer << ",sid=" << sid;
		buffer << ",cnt=" << cnt;
		buffer << ",ext=" << ext;
	}

public:
	std::string serial;
	int pid;
	int sid;
	int cnt;
	std::string ext;
};

class MsgDBRecordRechargeState : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 53 };

	MsgDBRecordRechargeState() :
		MessageEx(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordRechargeState";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 4;
		length += sizeof(short) + serial.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << serial;
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> serial;
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "serial", serial);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",serial=" << serial;
		buffer << ",pid=" << pid;
	}

public:
	std::string serial;
	int pid;
};

class MsgDBRecordDBMessageStatistics : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 54 };

	MsgDBRecordDBMessageStatistics() :
		MessageEx(Category, Id)
	{
		msgcate = 0;
		msgid = 0;
		msgcnt = 0;
		msgtime = 0;
		msgqueuetime = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordDBMessageStatistics";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 20;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << msgcate;
		s << msgid;
		s << msgcnt;
		s << msgtime;
		s << msgqueuetime;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> msgcate;
		s >> msgid;
		s >> msgcnt;
		s >> msgtime;
		s >> msgqueuetime;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "msgcate", msgcate);
		lua::settable(L, -1, "msgid", msgid);
		lua::settable(L, -1, "msgcnt", msgcnt);
		lua::settable(L, -1, "msgtime", msgtime);
		lua::settable(L, -1, "msgqueuetime", msgqueuetime);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",msgcate=" << msgcate;
		buffer << ",msgid=" << msgid;
		buffer << ",msgcnt=" << msgcnt;
		buffer << ",msgtime=" << msgtime;
		buffer << ",msgqueuetime=" << msgqueuetime;
	}

public:
	int msgcate;
	int msgid;
	int msgcnt;
	int msgtime;
	int msgqueuetime;
};

class MsgDBRecordLogicMessageStatistics : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 55 };

	MsgDBRecordLogicMessageStatistics() :
		MessageEx(Category, Id)
	{
		queue_len = 0;
		update_time = 0;
		message_time = 0;
		online_player_num = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordLogicMessageStatistics";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 16;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << queue_len;
		s << update_time;
		s << message_time;
		s << online_player_num;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> queue_len;
		s >> update_time;
		s >> message_time;
		s >> online_player_num;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "queue_len", queue_len);
		lua::settable(L, -1, "update_time", update_time);
		lua::settable(L, -1, "message_time", message_time);
		lua::settable(L, -1, "online_player_num", online_player_num);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",queue_len=" << queue_len;
		buffer << ",update_time=" << update_time;
		buffer << ",message_time=" << message_time;
		buffer << ",online_player_num=" << online_player_num;
	}

public:
	int queue_len;
	int update_time;
	int message_time;
	int online_player_num;
};

class MsgDBRecordMemory : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 56 };

	MsgDBRecordMemory() :
		MessageEx(Category, Id)
	{
		usememory = 0;
		maxmemory = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordMemory";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << usememory;
		s << maxmemory;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> usememory;
		s >> maxmemory;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "usememory", usememory);
		lua::settable(L, -1, "maxmemory", maxmemory);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",usememory=" << usememory;
		buffer << ",maxmemory=" << maxmemory;
	}

public:
	int usememory;
	int maxmemory;
};

class MsgDBRecordHoliday : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 57 };

	MsgDBRecordHoliday() :
		MessageEx(Category, Id)
	{
		pid = 0;
		opcode = 0;
		switch_id = 0;
		type = 0;
		datax = 0;
		datay = 0;
		dataz = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordHoliday";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 28;
		length += sizeof(short) + name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << pid;
		s << name;
		s << opcode;
		s << switch_id;
		s << type;
		s << datax;
		s << datay;
		s << dataz;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> pid;
		s >> name;
		s >> opcode;
		s >> switch_id;
		s >> type;
		s >> datax;
		s >> datay;
		s >> dataz;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "switch_id", switch_id);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "datax", datax);
		lua::settable(L, -1, "datay", datay);
		lua::settable(L, -1, "dataz", dataz);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",opcode=" << opcode;
		buffer << ",switch_id=" << switch_id;
		buffer << ",type=" << type;
		buffer << ",datax=" << datax;
		buffer << ",datay=" << datay;
		buffer << ",dataz=" << dataz;
	}

public:
	int pid;
	std::string name;
	int opcode;
	int switch_id;
	int type;
	int datax;
	int datay;
	int dataz;
};

class MsgDBRecordMail : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 58 };

	MsgDBRecordMail() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		mid = 0;
		opcode = 0;
		ctime = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordMail";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 20;
		length += sizeof(short) + pname.size();
		length += sizeof(short) + title.size();
		length += sizeof(short) + content.size();
		length += sizeof(short) + items.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << pname;
		s << mid;
		s << title;
		s << content;
		s << items;
		s << opcode;
		s << ctime;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> pname;
		s >> mid;
		s >> title;
		s >> content;
		s >> items;
		s >> opcode;
		s >> ctime;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "pname", pname);
		lua::settable(L, -1, "mid", mid);
		lua::settable(L, -1, "title", title);
		lua::settable(L, -1, "content", content);
		lua::settable(L, -1, "items", items);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "ctime", ctime);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",pname=" << pname;
		buffer << ",mid=" << mid;
		buffer << ",title=" << title;
		buffer << ",content=" << content;
		buffer << ",items=" << items;
		buffer << ",opcode=" << opcode;
		buffer << ",ctime=" << ctime;
	}

public:
	int aid;
	int pid;
	std::string pname;
	int mid;
	std::string title;
	std::string content;
	std::string items;
	int opcode;
	int ctime;
};

class MsgDBRecordCrossOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 59 };

	MsgDBRecordCrossOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		opcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordCrossOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 12;
		length += sizeof(short) + pname.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << pname;
		s << opcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> pname;
		s >> opcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "pname", pname);
		lua::settable(L, -1, "opcode", opcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",pname=" << pname;
		buffer << ",opcode=" << opcode;
	}

public:
	int aid;
	int pid;
	std::string pname;
	int opcode;
};

class MsgDBRecordLoginOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 60 };

	MsgDBRecordLoginOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		line = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordLoginOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 12;
		length += sizeof(short) + pname.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << pname;
		s << line;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> pname;
		s >> line;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "pname", pname);
		lua::settable(L, -1, "line", line);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",pname=" << pname;
		buffer << ",line=" << line;
	}

public:
	int aid;
	int pid;
	std::string pname;
	int line;
};

class MsgDBRecordLogoutOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 61 };

	MsgDBRecordLogoutOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordLogoutOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 8;
		length += sizeof(short) + pname.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << pname;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> pname;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "pname", pname);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",pname=" << pname;
	}

public:
	int aid;
	int pid;
	std::string pname;
};

class MsgDBRecordGuildOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 62 };

	MsgDBRecordGuildOp() :
		MessageEx(Category, Id)
	{
		gid = 0;
		pid1 = 0;
		pid2 = 0;
		opcode = 0;
		opdata = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordGuildOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 20;
		length += sizeof(short) + gname.size();
		length += sizeof(short) + pname1.size();
		length += sizeof(short) + pname2.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << gid;
		s << gname;
		s << pid1;
		s << pname1;
		s << pid2;
		s << pname2;
		s << opcode;
		s << opdata;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> gid;
		s >> gname;
		s >> pid1;
		s >> pname1;
		s >> pid2;
		s >> pname2;
		s >> opcode;
		s >> opdata;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "gid", gid);
		lua::settable(L, -1, "gname", gname);
		lua::settable(L, -1, "pid1", pid1);
		lua::settable(L, -1, "pname1", pname1);
		lua::settable(L, -1, "pid2", pid2);
		lua::settable(L, -1, "pname2", pname2);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "opdata", opdata);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",gid=" << gid;
		buffer << ",gname=" << gname;
		buffer << ",pid1=" << pid1;
		buffer << ",pname1=" << pname1;
		buffer << ",pid2=" << pid2;
		buffer << ",pname2=" << pname2;
		buffer << ",opcode=" << opcode;
		buffer << ",opdata=" << opdata;
	}

public:
	int gid;
	std::string gname;
	int pid1;
	std::string pname1;
	int pid2;
	std::string pname2;
	int opcode;
	int opdata;
};

class MsgDBRecordPlayerSROp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 66 };

	MsgDBRecordPlayerSROp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		opcode = 0;
		data = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordPlayerSROp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 16;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << opcode;
		s << data;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> opcode;
		s >> data;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "data", data);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",opcode=" << opcode;
		buffer << ",data=" << data;
	}

public:
	int aid;
	int pid;
	int opcode;
	int data;
};

class MsgDBRecordPlayerSkillOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 67 };

	MsgDBRecordPlayerSkillOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		opcode = 0;
		skillid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordPlayerSkillOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 16;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << opcode;
		s << skillid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> opcode;
		s >> skillid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "skillid", skillid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",opcode=" << opcode;
		buffer << ",skillid=" << skillid;
	}

public:
	int aid;
	int pid;
	int opcode;
	int skillid;
};

class MsgDBRecordBaoWuOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 69 };

	MsgDBRecordBaoWuOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		opcode = 0;
		oldlevel = 0;
		newlevel = 0;
		cost = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordBaoWuOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 24;
		length += sizeof(short) + name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << name;
		s << opcode;
		s << oldlevel;
		s << newlevel;
		s << cost;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> name;
		s >> opcode;
		s >> oldlevel;
		s >> newlevel;
		s >> cost;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "oldlevel", oldlevel);
		lua::settable(L, -1, "newlevel", newlevel);
		lua::settable(L, -1, "cost", cost);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",opcode=" << opcode;
		buffer << ",oldlevel=" << oldlevel;
		buffer << ",newlevel=" << newlevel;
		buffer << ",cost=" << cost;
	}

public:
	int aid;
	int pid;
	std::string name;
	int opcode;
	int oldlevel;
	int newlevel;
	int cost;
};

class MsgDBRecordStrenghthenOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 70 };

	MsgDBRecordStrenghthenOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		opcode = 0;
		pre_level = 0;
		new_level = 0;
		pos = 0;
		material_id = 0;
		count = 0;
		material_id2 = 0;
		count2 = 0;
		isauto = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordStrenghthenOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 44;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << opcode;
		s << pre_level;
		s << new_level;
		s << pos;
		s << material_id;
		s << count;
		s << material_id2;
		s << count2;
		s << isauto;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> opcode;
		s >> pre_level;
		s >> new_level;
		s >> pos;
		s >> material_id;
		s >> count;
		s >> material_id2;
		s >> count2;
		s >> isauto;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "pre_level", pre_level);
		lua::settable(L, -1, "new_level", new_level);
		lua::settable(L, -1, "pos", pos);
		lua::settable(L, -1, "material_id", material_id);
		lua::settable(L, -1, "count", count);
		lua::settable(L, -1, "material_id2", material_id2);
		lua::settable(L, -1, "count2", count2);
		lua::settable(L, -1, "isauto", isauto);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",opcode=" << opcode;
		buffer << ",pre_level=" << pre_level;
		buffer << ",new_level=" << new_level;
		buffer << ",pos=" << pos;
		buffer << ",material_id=" << material_id;
		buffer << ",count=" << count;
		buffer << ",material_id2=" << material_id2;
		buffer << ",count2=" << count2;
		buffer << ",isauto=" << isauto;
	}

public:
	int aid;
	int pid;
	int opcode;
	int pre_level;
	int new_level;
	int pos;
	int material_id;
	int count;
	int material_id2;
	int count2;
	int isauto;
};

class MsgDBRecordStoneUpdateOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 71 };

	MsgDBRecordStoneUpdateOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		opcode = 0;
		pre_level = 0;
		new_level = 0;
		pos = 0;
		stone = 0;
		cnt = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordStoneUpdateOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 32;
		length += sizeof(short) + name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << name;
		s << opcode;
		s << pre_level;
		s << new_level;
		s << pos;
		s << stone;
		s << cnt;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> name;
		s >> opcode;
		s >> pre_level;
		s >> new_level;
		s >> pos;
		s >> stone;
		s >> cnt;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "pre_level", pre_level);
		lua::settable(L, -1, "new_level", new_level);
		lua::settable(L, -1, "pos", pos);
		lua::settable(L, -1, "stone", stone);
		lua::settable(L, -1, "cnt", cnt);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",opcode=" << opcode;
		buffer << ",pre_level=" << pre_level;
		buffer << ",new_level=" << new_level;
		buffer << ",pos=" << pos;
		buffer << ",stone=" << stone;
		buffer << ",cnt=" << cnt;
	}

public:
	int aid;
	int pid;
	std::string name;
	int opcode;
	int pre_level;
	int new_level;
	int pos;
	int stone;
	int cnt;
};

class MsgDBRecordChuanshiOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 72 };

	MsgDBRecordChuanshiOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		opcode = 0;
		pre_level = 0;
		new_level = 0;
		pos = 0;
		material1 = 0;
		count1 = 0;
		material2 = 0;
		count2 = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordChuanshiOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 40;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << opcode;
		s << pre_level;
		s << new_level;
		s << pos;
		s << material1;
		s << count1;
		s << material2;
		s << count2;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> opcode;
		s >> pre_level;
		s >> new_level;
		s >> pos;
		s >> material1;
		s >> count1;
		s >> material2;
		s >> count2;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "pre_level", pre_level);
		lua::settable(L, -1, "new_level", new_level);
		lua::settable(L, -1, "pos", pos);
		lua::settable(L, -1, "material1", material1);
		lua::settable(L, -1, "count1", count1);
		lua::settable(L, -1, "material2", material2);
		lua::settable(L, -1, "count2", count2);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",opcode=" << opcode;
		buffer << ",pre_level=" << pre_level;
		buffer << ",new_level=" << new_level;
		buffer << ",pos=" << pos;
		buffer << ",material1=" << material1;
		buffer << ",count1=" << count1;
		buffer << ",material2=" << material2;
		buffer << ",count2=" << count2;
	}

public:
	int aid;
	int pid;
	int opcode;
	int pre_level;
	int new_level;
	int pos;
	int material1;
	int count1;
	int material2;
	int count2;
};

class MsgDBRecordWeiMingOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 74 };

	MsgDBRecordWeiMingOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		opcode = 0;
		counts = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordWeiMingOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 16;
		length += sizeof(short) + name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << name;
		s << opcode;
		s << counts;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> name;
		s >> opcode;
		s >> counts;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "counts", counts);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",opcode=" << opcode;
		buffer << ",counts=" << counts;
	}

public:
	int aid;
	int pid;
	std::string name;
	int opcode;
	int counts;
};

class MsgDBRecordTowerOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 75 };

	MsgDBRecordTowerOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		enterLayer = 0;
		exitLayer = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordTowerOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 16;
		length += sizeof(short) + name.size();
		length += sizeof(short) + rewards.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << name;
		s << enterLayer;
		s << exitLayer;
		s << rewards;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> name;
		s >> enterLayer;
		s >> exitLayer;
		s >> rewards;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "enterLayer", enterLayer);
		lua::settable(L, -1, "exitLayer", exitLayer);
		lua::settable(L, -1, "rewards", rewards);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",enterLayer=" << enterLayer;
		buffer << ",exitLayer=" << exitLayer;
		buffer << ",rewards=" << rewards;
	}

public:
	int aid;
	int pid;
	std::string name;
	int enterLayer;
	int exitLayer;
	std::string rewards;
};

class MsgDBRecordMindPracRec : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 81 };

	MsgDBRecordMindPracRec() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		opcode = 0;
		curvalue = 0;
		nextvalue = 0;
		res = 0;
		intvalue = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordMindPracRec";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 28;
		length += sizeof(short) + name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << name;
		s << opcode;
		s << curvalue;
		s << nextvalue;
		s << res;
		s << intvalue;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> name;
		s >> opcode;
		s >> curvalue;
		s >> nextvalue;
		s >> res;
		s >> intvalue;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "curvalue", curvalue);
		lua::settable(L, -1, "nextvalue", nextvalue);
		lua::settable(L, -1, "res", res);
		lua::settable(L, -1, "intvalue", intvalue);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",opcode=" << opcode;
		buffer << ",curvalue=" << curvalue;
		buffer << ",nextvalue=" << nextvalue;
		buffer << ",res=" << res;
		buffer << ",intvalue=" << intvalue;
	}

public:
	int aid;
	int pid;
	std::string name;
	int opcode;
	int curvalue;
	int nextvalue;
	int res;
	int intvalue;
};

class MsgDBRecordPlayerWingOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 84 };

	MsgDBRecordPlayerWingOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		oldlevel = 0;
		newlevel = 0;
		cost = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordPlayerWingOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 20;
		length += sizeof(short) + name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << name;
		s << oldlevel;
		s << newlevel;
		s << cost;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> name;
		s >> oldlevel;
		s >> newlevel;
		s >> cost;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "oldlevel", oldlevel);
		lua::settable(L, -1, "newlevel", newlevel);
		lua::settable(L, -1, "cost", cost);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",oldlevel=" << oldlevel;
		buffer << ",newlevel=" << newlevel;
		buffer << ",cost=" << cost;
	}

public:
	int aid;
	int pid;
	std::string name;
	int oldlevel;
	int newlevel;
	int cost;
};

class MsgDBRecordRename : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 85 };

	MsgDBRecordRename() :
		MessageEx(Category, Id)
	{
		pid = 0;
		time = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordRename";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 8;
		length += sizeof(short) + oldname.size();
		length += sizeof(short) + newname.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << pid;
		s << oldname;
		s << newname;
		s << time;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> pid;
		s >> oldname;
		s >> newname;
		s >> time;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "oldname", oldname);
		lua::settable(L, -1, "newname", newname);
		lua::settable(L, -1, "time", time);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",pid=" << pid;
		buffer << ",oldname=" << oldname;
		buffer << ",newname=" << newname;
		buffer << ",time=" << time;
	}

public:
	int pid;
	std::string oldname;
	std::string newname;
	int time;
};

class MsgDBRecordFulingOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 86 };

	MsgDBRecordFulingOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		sid = 0;
		iid = 0;
		opcode = 0;
		pre_level = 0;
		pre_exp = 0;
		new_level = 0;
		new_exp = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordFulingOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 36;
		length += sizeof(short) + name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << name;
		s << sid;
		s << iid;
		s << opcode;
		s << pre_level;
		s << pre_exp;
		s << new_level;
		s << new_exp;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> name;
		s >> sid;
		s >> iid;
		s >> opcode;
		s >> pre_level;
		s >> pre_exp;
		s >> new_level;
		s >> new_exp;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "pre_level", pre_level);
		lua::settable(L, -1, "pre_exp", pre_exp);
		lua::settable(L, -1, "new_level", new_level);
		lua::settable(L, -1, "new_exp", new_exp);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",sid=" << sid;
		buffer << ",iid=" << iid;
		buffer << ",opcode=" << opcode;
		buffer << ",pre_level=" << pre_level;
		buffer << ",pre_exp=" << pre_exp;
		buffer << ",new_level=" << new_level;
		buffer << ",new_exp=" << new_exp;
	}

public:
	int aid;
	int pid;
	std::string name;
	int sid;
	int iid;
	int opcode;
	int pre_level;
	int pre_exp;
	int new_level;
	int new_exp;
};

class MsgDBRecordGuildCoin : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 87 };

	MsgDBRecordGuildCoin() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		opcode = 0;
		cnt = 0;
		type = 0;
		data = 0;
		old_count = 0;
		new_count = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordGuildCoin";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 32;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << opcode;
		s << cnt;
		s << type;
		s << data;
		s << old_count;
		s << new_count;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> opcode;
		s >> cnt;
		s >> type;
		s >> data;
		s >> old_count;
		s >> new_count;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "cnt", cnt);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "data", data);
		lua::settable(L, -1, "old_count", old_count);
		lua::settable(L, -1, "new_count", new_count);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",opcode=" << opcode;
		buffer << ",cnt=" << cnt;
		buffer << ",type=" << type;
		buffer << ",data=" << data;
		buffer << ",old_count=" << old_count;
		buffer << ",new_count=" << new_count;
	}

public:
	int aid;
	int pid;
	int opcode;
	int cnt;
	int type;
	int data;
	int old_count;
	int new_count;
};

class MsgDBRecordPlayerPropOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 88 };

	MsgDBRecordPlayerPropOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		prop_id = 0;
		old_data = 0;
		new_data = 0;
		add_data = 0;
		opcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordPlayerPropOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 28;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << prop_id;
		s << old_data;
		s << new_data;
		s << add_data;
		s << opcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> prop_id;
		s >> old_data;
		s >> new_data;
		s >> add_data;
		s >> opcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "prop_id", prop_id);
		lua::settable(L, -1, "old_data", old_data);
		lua::settable(L, -1, "new_data", new_data);
		lua::settable(L, -1, "add_data", add_data);
		lua::settable(L, -1, "opcode", opcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",prop_id=" << prop_id;
		buffer << ",old_data=" << old_data;
		buffer << ",new_data=" << new_data;
		buffer << ",add_data=" << add_data;
		buffer << ",opcode=" << opcode;
	}

public:
	int aid;
	int pid;
	int prop_id;
	int old_data;
	int new_data;
	int add_data;
	int opcode;
};

class MsgDBRecordShenhunOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 89 };

	MsgDBRecordShenhunOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		consumeexp = 0;
		consumecoin = 0;
		consumebindcoin = 0;
		shenhun = 0;
		equiptype = 0;
		gradeup = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordShenhunOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 32;
		length += sizeof(short) + name.size();
		length += sizeof(short) + optype.size();
		length += sizeof(short) + oldlevelinfo.size();
		length += sizeof(short) + newlevelinfo.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << name;
		s << optype;
		s << consumeexp;
		s << consumecoin;
		s << consumebindcoin;
		s << shenhun;
		s << equiptype;
		s << oldlevelinfo;
		s << newlevelinfo;
		s << gradeup;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> name;
		s >> optype;
		s >> consumeexp;
		s >> consumecoin;
		s >> consumebindcoin;
		s >> shenhun;
		s >> equiptype;
		s >> oldlevelinfo;
		s >> newlevelinfo;
		s >> gradeup;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "optype", optype);
		lua::settable(L, -1, "consumeexp", consumeexp);
		lua::settable(L, -1, "consumecoin", consumecoin);
		lua::settable(L, -1, "consumebindcoin", consumebindcoin);
		lua::settable(L, -1, "shenhun", shenhun);
		lua::settable(L, -1, "equiptype", equiptype);
		lua::settable(L, -1, "oldlevelinfo", oldlevelinfo);
		lua::settable(L, -1, "newlevelinfo", newlevelinfo);
		lua::settable(L, -1, "gradeup", gradeup);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",optype=" << optype;
		buffer << ",consumeexp=" << consumeexp;
		buffer << ",consumecoin=" << consumecoin;
		buffer << ",consumebindcoin=" << consumebindcoin;
		buffer << ",shenhun=" << shenhun;
		buffer << ",equiptype=" << equiptype;
		buffer << ",oldlevelinfo=" << oldlevelinfo;
		buffer << ",newlevelinfo=" << newlevelinfo;
		buffer << ",gradeup=" << gradeup;
	}

public:
	int aid;
	int pid;
	std::string name;
	std::string optype;
	int consumeexp;
	int consumecoin;
	int consumebindcoin;
	int shenhun;
	int equiptype;
	std::string oldlevelinfo;
	std::string newlevelinfo;
	int gradeup;
};

class MsgDBRecordRankScore : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 90 };

	MsgDBRecordRankScore() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		opcode = 0;
		cnt = 0;
		type = 0;
		data = 0;
		old_count = 0;
		new_count = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordRankScore";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 32;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << opcode;
		s << cnt;
		s << type;
		s << data;
		s << old_count;
		s << new_count;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> opcode;
		s >> cnt;
		s >> type;
		s >> data;
		s >> old_count;
		s >> new_count;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "cnt", cnt);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "data", data);
		lua::settable(L, -1, "old_count", old_count);
		lua::settable(L, -1, "new_count", new_count);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",opcode=" << opcode;
		buffer << ",cnt=" << cnt;
		buffer << ",type=" << type;
		buffer << ",data=" << data;
		buffer << ",old_count=" << old_count;
		buffer << ",new_count=" << new_count;
	}

public:
	int aid;
	int pid;
	int opcode;
	int cnt;
	int type;
	int data;
	int old_count;
	int new_count;
};

class MsgDBRecordQuanMinGuess : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 91 };

	MsgDBRecordQuanMinGuess() :
		MessageEx(Category, Id)
	{
		pid = 0;
		datax = 0;
		result = 0;
		sum = 0;
		value = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordQuanMinGuess";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 20;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << pid;
		s << datax;
		s << result;
		s << sum;
		s << value;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> pid;
		s >> datax;
		s >> result;
		s >> sum;
		s >> value;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "datax", datax);
		lua::settable(L, -1, "result", result);
		lua::settable(L, -1, "sum", sum);
		lua::settable(L, -1, "value", value);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",pid=" << pid;
		buffer << ",datax=" << datax;
		buffer << ",result=" << result;
		buffer << ",sum=" << sum;
		buffer << ",value=" << value;
	}

public:
	int pid;
	int datax;
	int result;
	int sum;
	int value;
};

class MsgDBSmeltOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 94 };

	MsgDBSmeltOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		opcode = 0;
		pos = 0;
		locks = 0;
		stone_sid = 0;
		stone_num = 0;
		ingot = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBSmeltOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 32;
		length += sizeof(short) + name.size();
		length += sizeof(short) + strprop.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << opcode;
		s << name;
		s << strprop;
		s << pos;
		s << locks;
		s << stone_sid;
		s << stone_num;
		s << ingot;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> opcode;
		s >> name;
		s >> strprop;
		s >> pos;
		s >> locks;
		s >> stone_sid;
		s >> stone_num;
		s >> ingot;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "strprop", strprop);
		lua::settable(L, -1, "pos", pos);
		lua::settable(L, -1, "locks", locks);
		lua::settable(L, -1, "stone_sid", stone_sid);
		lua::settable(L, -1, "stone_num", stone_num);
		lua::settable(L, -1, "ingot", ingot);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",opcode=" << opcode;
		buffer << ",name=" << name;
		buffer << ",strprop=" << strprop;
		buffer << ",pos=" << pos;
		buffer << ",locks=" << locks;
		buffer << ",stone_sid=" << stone_sid;
		buffer << ",stone_num=" << stone_num;
		buffer << ",ingot=" << ingot;
	}

public:
	int aid;
	int pid;
	int opcode;
	std::string name;
	std::string strprop;
	int pos;
	int locks;
	int stone_sid;
	int stone_num;
	int ingot;
};

class MsgDBRecordTherion : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 96 };

	MsgDBRecordTherion() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		opcode = 0;
		oldlevel = 0;
		newlevel = 0;
		cost1 = 0;
		cost2 = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordTherion";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 28;
		length += sizeof(short) + name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << name;
		s << opcode;
		s << oldlevel;
		s << newlevel;
		s << cost1;
		s << cost2;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> name;
		s >> opcode;
		s >> oldlevel;
		s >> newlevel;
		s >> cost1;
		s >> cost2;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "oldlevel", oldlevel);
		lua::settable(L, -1, "newlevel", newlevel);
		lua::settable(L, -1, "cost1", cost1);
		lua::settable(L, -1, "cost2", cost2);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",opcode=" << opcode;
		buffer << ",oldlevel=" << oldlevel;
		buffer << ",newlevel=" << newlevel;
		buffer << ",cost1=" << cost1;
		buffer << ",cost2=" << cost2;
	}

public:
	int aid;
	int pid;
	std::string name;
	int opcode;
	int oldlevel;
	int newlevel;
	int cost1;
	int cost2;
};

class MsgDBAddConsignmentRecording : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 97 };

	MsgDBAddConsignmentRecording() :
		MessageEx(Category, Id)
	{
		pid = 0;
		buyerpid = 0;
		sid = 0;
		count = 0;
		price = 0;
		pricetype = 0;
		ctype = 0;
		btime = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBAddConsignmentRecording";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 32;
		length += sizeof(short) + sellername.size();
		length += sizeof(short) + buyername.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << pid;
		s << sellername;
		s << buyerpid;
		s << buyername;
		s << sid;
		s << count;
		s << price;
		s << pricetype;
		s << ctype;
		s << btime;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> pid;
		s >> sellername;
		s >> buyerpid;
		s >> buyername;
		s >> sid;
		s >> count;
		s >> price;
		s >> pricetype;
		s >> ctype;
		s >> btime;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "sellername", sellername);
		lua::settable(L, -1, "buyerpid", buyerpid);
		lua::settable(L, -1, "buyername", buyername);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "count", count);
		lua::settable(L, -1, "price", price);
		lua::settable(L, -1, "pricetype", pricetype);
		lua::settable(L, -1, "ctype", ctype);
		lua::settable(L, -1, "btime", btime);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",pid=" << pid;
		buffer << ",sellername=" << sellername;
		buffer << ",buyerpid=" << buyerpid;
		buffer << ",buyername=" << buyername;
		buffer << ",sid=" << sid;
		buffer << ",count=" << count;
		buffer << ",price=" << price;
		buffer << ",pricetype=" << pricetype;
		buffer << ",ctype=" << ctype;
		buffer << ",btime=" << btime;
	}

public:
	int pid; //卖家ID 
	std::string sellername; //卖家姓名 
	int buyerpid; //买家ID 
	std::string buyername; //买家姓名 
	int sid; //物品ID 
	int count; //物品数量 
	int price; //出售价格 
	int pricetype; //货币类型 
	int ctype; //交易类型 
	int btime; //交易时间 
};

class MsgDBRecordShenLongHuTiOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 98 };

	MsgDBRecordShenLongHuTiOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		opcode = 0;
		oldlevel = 0;
		newlevel = 0;
		cost1 = 0;
		cost2 = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordShenLongHuTiOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		size_t length = __super::getLength() + 28;
		length += sizeof(short) + name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << name;
		s << opcode;
		s << oldlevel;
		s << newlevel;
		s << cost1;
		s << cost2;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> name;
		s >> opcode;
		s >> oldlevel;
		s >> newlevel;
		s >> cost1;
		s >> cost2;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "oldlevel", oldlevel);
		lua::settable(L, -1, "newlevel", newlevel);
		lua::settable(L, -1, "cost1", cost1);
		lua::settable(L, -1, "cost2", cost2);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",opcode=" << opcode;
		buffer << ",oldlevel=" << oldlevel;
		buffer << ",newlevel=" << newlevel;
		buffer << ",cost1=" << cost1;
		buffer << ",cost2=" << cost2;
	}

public:
	int aid;
	int pid;
	std::string name;
	int opcode;
	int oldlevel;
	int newlevel;
	int cost1;
	int cost2;
};

class MsgDBRecordHolidayUpdateResponse : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 99 };

	MsgDBRecordHolidayUpdateResponse() :
		MessageEx(Category, Id)
	{
		switch_id = 0;
		type = 0;
		reset = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordHolidayUpdateResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return 0;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 13;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << switch_id;
		s << type;
		s << reset;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> switch_id;
		s >> type;
		s >> reset;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "switch_id", switch_id);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "reset", reset);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",switch_id=" << switch_id;
		buffer << ",type=" << type;
		buffer << ",reset=" << reset;
		buffer << ",errcode=" << errcode;
	}

public:
	int switch_id;
	int type;
	char reset;
	int errcode;
};

class MsgDBRecordIngotSpecialOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 100 };

	MsgDBRecordIngotSpecialOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		opcode = 0;
		cnt = 0;
		type = 0;
		data = 0;
		old_count = 0;
		new_count = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordIngotSpecialOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 32;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << opcode;
		s << cnt;
		s << type;
		s << data;
		s << old_count;
		s << new_count;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> opcode;
		s >> cnt;
		s >> type;
		s >> data;
		s >> old_count;
		s >> new_count;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "cnt", cnt);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "data", data);
		lua::settable(L, -1, "old_count", old_count);
		lua::settable(L, -1, "new_count", new_count);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",opcode=" << opcode;
		buffer << ",cnt=" << cnt;
		buffer << ",type=" << type;
		buffer << ",data=" << data;
		buffer << ",old_count=" << old_count;
		buffer << ",new_count=" << new_count;
	}

public:
	int aid;
	int pid;
	int opcode;
	int cnt;
	int type;
	int data;
	int old_count;
	int new_count;
};

class MsgDBRecordIncreaseEnhanceOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 101 };

	MsgDBRecordIncreaseEnhanceOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		sid = 0;
		source_sid = 0;
		old_level = 0;
		new_level = 0;
		opcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordIncreaseEnhanceOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 28;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << sid;
		s << source_sid;
		s << old_level;
		s << new_level;
		s << opcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> sid;
		s >> source_sid;
		s >> old_level;
		s >> new_level;
		s >> opcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "source_sid", source_sid);
		lua::settable(L, -1, "old_level", old_level);
		lua::settable(L, -1, "new_level", new_level);
		lua::settable(L, -1, "opcode", opcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",sid=" << sid;
		buffer << ",source_sid=" << source_sid;
		buffer << ",old_level=" << old_level;
		buffer << ",new_level=" << new_level;
		buffer << ",opcode=" << opcode;
	}

public:
	int aid;
	int pid;
	int sid;
	int source_sid;
	int old_level;
	int new_level;
	int opcode;
};

class MsgDBRecordEquipEnhanceOp : public MessageEx
{
public:
	enum { Category = MSG_CATEGORY_DB_RECORDS, Id = 102 };

	MsgDBRecordEquipEnhanceOp() :
		MessageEx(Category, Id)
	{
		aid = 0;
		pid = 0;
		old_level = 0;
		new_level = 0;
		pos = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDBRecordEquipEnhanceOp";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual int getSalt() const
	{
		return pid;
	}

	virtual bool getSendBack() const
	{
		return true;
	}

	virtual size_t getLength() const
	{
		return __super::getLength() + 20;
	}

	virtual bool serialize(ByteStream &s) const
	{
		__super::serialize(s);
		s << aid;
		s << pid;
		s << old_level;
		s << new_level;
		s << pos;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		__super::unserialize(s);
		s >> aid;
		s >> pid;
		s >> old_level;
		s >> new_level;
		s >> pos;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "aid", aid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "old_level", old_level);
		lua::settable(L, -1, "new_level", new_level);
		lua::settable(L, -1, "pos", pos);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		__super::dump(buffer);
		buffer << ",aid=" << aid;
		buffer << ",pid=" << pid;
		buffer << ",old_level=" << old_level;
		buffer << ",new_level=" << new_level;
		buffer << ",pos=" << pos;
	}

public:
	int aid;
	int pid;
	int old_level;
	int new_level;
	int pos;
};

#endif	//_DB_MSG_RECORDS_H_INCLUDED
