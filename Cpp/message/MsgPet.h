//
//Generated by lua
//2009-2012	(C) XianFeng Inc. Reserved
//

#ifndef _MSG_PET_H_INCLUDED
#define _MSG_PET_H_INCLUDED

#include "category.h"
#include "common/Message.h"

struct PetInfo
{
public:
	PetInfo()
	{
		id = 0;
		sid = 0;
		lvl = 0;
		exp = 0;
		state = 0;
		reborn = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 22;
		length += sizeof(short) + name.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << id;
		s << sid;
		s << name;
		s << lvl;
		s << exp;
		s << state;
		s << reborn;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> id;
		s >> sid;
		s >> name;
		s >> lvl;
		s >> exp;
		s >> state;
		s >> reborn;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "lvl", lvl);
		lua::settable(L, -1, "exp", exp);
		lua::settable(L, -1, "state", state);
		lua::settable(L, -1, "reborn", reborn);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",sid=" << sid;
		buffer << ",name=" << name;
		buffer << ",lvl=" << lvl;
		buffer << ",exp=" << exp;
		buffer << ",state=" << state;
		buffer << ",reborn=" << reborn;
	}

public:
	int id;
	int sid;
	std::string name;
	short lvl;
	int exp;
	int state;
	int reborn;
};

class MsgUpdPetInfoBaseNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 1 };

	MsgUpdPetInfoBaseNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgUpdPetInfoBaseNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < petBase.size(); ++i)
		{
			length += petBase[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short petBase_vector_size = (short)petBase.size();
		s << petBase_vector_size;
		if (petBase_vector_size > 0)
		{
			for (auto it = petBase.begin(); it != petBase.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int petBase_vector_size = s.read_int16();
		petBase.clear();
		while (petBase_vector_size > 0)
		{
			petBase_vector_size--;
			PetInfo val;
			val.unserialize(s, false);
			petBase.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < petBase.size(); ++i)
		{
			petBase[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "petBase");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "petBase=[";
		for (size_t i = 0; i < petBase.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			petBase[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<PetInfo> petBase;
};

class MsgUpdPetCombatNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 2 };

	MsgUpdPetCombatNotify() :
		Message(Category, Id)
	{
		id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdPetCombatNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short);
		length += combatdata.size() * 4;
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		short combatdata_vector_size = (short)combatdata.size();
		s << combatdata_vector_size;
		if (combatdata_vector_size > 0)
		{
			for (auto it = combatdata.begin(); it != combatdata.end(); ++it)
			{
				s << *it;
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		int combatdata_vector_size = s.read_int16();
		combatdata.clear();
		while (combatdata_vector_size > 0)
		{
			combatdata_vector_size--;
			int val;
			s >> val;
			combatdata.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::newtable(lua::L);
		for (size_t i = 0; i < combatdata.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, combatdata[i]);
		}
		lua::settable(L, -2, "combatdata");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",combatdata=[";
		for (size_t i = 0; i < combatdata.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << combatdata[i];
		}
		buffer << "]";
	}

public:
	int id;
	std::vector<int> combatdata;
};

class MsgRmvPetRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 3 };

	MsgRmvPetRequest() :
		Message(Category, Id)
	{
		id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRmvPetRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
	}

public:
	int id;
};

class MsgRmvPetResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 4 };

	MsgRmvPetResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRmvPetResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgActivePetStateRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 5 };

	MsgActivePetStateRequest() :
		Message(Category, Id)
	{
		id = 0;
		opcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgActivePetStateRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		s << opcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		s >> opcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "opcode", opcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",opcode=" << opcode;
	}

public:
	int id;
	short opcode;
};

class MsgActivePetStateResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 6 };

	MsgActivePetStateResponse() :
		Message(Category, Id)
	{
		id = 0;
		opcode = 0;
		errcode = 0;
		cooltime = 0;
	}

	virtual const char *getName() const
	{
		return "MsgActivePetStateResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		s << opcode;
		s << errcode;
		s << cooltime;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		s >> opcode;
		s >> errcode;
		s >> cooltime;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "cooltime", cooltime);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",opcode=" << opcode;
		buffer << ",errcode=" << errcode;
		buffer << ",cooltime=" << cooltime;
	}

public:
	int id;
	short opcode;
	short errcode;
	int cooltime;
};

class MsgPetStateNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 7 };

	MsgPetStateNotify() :
		Message(Category, Id)
	{
		id = 0;
		state = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPetStateNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		s << state;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		s >> state;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "state", state);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",state=" << state;
	}

public:
	int id;
	int state;
};

class MsgRelivePetRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 8 };

	MsgRelivePetRequest() :
		Message(Category, Id)
	{
		id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRelivePetRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
	}

public:
	int id;
};

class MsgRelivePetResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 9 };

	MsgRelivePetResponse() :
		Message(Category, Id)
	{
		id = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRelivePetResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",errcode=" << errcode;
	}

public:
	int id;
	short errcode;
};

class MsgFeedPetRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 10 };

	MsgFeedPetRequest() :
		Message(Category, Id)
	{
		id = 0;
		feedtype = 0;
	}

	virtual const char *getName() const
	{
		return "MsgFeedPetRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		s << feedtype;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		s >> feedtype;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "feedtype", feedtype);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",feedtype=" << feedtype;
	}

public:
	int id;
	short feedtype;
};

class MsgFeedPetResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 11 };

	MsgFeedPetResponse() :
		Message(Category, Id)
	{
		id = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgFeedPetResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",errcode=" << errcode;
	}

public:
	int id;
	short errcode;
};

class MsgUpdPetLvlExpNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 12 };

	MsgUpdPetLvlExpNotify() :
		Message(Category, Id)
	{
		id = 0;
		lvl = 0;
		exp = 0;
		opcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgUpdPetLvlExpNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 14;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		s << lvl;
		s << exp;
		s << opcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		s >> lvl;
		s >> exp;
		s >> opcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "lvl", lvl);
		lua::settable(L, -1, "exp", exp);
		lua::settable(L, -1, "opcode", opcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",lvl=" << lvl;
		buffer << ",exp=" << exp;
		buffer << ",opcode=" << opcode;
	}

public:
	int id;
	int lvl;
	int exp;
	short opcode;
};

class MsgRmvPetNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 15 };

	MsgRmvPetNotify() :
		Message(Category, Id)
	{
		petid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRmvPetNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << petid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> petid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "petid", petid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "petid=" << petid;
	}

public:
	int petid;
};

class MsgAddPetNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 16 };

	MsgAddPetNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgAddPetNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += petBase.getLength(false);
		length += sizeof(short);
		length += combatdata.size() * 4;
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		petBase.serialize(s, false);
		short combatdata_vector_size = (short)combatdata.size();
		s << combatdata_vector_size;
		if (combatdata_vector_size > 0)
		{
			for (auto it = combatdata.begin(); it != combatdata.end(); ++it)
			{
				s << *it;
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		petBase.unserialize(s, false);
		int combatdata_vector_size = s.read_int16();
		combatdata.clear();
		while (combatdata_vector_size > 0)
		{
			combatdata_vector_size--;
			int val;
			s >> val;
			combatdata.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		petBase.push(L);
		lua::settable(L, -1, "petBase");
		lua::newtable(lua::L);
		for (size_t i = 0; i < combatdata.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, combatdata[i]);
		}
		lua::settable(L, -2, "combatdata");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "petBase={";
		petBase.dump(buffer);
		buffer << "}";
		buffer << ",combatdata=[";
		for (size_t i = 0; i < combatdata.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << combatdata[i];
		}
		buffer << "]";
	}

public:
	PetInfo petBase;
	std::vector<int> combatdata;
};

class MsgSleepPetStateRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 17 };

	MsgSleepPetStateRequest() :
		Message(Category, Id)
	{
		id = 0;
		opcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSleepPetStateRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		s << opcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		s >> opcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "opcode", opcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",opcode=" << opcode;
	}

public:
	int id;
	short opcode;
};

class MsgSleepPetStateResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 18 };

	MsgSleepPetStateResponse() :
		Message(Category, Id)
	{
		id = 0;
		opcode = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSleepPetStateResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		s << opcode;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		s >> opcode;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "opcode", opcode);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",opcode=" << opcode;
		buffer << ",errcode=" << errcode;
	}

public:
	int id;
	short opcode;
	short errcode;
};

class MsgImprisonPetRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 19 };

	MsgImprisonPetRequest() :
		Message(Category, Id)
	{
		id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgImprisonPetRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
	}

public:
	int id;
};

class MsgImprisonPetResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 20 };

	MsgImprisonPetResponse() :
		Message(Category, Id)
	{
		id = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgImprisonPetResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",errcode=" << errcode;
	}

public:
	int id;
	short errcode;
};

struct sellitem
{
public:
	sellitem()
	{
		iid = 0;
		selltype = 0;
		sellprice = 0;
		sellcnt = 0;
	}

	size_t getLength(bool ex) const
	{
		return 16;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << iid;
		s << selltype;
		s << sellprice;
		s << sellcnt;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> iid;
		s >> selltype;
		s >> sellprice;
		s >> sellcnt;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
		lua::settable(L, -1, "selltype", selltype);
		lua::settable(L, -1, "sellprice", sellprice);
		lua::settable(L, -1, "sellcnt", sellcnt);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
		buffer << ",selltype=" << selltype;
		buffer << ",sellprice=" << sellprice;
		buffer << ",sellcnt=" << sellcnt;
	}

public:
	int iid;
	int selltype;
	int sellprice;
	int sellcnt;
};

class MsgImprovePetAdvanceRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 63 };

	MsgImprovePetAdvanceRequest() :
		Message(Category, Id)
	{
		petid = 0;
		datax = 0;
		datay = 0;
		dataz = 0;
		isvcoin = 0;
	}

	virtual const char *getName() const
	{
		return "MsgImprovePetAdvanceRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << petid;
		s << datax;
		s << datay;
		s << dataz;
		s << isvcoin;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> petid;
		s >> datax;
		s >> datay;
		s >> dataz;
		s >> isvcoin;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "petid", petid);
		lua::settable(L, -1, "datax", datax);
		lua::settable(L, -1, "datay", datay);
		lua::settable(L, -1, "dataz", dataz);
		lua::settable(L, -1, "isvcoin", isvcoin);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "petid=" << petid;
		buffer << ",datax=" << datax;
		buffer << ",datay=" << datay;
		buffer << ",dataz=" << dataz;
		buffer << ",isvcoin=" << isvcoin;
	}

public:
	int petid;
	short datax;
	short datay;
	short dataz;
	short isvcoin;
};

class MsgChangePetBestAttrRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 64 };

	MsgChangePetBestAttrRequest() :
		Message(Category, Id)
	{
		petid = 0;
		isvcoin = 0;
	}

	virtual const char *getName() const
	{
		return "MsgChangePetBestAttrRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << petid;
		s << isvcoin;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> petid;
		s >> isvcoin;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "petid", petid);
		lua::settable(L, -1, "isvcoin", isvcoin);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "petid=" << petid;
		buffer << ",isvcoin=" << isvcoin;
	}

public:
	int petid;
	short isvcoin;
};

class MsgImprovePetAdvanceResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 65 };

	MsgImprovePetAdvanceResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgImprovePetAdvanceResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgChangePetBestAttrResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 66 };

	MsgChangePetBestAttrResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgChangePetBestAttrResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgSetPetPickStateRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 101 };

	MsgSetPetPickStateRequest() :
		Message(Category, Id)
	{
		state = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSetPetPickStateRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << state;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> state;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "state", state);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "state=" << state;
	}

public:
	short state;
};

class MsgSetPetPickStateResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 102 };

	MsgSetPetPickStateResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSetPetPickStateResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgSetPetPickSettingRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 103 };

	MsgSetPetPickSettingRequest() :
		Message(Category, Id)
	{
		state = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSetPetPickSettingRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << state;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> state;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "state", state);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "state=" << state;
	}

public:
	short state;
};

class MsgSetPetPickSettingResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 104 };

	MsgSetPetPickSettingResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSetPetPickSettingResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgSyncPetExPropDataNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 110 };

	MsgSyncPetExPropDataNotify() :
		Message(Category, Id)
	{
		petid = 0;
		idx = 0;
		data = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncPetExPropDataNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << petid;
		s << idx;
		s << data;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> petid;
		s >> idx;
		s >> data;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "petid", petid);
		lua::settable(L, -1, "idx", idx);
		lua::settable(L, -1, "data", data);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "petid=" << petid;
		buffer << ",idx=" << idx;
		buffer << ",data=" << data;
	}

public:
	int petid;
	short idx;
	int data;
};

class MsgRaisePetStarRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 125 };

	MsgRaisePetStarRequest() :
		Message(Category, Id)
	{
		id = 0;
		star = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRaisePetStarRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		s << star;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		s >> star;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "star", star);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",star=" << star;
	}

public:
	int id;
	int star;
};

class MsgRaisePetStarResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 126 };

	MsgRaisePetStarResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		id = 0;
		idx = 0;
		star = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRaisePetStarResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 14;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << id;
		s << idx;
		s << star;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> id;
		s >> idx;
		s >> star;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "idx", idx);
		lua::settable(L, -1, "star", star);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",id=" << id;
		buffer << ",idx=" << idx;
		buffer << ",star=" << star;
	}

public:
	short errcode;
	int id;
	int idx;
	int star;
};

class MsgNirvanaPetRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 127 };

	MsgNirvanaPetRequest() :
		Message(Category, Id)
	{
		id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgNirvanaPetRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
	}

public:
	int id;
};

class MsgNirvanaPetResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 128 };

	MsgNirvanaPetResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		id = 0;
		sid = 0;
		reborn = 0;
	}

	virtual const char *getName() const
	{
		return "MsgNirvanaPetResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 14;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << id;
		s << sid;
		s << reborn;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> id;
		s >> sid;
		s >> reborn;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "reborn", reborn);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",id=" << id;
		buffer << ",sid=" << sid;
		buffer << ",reborn=" << reborn;
	}

public:
	short errcode;
	int id;
	int sid;
	int reborn;
};

class MsgPetSkillNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 129 };

	MsgPetSkillNotify() :
		Message(Category, Id)
	{
		sid = 0;
		position = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPetSkillNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 5;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << sid;
		s << position;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> sid;
		s >> position;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "position", position);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "sid=" << sid;
		buffer << ",position=" << position;
	}

public:
	int sid;
	char position;
};

class MsgPetSkillEquipRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 131 };

	MsgPetSkillEquipRequest() :
		Message(Category, Id)
	{
		sid = 0;
		position = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPetSkillEquipRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 5;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << sid;
		s << position;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> sid;
		s >> position;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "position", position);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "sid=" << sid;
		buffer << ",position=" << position;
	}

public:
	int sid;
	char position;
};

class MsgPetSkillEquipResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 132 };

	MsgPetSkillEquipResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		sid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPetSkillEquipResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << sid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> sid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "sid", sid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",sid=" << sid;
	}

public:
	short errcode;
	int sid;
};

class MsgPetSummonRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 133 };

	MsgPetSummonRequest() :
		Message(Category, Id)
	{
		sid = 0;
		type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPetSummonRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << sid;
		s << type;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> sid;
		s >> type;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "type", type);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "sid=" << sid;
		buffer << ",type=" << type;
	}

public:
	int sid;
	int type;
};

class MsgPetSummonResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 134 };

	MsgPetSummonResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		sid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPetSummonResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << sid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> sid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "sid", sid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",sid=" << sid;
	}

public:
	short errcode;
	int sid;
};

class MsgAddPetSkillNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 135 };

	MsgAddPetSkillNotify() :
		Message(Category, Id)
	{
		sid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgAddPetSkillNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << sid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> sid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sid", sid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "sid=" << sid;
	}

public:
	int sid;
};

class MsgRebornPetNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_PET, Id = 136 };

	MsgRebornPetNotify() :
		Message(Category, Id)
	{
		id = 0;
		sid = 0;
		reborn = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRebornPetNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		s << sid;
		s << reborn;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		s >> sid;
		s >> reborn;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "reborn", reborn);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",sid=" << sid;
		buffer << ",reborn=" << reborn;
	}

public:
	int id;
	int sid;
	int reborn;
};

#endif	//_MSG_PET_H_INCLUDED
