//
//Generated by lua
//2009-2012	(C) XianFeng Inc. Reserved
//

#ifndef _MSG_GUILD_H_INCLUDED
#define _MSG_GUILD_H_INCLUDED

#include "category.h"
#include "common/Message.h"

struct GuildMemberInfo
{
public:
	GuildMemberInfo()
	{
		pid = 0;
		level = 0;
		post = 0;
		contribution = 0;
		todaycontribution = 0;
		online = 0;
		rank = 0;
		vitality = 0;
		gender = 0;
		speek = 0;
		force = 0;
		offtime = 0;
		sceneid = 0;
		reborn = 0;
		sponsorGrade = 0;
		job = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 53;
		length += sizeof(short) + name.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << pid;
		s << name;
		s << level;
		s << post;
		s << contribution;
		s << todaycontribution;
		s << online;
		s << rank;
		s << vitality;
		s << gender;
		s << speek;
		s << force;
		s << offtime;
		s << sceneid;
		s << reborn;
		s << sponsorGrade;
		s << job;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> pid;
		s >> name;
		s >> level;
		s >> post;
		s >> contribution;
		s >> todaycontribution;
		s >> online;
		s >> rank;
		s >> vitality;
		s >> gender;
		s >> speek;
		s >> force;
		s >> offtime;
		s >> sceneid;
		s >> reborn;
		s >> sponsorGrade;
		s >> job;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "post", post);
		lua::settable(L, -1, "contribution", contribution);
		lua::settable(L, -1, "todaycontribution", todaycontribution);
		lua::settable(L, -1, "online", online);
		lua::settable(L, -1, "rank", rank);
		lua::settable(L, -1, "vitality", vitality);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "speek", speek);
		lua::settable(L, -1, "force", force);
		lua::settable(L, -1, "offtime", offtime);
		lua::settable(L, -1, "sceneid", sceneid);
		lua::settable(L, -1, "reborn", reborn);
		lua::settable(L, -1, "sponsorGrade", sponsorGrade);
		lua::settable(L, -1, "job", job);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",name=" << name;
		buffer << ",level=" << level;
		buffer << ",post=" << post;
		buffer << ",contribution=" << contribution;
		buffer << ",todaycontribution=" << todaycontribution;
		buffer << ",online=" << online;
		buffer << ",rank=" << rank;
		buffer << ",vitality=" << vitality;
		buffer << ",gender=" << gender;
		buffer << ",speek=" << speek;
		buffer << ",force=" << force;
		buffer << ",offtime=" << offtime;
		buffer << ",sceneid=" << sceneid;
		buffer << ",reborn=" << reborn;
		buffer << ",sponsorGrade=" << sponsorGrade;
		buffer << ",job=" << job;
	}

public:
	int pid;
	std::string name;
	short level;
	short post;
	int contribution;
	int todaycontribution;
	char online;
	int rank;
	int vitality;
	short gender;
	short speek;
	int force;
	int offtime;
	int sceneid;
	int reborn;
	int sponsorGrade;
	int job;
};

class MsgCreateGuildRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 1 };

	MsgCreateGuildRequest() :
		Message(Category, Id)
	{
		level = 0;
	}

	virtual const char *getName() const
	{
		return "MsgCreateGuildRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 2;
		length += sizeof(short) + GuildName.size();
		length += sizeof(short) + placard.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << GuildName;
		s << placard;
		s << level;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> GuildName;
		s >> placard;
		s >> level;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "GuildName", GuildName);
		lua::settable(L, -1, "placard", placard);
		lua::settable(L, -1, "level", level);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "GuildName=" << GuildName;
		buffer << ",placard=" << placard;
		buffer << ",level=" << level;
	}

public:
	std::string GuildName;
	std::string placard;
	short level; //最低等级 
};

class MsgCreateGuildResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 2 };

	MsgCreateGuildResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgCreateGuildResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgApplicationToGuildRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 3 };

	MsgApplicationToGuildRequest() :
		Message(Category, Id)
	{
		GuildID = 0;
	}

	virtual const char *getName() const
	{
		return "MsgApplicationToGuildRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << GuildID;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> GuildID;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "GuildID", GuildID);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "GuildID=" << GuildID;
	}

public:
	int GuildID;
};

class MsgApplicationResultRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 4 };

	MsgApplicationResultRequest() :
		Message(Category, Id)
	{
		pid = 0;
		Decide = 0;
	}

	virtual const char *getName() const
	{
		return "MsgApplicationResultRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << Decide;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> Decide;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "Decide", Decide);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",Decide=" << Decide;
	}

public:
	int pid;
	short Decide;
};

class MsgApplicationToGuildResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 5 };

	MsgApplicationToGuildResponse() :
		Message(Category, Id)
	{
		GuildID = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgApplicationToGuildResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << GuildID;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> GuildID;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "GuildID", GuildID);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "GuildID=" << GuildID;
		buffer << ",errcode=" << errcode;
	}

public:
	int GuildID;
	short errcode;
};

class MsgDeleteGuildMemberRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 6 };

	MsgDeleteGuildMemberRequest() :
		Message(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDeleteGuildMemberRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
	}

public:
	int pid;
};

struct GuildInfo
{
public:
	GuildInfo()
	{
		rank = 0;
		GuildID = 0;
		MasterID = 0;
		MasterOnline = 0;
		MemberCount = 0;
		state = 0;
		level = 0;
		ctime = 0;
		combat = 0;
		declareguildid = 0;
		declareovertime = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 41;
		length += sizeof(short) + GuildName.size();
		length += sizeof(short) + MasterName.size();
		length += sizeof(short) + notice.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << rank;
		s << GuildID;
		s << GuildName;
		s << MasterID;
		s << MasterName;
		s << MasterOnline;
		s << MemberCount;
		s << state;
		s << level;
		s << ctime;
		s << combat;
		s << notice;
		s << declareguildid;
		s << declareovertime;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> rank;
		s >> GuildID;
		s >> GuildName;
		s >> MasterID;
		s >> MasterName;
		s >> MasterOnline;
		s >> MemberCount;
		s >> state;
		s >> level;
		s >> ctime;
		s >> combat;
		s >> notice;
		s >> declareguildid;
		s >> declareovertime;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "rank", rank);
		lua::settable(L, -1, "GuildID", GuildID);
		lua::settable(L, -1, "GuildName", GuildName);
		lua::settable(L, -1, "MasterID", MasterID);
		lua::settable(L, -1, "MasterName", MasterName);
		lua::settable(L, -1, "MasterOnline", MasterOnline);
		lua::settable(L, -1, "MemberCount", MemberCount);
		lua::settable(L, -1, "state", state);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "ctime", ctime);
		lua::settable(L, -1, "combat", combat);
		lua::settable(L, -1, "notice", notice);
		lua::settable(L, -1, "declareguildid", declareguildid);
		lua::settable(L, -1, "declareovertime", declareovertime);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "rank=" << rank;
		buffer << ",GuildID=" << GuildID;
		buffer << ",GuildName=" << GuildName;
		buffer << ",MasterID=" << MasterID;
		buffer << ",MasterName=" << MasterName;
		buffer << ",MasterOnline=" << MasterOnline;
		buffer << ",MemberCount=" << MemberCount;
		buffer << ",state=" << state;
		buffer << ",level=" << level;
		buffer << ",ctime=" << ctime;
		buffer << ",combat=" << combat;
		buffer << ",notice=" << notice;
		buffer << ",declareguildid=" << declareguildid;
		buffer << ",declareovertime=" << declareovertime;
	}

public:
	int rank;
	int GuildID;
	std::string GuildName;
	int MasterID;
	std::string MasterName;
	char MasterOnline;
	short MemberCount;
	short state;
	int level;
	int ctime;
	long long combat;
	std::string notice;
	int declareguildid;
	int declareovertime;
};

class MsgGetGuildsInfoRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 7 };

	MsgGetGuildsInfoRequest() :
		Message(Category, Id)
	{
		page = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetGuildsInfoRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << page;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> page;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "page", page);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "page=" << page;
	}

public:
	short page;
};

class MsgGuildsInfoResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 8 };

	MsgGuildsInfoResponse() :
		Message(Category, Id)
	{
		page = 0;
		maxpage = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildsInfoResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 6;
		length += sizeof(short);
		for (size_t i = 0; i < Guilds.size(); ++i)
		{
			length += Guilds[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << page;
		s << maxpage;
		short Guilds_vector_size = (short)Guilds.size();
		s << Guilds_vector_size;
		if (Guilds_vector_size > 0)
		{
			for (auto it = Guilds.begin(); it != Guilds.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> page;
		s >> maxpage;
		int Guilds_vector_size = s.read_int16();
		Guilds.clear();
		while (Guilds_vector_size > 0)
		{
			Guilds_vector_size--;
			GuildInfo val;
			val.unserialize(s, false);
			Guilds.push_back(val);
		}
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "page", page);
		lua::settable(L, -1, "maxpage", maxpage);
		lua::newtable(lua::L);
		for (size_t i = 0; i < Guilds.size(); ++i)
		{
			Guilds[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "Guilds");
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "page=" << page;
		buffer << ",maxpage=" << maxpage;
		buffer << ",Guilds=[";
		for (size_t i = 0; i < Guilds.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			Guilds[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
		buffer << ",errcode=" << errcode;
	}

public:
	short page;
	short maxpage;
	std::vector<GuildInfo> Guilds;
	short errcode;
};

class MsgGuildMemberChangeNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 9 };

	MsgGuildMemberChangeNotify() :
		Message(Category, Id)
	{
		reason = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildMemberChangeNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 1;
		length += player.getLength(false);
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		player.serialize(s, false);
		s << reason;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		player.unserialize(s, false);
		s >> reason;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		player.push(L);
		lua::settable(L, -1, "player");
		lua::settable(L, -1, "reason", reason);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "player={";
		player.dump(buffer);
		buffer << "}";
		buffer << ",reason=" << reason;
	}

public:
	GuildMemberInfo player;
	char reason;
};

class MsgApplicationResultResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 10 };

	MsgApplicationResultResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgApplicationResultResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgLeaveGuildRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 11 };

	MsgLeaveGuildRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgLeaveGuildRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgLeaveGuildResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 12 };

	MsgLeaveGuildResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgLeaveGuildResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgCancelApplicationToGuildRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 13 };

	MsgCancelApplicationToGuildRequest() :
		Message(Category, Id)
	{
		GuildID = 0;
	}

	virtual const char *getName() const
	{
		return "MsgCancelApplicationToGuildRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << GuildID;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> GuildID;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "GuildID", GuildID);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "GuildID=" << GuildID;
	}

public:
	int GuildID;
};

class MsgDeleteGuildMemberResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 14 };

	MsgDeleteGuildMemberResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDeleteGuildMemberResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",pid=" << pid;
	}

public:
	short errcode;
	int pid;
};

class MsgGuildMemberInfoByPidRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 15 };

	MsgGuildMemberInfoByPidRequest() :
		Message(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildMemberInfoByPidRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
	}

public:
	int pid;
};

class MsgGuildPublicNoticeNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 17 };

	MsgGuildPublicNoticeNotify() :
		Message(Category, Id)
	{
		guildid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildPublicNoticeNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short) + publicnotice.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << guildid;
		s << publicnotice;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> guildid;
		s >> publicnotice;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guildid", guildid);
		lua::settable(L, -1, "publicnotice", publicnotice);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "guildid=" << guildid;
		buffer << ",publicnotice=" << publicnotice;
	}

public:
	int guildid;
	std::string publicnotice;
};

struct GuildApplicationInfo
{
public:
	GuildApplicationInfo()
	{
		pid = 0;
		lvl = 0;
		gender = 0;
		job = 0;
		force = 0;
		apptime = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 18;
		length += sizeof(short) + name.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << pid;
		s << lvl;
		s << gender;
		s << job;
		s << force;
		s << name;
		s << apptime;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> pid;
		s >> lvl;
		s >> gender;
		s >> job;
		s >> force;
		s >> name;
		s >> apptime;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "lvl", lvl);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "job", job);
		lua::settable(L, -1, "force", force);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "apptime", apptime);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",lvl=" << lvl;
		buffer << ",gender=" << gender;
		buffer << ",job=" << job;
		buffer << ",force=" << force;
		buffer << ",name=" << name;
		buffer << ",apptime=" << apptime;
	}

public:
	int pid;
	short lvl;
	short gender;
	short job;
	int force;
	std::string name;
	int apptime;
};

class MsgGuildMemberInfoRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 18 };

	MsgGuildMemberInfoRequest() :
		Message(Category, Id)
	{
		page = 0;
		job = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildMemberInfoRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << page;
		s << job;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> page;
		s >> job;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "page", page);
		lua::settable(L, -1, "job", job);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "page=" << page;
		buffer << ",job=" << job;
	}

public:
	short page;
	short job;
};

class MsgGuildMemberInfoNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 20 };

	MsgGuildMemberInfoNotify() :
		Message(Category, Id)
	{
		guildid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildMemberInfoNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short);
		for (size_t i = 0; i < members.size(); ++i)
		{
			length += members[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << guildid;
		short members_vector_size = (short)members.size();
		s << members_vector_size;
		if (members_vector_size > 0)
		{
			for (auto it = members.begin(); it != members.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> guildid;
		int members_vector_size = s.read_int16();
		members.clear();
		while (members_vector_size > 0)
		{
			members_vector_size--;
			GuildMemberInfo val;
			val.unserialize(s, false);
			members.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guildid", guildid);
		lua::newtable(lua::L);
		for (size_t i = 0; i < members.size(); ++i)
		{
			members[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "members");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "guildid=" << guildid;
		buffer << ",members=[";
		for (size_t i = 0; i < members.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			members[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int guildid;
	std::vector<GuildMemberInfo> members;
};

class MsgGuildApplicationInfoNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 21 };

	MsgGuildApplicationInfoNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildApplicationInfoNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < apps.size(); ++i)
		{
			length += apps[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short apps_vector_size = (short)apps.size();
		s << apps_vector_size;
		if (apps_vector_size > 0)
		{
			for (auto it = apps.begin(); it != apps.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int apps_vector_size = s.read_int16();
		apps.clear();
		while (apps_vector_size > 0)
		{
			apps_vector_size--;
			GuildApplicationInfo val;
			val.unserialize(s, false);
			apps.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < apps.size(); ++i)
		{
			apps[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "apps");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "apps=[";
		for (size_t i = 0; i < apps.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			apps[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<GuildApplicationInfo> apps;
};

class MsgRefreshMyGuildInfoNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 22 };

	MsgRefreshMyGuildInfoNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgRefreshMyGuildInfoNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgGuildPlacardNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 23 };

	MsgGuildPlacardNotify() :
		Message(Category, Id)
	{
		guildid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildPlacardNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short) + placard.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << guildid;
		s << placard;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> guildid;
		s >> placard;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guildid", guildid);
		lua::settable(L, -1, "placard", placard);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "guildid=" << guildid;
		buffer << ",placard=" << placard;
	}

public:
	int guildid;
	std::string placard;
};

class MsgGetGuildDetailRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 24 };

	MsgGetGuildDetailRequest() :
		Message(Category, Id)
	{
		guildid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetGuildDetailRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << guildid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> guildid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guildid", guildid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "guildid=" << guildid;
	}

public:
	int guildid;
};

class MsgMyGuildInfoNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 25 };

	MsgMyGuildInfoNotify() :
		Message(Category, Id)
	{
		GuildID = 0;
		inTime = 0;
		level = 0;
		MemberCount = 0;
		myGuildmoney = 0;
		myGuildFCDCLevel = 0;
		myGuildSNLBLevel = 0;
		myGuildJRBBLevel = 0;
		myGuildGRJTLevel = 0;
		myGuildLTWJLevel = 0;
		myGuildKBYZLevel = 0;
		myGuildYNQLLevel = 0;
		myGuildQZYBLevel = 0;
		myGuildRJDJLevel = 0;
		myGuildFKDGLevel = 0;
		myGuildCBTXLevel = 0;
		myGuildJSCDLevel = 0;
		DonTodaymoney = 0;
		DonTodaytime = 0;
	}

	virtual const char *getName() const
	{
		return "MsgMyGuildInfoNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 46;
		length += sizeof(short) + GuildName.size();
		length += sizeof(short) + MasterName.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << GuildID;
		s << GuildName;
		s << inTime;
		s << level;
		s << MasterName;
		s << MemberCount;
		s << myGuildmoney;
		s << myGuildFCDCLevel;
		s << myGuildSNLBLevel;
		s << myGuildJRBBLevel;
		s << myGuildGRJTLevel;
		s << myGuildLTWJLevel;
		s << myGuildKBYZLevel;
		s << myGuildYNQLLevel;
		s << myGuildQZYBLevel;
		s << myGuildRJDJLevel;
		s << myGuildFKDGLevel;
		s << myGuildCBTXLevel;
		s << myGuildJSCDLevel;
		s << DonTodaymoney;
		s << DonTodaytime;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> GuildID;
		s >> GuildName;
		s >> inTime;
		s >> level;
		s >> MasterName;
		s >> MemberCount;
		s >> myGuildmoney;
		s >> myGuildFCDCLevel;
		s >> myGuildSNLBLevel;
		s >> myGuildJRBBLevel;
		s >> myGuildGRJTLevel;
		s >> myGuildLTWJLevel;
		s >> myGuildKBYZLevel;
		s >> myGuildYNQLLevel;
		s >> myGuildQZYBLevel;
		s >> myGuildRJDJLevel;
		s >> myGuildFKDGLevel;
		s >> myGuildCBTXLevel;
		s >> myGuildJSCDLevel;
		s >> DonTodaymoney;
		s >> DonTodaytime;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "GuildID", GuildID);
		lua::settable(L, -1, "GuildName", GuildName);
		lua::settable(L, -1, "inTime", inTime);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "MasterName", MasterName);
		lua::settable(L, -1, "MemberCount", MemberCount);
		lua::settable(L, -1, "myGuildmoney", myGuildmoney);
		lua::settable(L, -1, "myGuildFCDCLevel", myGuildFCDCLevel);
		lua::settable(L, -1, "myGuildSNLBLevel", myGuildSNLBLevel);
		lua::settable(L, -1, "myGuildJRBBLevel", myGuildJRBBLevel);
		lua::settable(L, -1, "myGuildGRJTLevel", myGuildGRJTLevel);
		lua::settable(L, -1, "myGuildLTWJLevel", myGuildLTWJLevel);
		lua::settable(L, -1, "myGuildKBYZLevel", myGuildKBYZLevel);
		lua::settable(L, -1, "myGuildYNQLLevel", myGuildYNQLLevel);
		lua::settable(L, -1, "myGuildQZYBLevel", myGuildQZYBLevel);
		lua::settable(L, -1, "myGuildRJDJLevel", myGuildRJDJLevel);
		lua::settable(L, -1, "myGuildFKDGLevel", myGuildFKDGLevel);
		lua::settable(L, -1, "myGuildCBTXLevel", myGuildCBTXLevel);
		lua::settable(L, -1, "myGuildJSCDLevel", myGuildJSCDLevel);
		lua::settable(L, -1, "DonTodaymoney", DonTodaymoney);
		lua::settable(L, -1, "DonTodaytime", DonTodaytime);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "GuildID=" << GuildID;
		buffer << ",GuildName=" << GuildName;
		buffer << ",inTime=" << inTime;
		buffer << ",level=" << level;
		buffer << ",MasterName=" << MasterName;
		buffer << ",MemberCount=" << MemberCount;
		buffer << ",myGuildmoney=" << myGuildmoney;
		buffer << ",myGuildFCDCLevel=" << myGuildFCDCLevel;
		buffer << ",myGuildSNLBLevel=" << myGuildSNLBLevel;
		buffer << ",myGuildJRBBLevel=" << myGuildJRBBLevel;
		buffer << ",myGuildGRJTLevel=" << myGuildGRJTLevel;
		buffer << ",myGuildLTWJLevel=" << myGuildLTWJLevel;
		buffer << ",myGuildKBYZLevel=" << myGuildKBYZLevel;
		buffer << ",myGuildYNQLLevel=" << myGuildYNQLLevel;
		buffer << ",myGuildQZYBLevel=" << myGuildQZYBLevel;
		buffer << ",myGuildRJDJLevel=" << myGuildRJDJLevel;
		buffer << ",myGuildFKDGLevel=" << myGuildFKDGLevel;
		buffer << ",myGuildCBTXLevel=" << myGuildCBTXLevel;
		buffer << ",myGuildJSCDLevel=" << myGuildJSCDLevel;
		buffer << ",DonTodaymoney=" << DonTodaymoney;
		buffer << ",DonTodaytime=" << DonTodaytime;
	}

public:
	int GuildID;
	std::string GuildName;
	int inTime;
	short level;
	std::string MasterName;
	short MemberCount;
	int myGuildmoney;
	short myGuildFCDCLevel;
	short myGuildSNLBLevel;
	short myGuildJRBBLevel;
	short myGuildGRJTLevel;
	short myGuildLTWJLevel;
	short myGuildKBYZLevel;
	short myGuildYNQLLevel;
	short myGuildQZYBLevel;
	short myGuildRJDJLevel;
	short myGuildFKDGLevel;
	short myGuildCBTXLevel;
	short myGuildJSCDLevel;
	int DonTodaymoney;
	short DonTodaytime;
};

class MsgGuildApplicationChangeNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 26 };

	MsgGuildApplicationChangeNotify() :
		Message(Category, Id)
	{
		reason = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildApplicationChangeNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 1;
		length += app.getLength(false);
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		app.serialize(s, false);
		s << reason;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		app.unserialize(s, false);
		s >> reason;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		app.push(L);
		lua::settable(L, -1, "app");
		lua::settable(L, -1, "reason", reason);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "app={";
		app.dump(buffer);
		buffer << "}";
		buffer << ",reason=" << reason;
	}

public:
	GuildApplicationInfo app;
	char reason;
};

class MsgCancelApplicationToGuildResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 27 };

	MsgCancelApplicationToGuildResponse() :
		Message(Category, Id)
	{
		GuildID = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgCancelApplicationToGuildResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << GuildID;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> GuildID;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "GuildID", GuildID);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "GuildID=" << GuildID;
		buffer << ",errcode=" << errcode;
	}

public:
	int GuildID;
	short errcode;
};

class MsgGuildRewardRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 28 };

	MsgGuildRewardRequest() :
		Message(Category, Id)
	{
		index = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildRewardRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << index;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> index;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "index", index);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "index=" << index;
	}

public:
	short index;
};

class MsgGuildRewardResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 29 };

	MsgGuildRewardResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildRewardResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgGuildDonateRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 30 };

	MsgGuildDonateRequest() :
		Message(Category, Id)
	{
		type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildDonateRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << type;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> type;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
	}

public:
	int type;
};

class MsgGuildDonateResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 31 };

	MsgGuildDonateResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildDonateResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgGuildMoneyUpdateNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 32 };

	MsgGuildMoneyUpdateNotify() :
		Message(Category, Id)
	{
		gold = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildMoneyUpdateNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << gold;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> gold;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "gold", gold);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "gold=" << gold;
	}

public:
	int gold;
};

class MsgGuildPlacardChangeRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 35 };

	MsgGuildPlacardChangeRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildPlacardChangeRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short) + placard.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << placard;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> placard;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "placard", placard);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "placard=" << placard;
	}

public:
	std::string placard;
};

class MsgGuildPlacardChangeResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 36 };

	MsgGuildPlacardChangeResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildPlacardChangeResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgGuildPublicNoticeChangeRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 37 };

	MsgGuildPublicNoticeChangeRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildPublicNoticeChangeRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short) + publicnotice.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << publicnotice;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> publicnotice;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "publicnotice", publicnotice);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "publicnotice=" << publicnotice;
	}

public:
	std::string publicnotice;
};

class MsgGuildPublicNoticeChangeResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 38 };

	MsgGuildPublicNoticeChangeResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildPublicNoticeChangeResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgGuildMemberOnlineNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 39 };

	MsgGuildMemberOnlineNotify() :
		Message(Category, Id)
	{
		pid = 0;
		online = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildMemberOnlineNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 5;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << online;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> online;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "online", online);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",online=" << online;
	}

public:
	int pid;
	char online;
};

class MsgGuildMemberSceneNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 40 };

	MsgGuildMemberSceneNotify() :
		Message(Category, Id)
	{
		pid = 0;
		sceneid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildMemberSceneNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << sceneid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> sceneid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "sceneid", sceneid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",sceneid=" << sceneid;
	}

public:
	int pid;
	int sceneid;
};

class MsgCreateGuildNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 41 };

	MsgCreateGuildNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgCreateGuildNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += guild.getLength(false);
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		guild.serialize(s, false);
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		guild.unserialize(s, false);
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		guild.push(L);
		lua::settable(L, -1, "guild");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "guild={";
		guild.dump(buffer);
		buffer << "}";
	}

public:
	GuildInfo guild;
};

class MsgAutoAddGuildAppRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 42 };

	MsgAutoAddGuildAppRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgAutoAddGuildAppRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgGuildStudySkillRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 43 };

	MsgGuildStudySkillRequest() :
		Message(Category, Id)
	{
		skillIndex = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildStudySkillRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << skillIndex;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> skillIndex;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "skillIndex", skillIndex);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "skillIndex=" << skillIndex;
	}

public:
	short skillIndex;
};

class MsgGuildStudySkillResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 44 };

	MsgGuildStudySkillResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildStudySkillResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgGuildResetSkillRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 45 };

	MsgGuildResetSkillRequest() :
		Message(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildResetSkillRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
	}

public:
	int pid;
};

class MsgGuildResetSkillResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 46 };

	MsgGuildResetSkillResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildResetSkillResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgGuildMasterResetRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 50 };

	MsgGuildMasterResetRequest() :
		Message(Category, Id)
	{
		ResetPid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildMasterResetRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << ResetPid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> ResetPid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "ResetPid", ResetPid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "ResetPid=" << ResetPid;
	}

public:
	int ResetPid;
};

class MsgGuildMasterResetResponse : public Message
{
public:
	enum { Category =  MSG_CATEGORY_GUILD, Id = 51 };

	MsgGuildMasterResetResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		oldpid = 0;
		newpid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildMasterResetResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << oldpid;
		s << newpid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> oldpid;
		s >> newpid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "oldpid", oldpid);
		lua::settable(L, -1, "newpid", newpid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",oldpid=" << oldpid;
		buffer << ",newpid=" << newpid;
	}

public:
	short errcode;
	int oldpid;
	int newpid;
};

struct GuildRecord
{
public:
	GuildRecord()
	{
		type = 0;
		recordtime = 0;
		datax = 0;
		datay = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 14;
		length += sizeof(short) + namex.size();
		length += sizeof(short) + namey.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << type;
		s << recordtime;
		s << datax;
		s << datay;
		s << namex;
		s << namey;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> type;
		s >> recordtime;
		s >> datax;
		s >> datay;
		s >> namex;
		s >> namey;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "recordtime", recordtime);
		lua::settable(L, -1, "datax", datax);
		lua::settable(L, -1, "datay", datay);
		lua::settable(L, -1, "namex", namex);
		lua::settable(L, -1, "namey", namey);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
		buffer << ",recordtime=" << recordtime;
		buffer << ",datax=" << datax;
		buffer << ",datay=" << datay;
		buffer << ",namex=" << namex;
		buffer << ",namey=" << namey;
	}

public:
	short type;
	int recordtime;
	int datax;
	int datay;
	std::string namex;
	std::string namey;
};

class MsgGuildRecordsNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 52 };

	MsgGuildRecordsNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildRecordsNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < records.size(); ++i)
		{
			length += records[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short records_vector_size = (short)records.size();
		s << records_vector_size;
		if (records_vector_size > 0)
		{
			for (auto it = records.begin(); it != records.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int records_vector_size = s.read_int16();
		records.clear();
		while (records_vector_size > 0)
		{
			records_vector_size--;
			GuildRecord val;
			val.unserialize(s, false);
			records.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < records.size(); ++i)
		{
			records[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "records");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "records=[";
		for (size_t i = 0; i < records.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			records[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<GuildRecord> records;
};

class MsgGuildRecordAddNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 53 };

	MsgGuildRecordAddNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildRecordAddNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += record.getLength(false);
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		record.serialize(s, false);
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		record.unserialize(s, false);
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		record.push(L);
		lua::settable(L, -1, "record");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "record={";
		record.dump(buffer);
		buffer << "}";
	}

public:
	GuildRecord record;
};

class MsgGuildRefuseAllApplicationRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 54 };

	MsgGuildRefuseAllApplicationRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildRefuseAllApplicationRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgGuildRefuseAllApplicationResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 55 };

	MsgGuildRefuseAllApplicationResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildRefuseAllApplicationResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgGuildPassAllApplicationRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 56 };

	MsgGuildPassAllApplicationRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildPassAllApplicationRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgGuildPassAllApplicationResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 57 };

	MsgGuildPassAllApplicationResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildPassAllApplicationResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgGuildNicknameLoadNotify : public Message
{
public:
	enum { Category =  MSG_CATEGORY_GUILD, Id = 61 };

	MsgGuildNicknameLoadNotify() :
		Message(Category, Id)
	{
		job = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildNicknameLoadNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 2;
		length += sizeof(short) + nickname.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << job;
		s << nickname;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> job;
		s >> nickname;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "job", job);
		lua::settable(L, -1, "nickname", nickname);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "job=" << job;
		buffer << ",nickname=" << nickname;
	}

public:
	short job;
	std::string nickname;
};

class MsgGuildMemberNicknameChangeRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 64 };

	MsgGuildMemberNicknameChangeRequest() :
		Message(Category, Id)
	{
		pid = 0;
		post = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildMemberNicknameChangeRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << post;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> post;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "post", post);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",post=" << post;
	}

public:
	int pid;
	short post;
};

class MsgGuildMemberNicknameChangeResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 65 };

	MsgGuildMemberNicknameChangeResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildMemberNicknameChangeResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",pid=" << pid;
	}

public:
	short errcode;
	int pid;
};

class MsgGuildMemberSpeekChangeRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 66 };

	MsgGuildMemberSpeekChangeRequest() :
		Message(Category, Id)
	{
		pid = 0;
		speek = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildMemberSpeekChangeRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << speek;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> speek;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "speek", speek);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",speek=" << speek;
	}

public:
	int pid;
	short speek;
};

class MsgGuildMemberSpeekChangeResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 67 };

	MsgGuildMemberSpeekChangeResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildMemberSpeekChangeResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",pid=" << pid;
	}

public:
	short errcode;
	int pid;
};

class MsgGuildInviteRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 70 };

	MsgGuildInviteRequest() :
		Message(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildInviteRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
	}

public:
	int pid;
};

class MsgGuildInviteResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 71 };

	MsgGuildInviteResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		leaveCD = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildInviteResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << leaveCD;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> leaveCD;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "leaveCD", leaveCD);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",leaveCD=" << leaveCD;
	}

public:
	short errcode;
	int leaveCD;
};

class MsgGuildInviteNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 72 };

	MsgGuildInviteNotify() :
		Message(Category, Id)
	{
		gid = 0;
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildInviteNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 8;
		length += sizeof(short) + guildname.size();
		length += sizeof(short) + name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << gid;
		s << pid;
		s << guildname;
		s << name;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> gid;
		s >> pid;
		s >> guildname;
		s >> name;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "gid", gid);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "guildname", guildname);
		lua::settable(L, -1, "name", name);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "gid=" << gid;
		buffer << ",pid=" << pid;
		buffer << ",guildname=" << guildname;
		buffer << ",name=" << name;
	}

public:
	int gid;
	int pid;
	std::string guildname;
	std::string name;
};

class MsgGuildInviteResultRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 73 };

	MsgGuildInviteResultRequest() :
		Message(Category, Id)
	{
		gid = 0;
		decide = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildInviteResultRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 6;
		length += sizeof(short) + name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << gid;
		s << name;
		s << decide;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> gid;
		s >> name;
		s >> decide;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "gid", gid);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "decide", decide);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "gid=" << gid;
		buffer << ",name=" << name;
		buffer << ",decide=" << decide;
	}

public:
	int gid;
	std::string name;
	short decide;
};

class MsgGuildInviteResultResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 74 };

	MsgGuildInviteResultResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildInviteResultResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgGuildInviteResultNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 75 };

	MsgGuildInviteResultNotify() :
		Message(Category, Id)
	{
		decide = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildInviteResultNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 2;
		length += sizeof(short) + name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << decide;
		s << name;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> decide;
		s >> name;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "decide", decide);
		lua::settable(L, -1, "name", name);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "decide=" << decide;
		buffer << ",name=" << name;
	}

public:
	short decide;
	std::string name;
};

struct GuildRed
{
public:
	GuildRed()
	{
		id = 0;
		redtype = 0;
		guildid = 0;
		maxgold = 0;
		createtime = 0;
		maxcount = 0;
		curcount = 0;
		curgold = 0;
		pid = 0;
		job = 0;
		gender = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 42;
		length += sizeof(short) + name.size();
		length += sizeof(short) + desc.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << id;
		s << redtype;
		s << guildid;
		s << maxgold;
		s << createtime;
		s << maxcount;
		s << curcount;
		s << curgold;
		s << pid;
		s << job;
		s << gender;
		s << name;
		s << desc;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> id;
		s >> redtype;
		s >> guildid;
		s >> maxgold;
		s >> createtime;
		s >> maxcount;
		s >> curcount;
		s >> curgold;
		s >> pid;
		s >> job;
		s >> gender;
		s >> name;
		s >> desc;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "redtype", redtype);
		lua::settable(L, -1, "guildid", guildid);
		lua::settable(L, -1, "maxgold", maxgold);
		lua::settable(L, -1, "createtime", createtime);
		lua::settable(L, -1, "maxcount", maxcount);
		lua::settable(L, -1, "curcount", curcount);
		lua::settable(L, -1, "curgold", curgold);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "job", job);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "desc", desc);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",redtype=" << redtype;
		buffer << ",guildid=" << guildid;
		buffer << ",maxgold=" << maxgold;
		buffer << ",createtime=" << createtime;
		buffer << ",maxcount=" << maxcount;
		buffer << ",curcount=" << curcount;
		buffer << ",curgold=" << curgold;
		buffer << ",pid=" << pid;
		buffer << ",job=" << job;
		buffer << ",gender=" << gender;
		buffer << ",name=" << name;
		buffer << ",desc=" << desc;
	}

public:
	int id;
	short redtype;
	int guildid;
	int maxgold;
	int createtime;
	int maxcount;
	int curcount;
	int curgold;
	int pid;
	int job;
	int gender;
	std::string name;
	std::string desc;
};

class MsgGuildRedCountResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 80 };

	MsgGuildRedCountResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		count = 0;
		id = 0;
		createtime = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildRedCountResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << count;
		s << id;
		s << createtime;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> count;
		s >> id;
		s >> createtime;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "count", count);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "createtime", createtime);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",count=" << count;
		buffer << ",id=" << id;
		buffer << ",createtime=" << createtime;
	}

public:
	short errcode;
	short count;
	short id;
	int createtime;
};

class MsgGuildRedCountRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 81 };

	MsgGuildRedCountRequest() :
		Message(Category, Id)
	{
		id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildRedCountRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
	}

public:
	short id;
};

class MsgGuildRedsNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 82 };

	MsgGuildRedsNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildRedsNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < reds.size(); ++i)
		{
			length += reds[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short reds_vector_size = (short)reds.size();
		s << reds_vector_size;
		if (reds_vector_size > 0)
		{
			for (auto it = reds.begin(); it != reds.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int reds_vector_size = s.read_int16();
		reds.clear();
		while (reds_vector_size > 0)
		{
			reds_vector_size--;
			GuildRed val;
			val.unserialize(s, false);
			reds.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < reds.size(); ++i)
		{
			reds[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "reds");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "reds=[";
		for (size_t i = 0; i < reds.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			reds[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<GuildRed> reds;
};

class MsgGuildRedAddNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 83 };

	MsgGuildRedAddNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildRedAddNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += red.getLength(false);
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		red.serialize(s, false);
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		red.unserialize(s, false);
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		red.push(L);
		lua::settable(L, -1, "red");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "red={";
		red.dump(buffer);
		buffer << "}";
	}

public:
	GuildRed red;
};

class MsgGuildRedUpdateNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 84 };

	MsgGuildRedUpdateNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildRedUpdateNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += red.getLength(false);
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		red.serialize(s, false);
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		red.unserialize(s, false);
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		red.push(L);
		lua::settable(L, -1, "red");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "red={";
		red.dump(buffer);
		buffer << "}";
	}

public:
	GuildRed red;
};

class MsgGuildRedSendRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 85 };

	MsgGuildRedSendRequest() :
		Message(Category, Id)
	{
		redtype = 0;
		maxgold = 0;
		maxcount = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildRedSendRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 10;
		length += sizeof(short) + desc.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << redtype;
		s << maxgold;
		s << maxcount;
		s << desc;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> redtype;
		s >> maxgold;
		s >> maxcount;
		s >> desc;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "redtype", redtype);
		lua::settable(L, -1, "maxgold", maxgold);
		lua::settable(L, -1, "maxcount", maxcount);
		lua::settable(L, -1, "desc", desc);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "redtype=" << redtype;
		buffer << ",maxgold=" << maxgold;
		buffer << ",maxcount=" << maxcount;
		buffer << ",desc=" << desc;
	}

public:
	short redtype;
	int maxgold;
	int maxcount;
	std::string desc;
};

class MsgGuildRedSendResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 86 };

	MsgGuildRedSendResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildRedSendResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgGuildRedGetRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 87 };

	MsgGuildRedGetRequest() :
		Message(Category, Id)
	{
		redid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildRedGetRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << redid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> redid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "redid", redid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "redid=" << redid;
	}

public:
	short redid;
};

class MsgGuildRedGetResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 88 };

	MsgGuildRedGetResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		redid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildRedGetResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << redid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> redid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "redid", redid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",redid=" << redid;
	}

public:
	short errcode;
	int redid;
};

struct GuildRedRecord
{
public:
	GuildRedRecord()
	{
		id = 0;
		redid = 0;
		redtype = 0;
		guildid = 0;
		spid = 0;
		gold = 0;
		dpid = 0;
		djob = 0;
		dgender = 0;
		type = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 38;
		length += sizeof(short) + sname.size();
		length += sizeof(short) + dname.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << id;
		s << redid;
		s << redtype;
		s << guildid;
		s << spid;
		s << sname;
		s << gold;
		s << dpid;
		s << djob;
		s << dgender;
		s << dname;
		s << type;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> id;
		s >> redid;
		s >> redtype;
		s >> guildid;
		s >> spid;
		s >> sname;
		s >> gold;
		s >> dpid;
		s >> djob;
		s >> dgender;
		s >> dname;
		s >> type;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "redid", redid);
		lua::settable(L, -1, "redtype", redtype);
		lua::settable(L, -1, "guildid", guildid);
		lua::settable(L, -1, "spid", spid);
		lua::settable(L, -1, "sname", sname);
		lua::settable(L, -1, "gold", gold);
		lua::settable(L, -1, "dpid", dpid);
		lua::settable(L, -1, "djob", djob);
		lua::settable(L, -1, "dgender", dgender);
		lua::settable(L, -1, "dname", dname);
		lua::settable(L, -1, "type", type);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",redid=" << redid;
		buffer << ",redtype=" << redtype;
		buffer << ",guildid=" << guildid;
		buffer << ",spid=" << spid;
		buffer << ",sname=" << sname;
		buffer << ",gold=" << gold;
		buffer << ",dpid=" << dpid;
		buffer << ",djob=" << djob;
		buffer << ",dgender=" << dgender;
		buffer << ",dname=" << dname;
		buffer << ",type=" << type;
	}

public:
	int id;
	int redid;
	short redtype;
	int guildid;
	int spid;
	std::string sname;
	int gold;
	int dpid;
	int djob;
	int dgender;
	std::string dname;
	int type;
};

class MsgGuildRedRecordsNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 89 };

	MsgGuildRedRecordsNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildRedRecordsNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < GuildRedRecords.size(); ++i)
		{
			length += GuildRedRecords[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short GuildRedRecords_vector_size = (short)GuildRedRecords.size();
		s << GuildRedRecords_vector_size;
		if (GuildRedRecords_vector_size > 0)
		{
			for (auto it = GuildRedRecords.begin(); it != GuildRedRecords.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int GuildRedRecords_vector_size = s.read_int16();
		GuildRedRecords.clear();
		while (GuildRedRecords_vector_size > 0)
		{
			GuildRedRecords_vector_size--;
			GuildRedRecord val;
			val.unserialize(s, false);
			GuildRedRecords.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < GuildRedRecords.size(); ++i)
		{
			GuildRedRecords[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "GuildRedRecords");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "GuildRedRecords=[";
		for (size_t i = 0; i < GuildRedRecords.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			GuildRedRecords[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<GuildRedRecord> GuildRedRecords;
};

class MsgGuildRedRecordsAddNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 90 };

	MsgGuildRedRecordsAddNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildRedRecordsAddNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += record.getLength(false);
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		record.serialize(s, false);
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		record.unserialize(s, false);
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		record.push(L);
		lua::settable(L, -1, "record");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "record={";
		record.dump(buffer);
		buffer << "}";
	}

public:
	GuildRedRecord record;
};

class MsgGuildContributionRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 91 };

	MsgGuildContributionRequest() :
		Message(Category, Id)
	{
		money = 0;
		blIngot = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildContributionRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 5;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << money;
		s << blIngot;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> money;
		s >> blIngot;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "money", money);
		lua::settable(L, -1, "blIngot", blIngot);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "money=" << money;
		buffer << ",blIngot=" << blIngot;
	}

public:
	int money;
	char blIngot;
};

class MsgGuildContributionResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 92 };

	MsgGuildContributionResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildContributionResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgPutGuildBagRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 93 };

	MsgPutGuildBagRequest() :
		Message(Category, Id)
	{
		iid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPutGuildBagRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
	}

public:
	int iid;
};

class MsgPutGuildBagResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 94 };

	MsgPutGuildBagResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgPutGuildBagResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgGetGuildBagRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 95 };

	MsgGetGuildBagRequest() :
		Message(Category, Id)
	{
		iid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetGuildBagRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
	}

public:
	int iid;
};

class MsgGetGuildBagResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 96 };

	MsgGetGuildBagResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetGuildBagResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgDelGuildBagRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 97 };

	MsgDelGuildBagRequest() :
		Message(Category, Id)
	{
		iid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDelGuildBagRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << iid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> iid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "iid", iid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "iid=" << iid;
	}

public:
	int iid;
};

class MsgDelGuildBagResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 98 };

	MsgDelGuildBagResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDelGuildBagResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode;
};

class MsgSyncGuildExDataNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 110 };

	MsgSyncGuildExDataNotify() :
		Message(Category, Id)
	{
		idx = 0;
		data = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncGuildExDataNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << idx;
		s << data;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> idx;
		s >> data;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "idx", idx);
		lua::settable(L, -1, "data", data);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "idx=" << idx;
		buffer << ",data=" << data;
	}

public:
	int idx;
	int data;
};

class MsgSyncGuildExStringDataNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 111 };

	MsgSyncGuildExStringDataNotify() :
		Message(Category, Id)
	{
		idx = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncGuildExStringDataNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short) + data.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << idx;
		s << data;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> idx;
		s >> data;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "idx", idx);
		lua::settable(L, -1, "data", data);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "idx=" << idx;
		buffer << ",data=" << data;
	}

public:
	int idx;
	std::string data;
};

class MsgGuildLeaveNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 120 };

	MsgGuildLeaveNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildLeaveNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

struct GuildShopItem
{
public:
	GuildShopItem()
	{
		sid = 0;
		price = 0;
		level = 0;
	}

	size_t getLength(bool ex) const
	{
		return 10;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << sid;
		s << price;
		s << level;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> sid;
		s >> price;
		s >> level;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "price", price);
		lua::settable(L, -1, "level", level);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "sid=" << sid;
		buffer << ",price=" << price;
		buffer << ",level=" << level;
	}

public:
	int sid;
	int price;
	short level;
};

class MsgGuildShopItemRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 200 };

	MsgGuildShopItemRequest() :
		Message(Category, Id)
	{
		page = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildShopItemRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << page;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> page;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "page", page);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "page=" << page;
	}

public:
	short page;
};

class MsgGuildShopItemResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 201 };

	MsgGuildShopItemResponse() :
		Message(Category, Id)
	{
		page = 0;
		maxpage = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildShopItemResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 6;
		length += sizeof(short);
		for (size_t i = 0; i < items.size(); ++i)
		{
			length += items[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short items_vector_size = (short)items.size();
		s << items_vector_size;
		if (items_vector_size > 0)
		{
			for (auto it = items.begin(); it != items.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		s << page;
		s << maxpage;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int items_vector_size = s.read_int16();
		items.clear();
		while (items_vector_size > 0)
		{
			items_vector_size--;
			GuildShopItem val;
			val.unserialize(s, false);
			items.push_back(val);
		}
		s >> page;
		s >> maxpage;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < items.size(); ++i)
		{
			items[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "items");
		lua::settable(L, -1, "page", page);
		lua::settable(L, -1, "maxpage", maxpage);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "items=[";
		for (size_t i = 0; i < items.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			items[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
		buffer << ",page=" << page;
		buffer << ",maxpage=" << maxpage;
		buffer << ",errcode=" << errcode;
	}

public:
	std::vector<GuildShopItem> items;
	short page;
	short maxpage;
	short errcode;
};

class MsgGuildShopItemBuyRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 202 };

	MsgGuildShopItemBuyRequest() :
		Message(Category, Id)
	{
		sid = 0;
		cnt = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildShopItemBuyRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << sid;
		s << cnt;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> sid;
		s >> cnt;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "cnt", cnt);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "sid=" << sid;
		buffer << ",cnt=" << cnt;
	}

public:
	int sid;
	int cnt;
};

class MsgGuildShopItemBuyResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 203 };

	MsgGuildShopItemBuyResponse() :
		Message(Category, Id)
	{
		sid = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildShopItemBuyResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << sid;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> sid;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "sid=" << sid;
		buffer << ",errcode=" << errcode;
	}

public:
	int sid;
	short errcode;
};

class MsgSyncGuildShopItemSellNum : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 204 };

	MsgSyncGuildShopItemSellNum() :
		Message(Category, Id)
	{
		sid = 0;
		sellCount = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncGuildShopItemSellNum";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << sid;
		s << sellCount;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> sid;
		s >> sellCount;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "sellCount", sellCount);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "sid=" << sid;
		buffer << ",sellCount=" << sellCount;
	}

public:
	int sid;
	int sellCount;
};

class MsgGuildListVersionNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 220 };

	MsgGuildListVersionNotify() :
		Message(Category, Id)
	{
		version = 0;
		maxpage = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildListVersionNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << version;
		s << maxpage;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> version;
		s >> maxpage;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "version", version);
		lua::settable(L, -1, "maxpage", maxpage);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "version=" << version;
		buffer << ",maxpage=" << maxpage;
	}

public:
	int version;
	int maxpage;
};

class MsgGuildGetIntDataRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 260 };

	MsgGuildGetIntDataRequest() :
		Message(Category, Id)
	{
		guildID = 0;
		key = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildGetIntDataRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << guildID;
		s << key;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> guildID;
		s >> key;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guildID", guildID);
		lua::settable(L, -1, "key", key);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "guildID=" << guildID;
		buffer << ",key=" << key;
	}

public:
	int guildID;
	short key;
};

class MsgGuildGetIntDataResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 261 };

	MsgGuildGetIntDataResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		guildID = 0;
		key = 0;
		data = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildGetIntDataResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << guildID;
		s << key;
		s << data;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> guildID;
		s >> key;
		s >> data;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "guildID", guildID);
		lua::settable(L, -1, "key", key);
		lua::settable(L, -1, "data", data);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",guildID=" << guildID;
		buffer << ",key=" << key;
		buffer << ",data=" << data;
	}

public:
	short errcode;
	int guildID;
	short key;
	int data;
};

class MsgGuildGetStringDataRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 262 };

	MsgGuildGetStringDataRequest() :
		Message(Category, Id)
	{
		guildID = 0;
		key = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildGetStringDataRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << guildID;
		s << key;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> guildID;
		s >> key;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guildID", guildID);
		lua::settable(L, -1, "key", key);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "guildID=" << guildID;
		buffer << ",key=" << key;
	}

public:
	int guildID;
	short key;
};

class MsgGuildGetStringDataResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 263 };

	MsgGuildGetStringDataResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		guildID = 0;
		key = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildGetStringDataResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 8;
		length += sizeof(short) + data.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << guildID;
		s << key;
		s << data;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> guildID;
		s >> key;
		s >> data;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "guildID", guildID);
		lua::settable(L, -1, "key", key);
		lua::settable(L, -1, "data", data);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",guildID=" << guildID;
		buffer << ",key=" << key;
		buffer << ",data=" << data;
	}

public:
	short errcode;
	int guildID;
	short key;
	std::string data;
};

class MsgGuildOpenBuffRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 281 };

	MsgGuildOpenBuffRequest() :
		Message(Category, Id)
	{
		buffID = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildOpenBuffRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << buffID;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> buffID;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "buffID", buffID);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "buffID=" << buffID;
	}

public:
	int buffID;
};

class MsgGuildOpenBuffResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 282 };

	MsgGuildOpenBuffResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		buffID = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildOpenBuffResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << buffID;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> buffID;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "buffID", buffID);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",buffID=" << buffID;
	}

public:
	short errcode;
	int buffID;
};

class MsgGuildLeagueAppRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 290 };

	MsgGuildLeagueAppRequest() :
		Message(Category, Id)
	{
		guild_id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildLeagueAppRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << guild_id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> guild_id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guild_id", guild_id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "guild_id=" << guild_id;
	}

public:
	int guild_id; //目标行会ID 
};

class MsgGuildLeagueAppResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 291 };

	MsgGuildLeagueAppResponse() :
		Message(Category, Id)
	{
		guild_id = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildLeagueAppResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << guild_id;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> guild_id;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guild_id", guild_id);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "guild_id=" << guild_id;
		buffer << ",errcode=" << errcode;
	}

public:
	int guild_id; //目标行会ID 
	short errcode;
};

class MsgGuildCancelLeagueAppRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 292 };

	MsgGuildCancelLeagueAppRequest() :
		Message(Category, Id)
	{
		guild_id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildCancelLeagueAppRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << guild_id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> guild_id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guild_id", guild_id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "guild_id=" << guild_id;
	}

public:
	int guild_id; //目标行会ID 
};

class MsgGuildCancelLeagueAppResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 293 };

	MsgGuildCancelLeagueAppResponse() :
		Message(Category, Id)
	{
		guild_id = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildCancelLeagueAppResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << guild_id;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> guild_id;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guild_id", guild_id);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "guild_id=" << guild_id;
		buffer << ",errcode=" << errcode;
	}

public:
	int guild_id; //目标行会ID 
	short errcode;
};

class MsgGuildCheckLeagueAppRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 294 };

	MsgGuildCheckLeagueAppRequest() :
		Message(Category, Id)
	{
		guild_id = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildCheckLeagueAppRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << guild_id;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> guild_id;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guild_id", guild_id);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "guild_id=" << guild_id;
		buffer << ",errcode=" << errcode;
	}

public:
	int guild_id; //申请行会ID 
	short errcode; //0-同意, 其他-拒绝 
};

class MsgGuildCheckLeagueAppResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 295 };

	MsgGuildCheckLeagueAppResponse() :
		Message(Category, Id)
	{
		guild_id = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildCheckLeagueAppResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 6;
		length += sizeof(short) + guild_name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << guild_id;
		s << guild_name;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> guild_id;
		s >> guild_name;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guild_id", guild_id);
		lua::settable(L, -1, "guild_name", guild_name);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "guild_id=" << guild_id;
		buffer << ",guild_name=" << guild_name;
		buffer << ",errcode=" << errcode;
	}

public:
	int guild_id; //申请行会ID 
	std::string guild_name; //申请行会名称 
	short errcode;
};

class MsgGuildCheckLeagueAppNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 296 };

	MsgGuildCheckLeagueAppNotify() :
		Message(Category, Id)
	{
		guild_id = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildCheckLeagueAppNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 6;
		length += sizeof(short) + guild_name.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << guild_id;
		s << guild_name;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> guild_id;
		s >> guild_name;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guild_id", guild_id);
		lua::settable(L, -1, "guild_name", guild_name);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "guild_id=" << guild_id;
		buffer << ",guild_name=" << guild_name;
		buffer << ",errcode=" << errcode;
	}

public:
	int guild_id; //被申请行会ID 
	std::string guild_name; //被申请行会名称 
	short errcode;
};

class MsgGuildAddLeagueAppNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 297 };

	MsgGuildAddLeagueAppNotify() :
		Message(Category, Id)
	{
		guild_id1 = 0;
		guild_id2 = 0;
		show_notice = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildAddLeagueAppNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 9;
		length += sizeof(short) + guild_name1.size();
		length += sizeof(short) + guild_name2.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << guild_id1;
		s << guild_name1;
		s << guild_id2;
		s << guild_name2;
		s << show_notice;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> guild_id1;
		s >> guild_name1;
		s >> guild_id2;
		s >> guild_name2;
		s >> show_notice;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guild_id1", guild_id1);
		lua::settable(L, -1, "guild_name1", guild_name1);
		lua::settable(L, -1, "guild_id2", guild_id2);
		lua::settable(L, -1, "guild_name2", guild_name2);
		lua::settable(L, -1, "show_notice", show_notice);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "guild_id1=" << guild_id1;
		buffer << ",guild_name1=" << guild_name1;
		buffer << ",guild_id2=" << guild_id2;
		buffer << ",guild_name2=" << guild_name2;
		buffer << ",show_notice=" << show_notice;
	}

public:
	int guild_id1; //申请行会ID 
	std::string guild_name1; //申请行会名称 
	int guild_id2; //目标行会ID 
	std::string guild_name2; //申请行会名称 
	char show_notice; //是否显示提示:0-不显示, 1-显示 
};

class MsgGuildDelLeagueAppNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 298 };

	MsgGuildDelLeagueAppNotify() :
		Message(Category, Id)
	{
		guild_id1 = 0;
		guild_id2 = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildDelLeagueAppNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << guild_id1;
		s << guild_id2;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> guild_id1;
		s >> guild_id2;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guild_id1", guild_id1);
		lua::settable(L, -1, "guild_id2", guild_id2);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "guild_id1=" << guild_id1;
		buffer << ",guild_id2=" << guild_id2;
	}

public:
	int guild_id1; //申请行会ID 
	int guild_id2; //目标行会ID 
};

class MsgGuildCancelLeagueRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 299 };

	MsgGuildCancelLeagueRequest() :
		Message(Category, Id)
	{
		guild_id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildCancelLeagueRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << guild_id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> guild_id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guild_id", guild_id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "guild_id=" << guild_id;
	}

public:
	int guild_id; //对方行会ID 
};

class MsgGuildCancelLeagueResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 300 };

	MsgGuildCancelLeagueResponse() :
		Message(Category, Id)
	{
		guild_id = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildCancelLeagueResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << guild_id;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> guild_id;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guild_id", guild_id);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "guild_id=" << guild_id;
		buffer << ",errcode=" << errcode;
	}

public:
	int guild_id; //对方行会ID 
	short errcode;
};

class MsgGuildAddLeagueNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 301 };

	MsgGuildAddLeagueNotify() :
		Message(Category, Id)
	{
		guild_id1 = 0;
		guild_id2 = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildAddLeagueNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << guild_id1;
		s << guild_id2;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> guild_id1;
		s >> guild_id2;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guild_id1", guild_id1);
		lua::settable(L, -1, "guild_id2", guild_id2);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "guild_id1=" << guild_id1;
		buffer << ",guild_id2=" << guild_id2;
	}

public:
	int guild_id1; //行会ID1 
	int guild_id2; //行会ID2 
};

class MsgGuildDelLeagueNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 302 };

	MsgGuildDelLeagueNotify() :
		Message(Category, Id)
	{
		guild_id1 = 0;
		guild_id2 = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildDelLeagueNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << guild_id1;
		s << guild_id2;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> guild_id1;
		s >> guild_id2;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guild_id1", guild_id1);
		lua::settable(L, -1, "guild_id2", guild_id2);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "guild_id1=" << guild_id1;
		buffer << ",guild_id2=" << guild_id2;
	}

public:
	int guild_id1; //行会ID1 
	int guild_id2; //行会ID2 
};

class MsgGuildContributionGetRewardRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 303 };

	MsgGuildContributionGetRewardRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildContributionGetRewardRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgGuildContributionGetRewardResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 304 };

	MsgGuildContributionGetRewardResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildContributionGetRewardResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode; //错误码 
};

class MsgGuildWorshipRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 305 };

	MsgGuildWorshipRequest() :
		Message(Category, Id)
	{
		player_id = 0;
		type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildWorshipRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << player_id;
		s << type;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> player_id;
		s >> type;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "player_id", player_id);
		lua::settable(L, -1, "type", type);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "player_id=" << player_id;
		buffer << ",type=" << type;
	}

public:
	int player_id; //目标玩家ID 
	int type; //膜拜类型: 0-免费膜拜, 1-1000金币膜拜, 2-10元宝膜拜 
};

class MsgGuildWorshipResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 306 };

	MsgGuildWorshipResponse() :
		Message(Category, Id)
	{
		player_id = 0;
		type = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildWorshipResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << player_id;
		s << type;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> player_id;
		s >> type;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "player_id", player_id);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "player_id=" << player_id;
		buffer << ",type=" << type;
		buffer << ",errcode=" << errcode;
	}

public:
	int player_id; //目标玩家ID 
	int type; //膜拜类型: 0-免费膜拜, 1-1000金币膜拜, 2-10元宝膜拜 
	short errcode; //错误码 
};

class MsgGuildGetBeWorshipedRewardRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 307 };

	MsgGuildGetBeWorshipedRewardRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildGetBeWorshipedRewardRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgGuildGetBeWorshipedRewardResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 308 };

	MsgGuildGetBeWorshipedRewardResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildGetBeWorshipedRewardResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode; //错误码 
};

class MsgGuildUpgradeLevelRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 309 };

	MsgGuildUpgradeLevelRequest() :
		Message(Category, Id)
	{
		type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildUpgradeLevelRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 1;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << type;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> type;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
	}

public:
	char type; //升级类型 
};

class MsgGuildUpgradeLevelResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 310 };

	MsgGuildUpgradeLevelResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildUpgradeLevelResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode; //错误码 
};

class MsgGuildClearUpgradeCDRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 311 };

	MsgGuildClearUpgradeCDRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildClearUpgradeCDRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgGuildClearUpgradeCDResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 312 };

	MsgGuildClearUpgradeCDResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildClearUpgradeCDResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode; //错误码 
};

class MsgGuildOpenInstanceRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 321 };

	MsgGuildOpenInstanceRequest() :
		Message(Category, Id)
	{
		event_id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildOpenInstanceRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << event_id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> event_id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "event_id", event_id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "event_id=" << event_id;
	}

public:
	int event_id; //活动ID 
};

class MsgGuildOpenInstanceResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 322 };

	MsgGuildOpenInstanceResponse() :
		Message(Category, Id)
	{
		event_id = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildOpenInstanceResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << event_id;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> event_id;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "event_id", event_id);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "event_id=" << event_id;
		buffer << ",errcode=" << errcode;
	}

public:
	int event_id; //活动ID 
	short errcode; //错误码 
};

class MsgGuildOpenInstanceNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 323 };

	MsgGuildOpenInstanceNotify() :
		Message(Category, Id)
	{
		player_id = 0;
		event_id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildOpenInstanceNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << player_id;
		s << event_id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> player_id;
		s >> event_id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "player_id", player_id);
		lua::settable(L, -1, "event_id", event_id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "player_id=" << player_id;
		buffer << ",event_id=" << event_id;
	}

public:
	int player_id; //开启玩家ID 
	int event_id; //活动ID 
};

class MsgGuildEnterInstanceRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 324 };

	MsgGuildEnterInstanceRequest() :
		Message(Category, Id)
	{
		event_id = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildEnterInstanceRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << event_id;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> event_id;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "event_id", event_id);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "event_id=" << event_id;
	}

public:
	int event_id; //活动ID 
};

class MsgGuildEnterInstanceResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 325 };

	MsgGuildEnterInstanceResponse() :
		Message(Category, Id)
	{
		event_id = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildEnterInstanceResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << event_id;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> event_id;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "event_id", event_id);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "event_id=" << event_id;
		buffer << ",errcode=" << errcode;
	}

public:
	int event_id; //活动ID 
	short errcode; //错误码 
};

class MsgGuildSetAutoAddLevelRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 352 };

	MsgGuildSetAutoAddLevelRequest() :
		Message(Category, Id)
	{
		level = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildSetAutoAddLevelRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << level;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> level;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "level", level);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "level=" << level;
	}

public:
	short level; //最低等级 
};

class MsgGuildSetAutoAddLevelResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 353 };

	MsgGuildSetAutoAddLevelResponse() :
		Message(Category, Id)
	{
		level = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildSetAutoAddLevelResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << level;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> level;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "level=" << level;
		buffer << ",errcode=" << errcode;
	}

public:
	short level; //最低等级 
	short errcode; //错误码 
};

class MsgGuildRecommendNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 354 };

	MsgGuildRecommendNotify() :
		Message(Category, Id)
	{
		guild_id1 = 0;
		master_class1 = 0;
		master_gender1 = 0;
		guild_id2 = 0;
		master_class2 = 0;
		master_gender2 = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildRecommendNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 24;
		length += sizeof(short) + guild_name1.size();
		length += sizeof(short) + guild_name2.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << guild_id1;
		s << guild_name1;
		s << master_class1;
		s << master_gender1;
		s << guild_id2;
		s << guild_name2;
		s << master_class2;
		s << master_gender2;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> guild_id1;
		s >> guild_name1;
		s >> master_class1;
		s >> master_gender1;
		s >> guild_id2;
		s >> guild_name2;
		s >> master_class2;
		s >> master_gender2;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "guild_id1", guild_id1);
		lua::settable(L, -1, "guild_name1", guild_name1);
		lua::settable(L, -1, "master_class1", master_class1);
		lua::settable(L, -1, "master_gender1", master_gender1);
		lua::settable(L, -1, "guild_id2", guild_id2);
		lua::settable(L, -1, "guild_name2", guild_name2);
		lua::settable(L, -1, "master_class2", master_class2);
		lua::settable(L, -1, "master_gender2", master_gender2);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "guild_id1=" << guild_id1;
		buffer << ",guild_name1=" << guild_name1;
		buffer << ",master_class1=" << master_class1;
		buffer << ",master_gender1=" << master_gender1;
		buffer << ",guild_id2=" << guild_id2;
		buffer << ",guild_name2=" << guild_name2;
		buffer << ",master_class2=" << master_class2;
		buffer << ",master_gender2=" << master_gender2;
	}

public:
	int guild_id1; //行会ID1 
	std::string guild_name1; //行会名称1 
	int master_class1; //会长职业1 
	int master_gender1; //会长性别1 
	int guild_id2; //行会ID2 
	std::string guild_name2; //行会名称2 
	int master_class2; //会长职业2 
	int master_gender2; //会长性别2 
};

class MsgGuildCreateTeamRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 359 };

	MsgGuildCreateTeamRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildCreateTeamRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgGuildCreateTeamResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 360 };

	MsgGuildCreateTeamResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildCreateTeamResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode; //错误码 
};

struct teaminfo
{
public:
	teaminfo()
	{
		teamid = 0;
		status = 0;
		count = 0;
		pid = 0;
		level = 0;
		gender = 0;
		job = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 24;
		length += sizeof(short) + name.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << teamid;
		s << status;
		s << count;
		s << pid;
		s << level;
		s << gender;
		s << job;
		s << name;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> teamid;
		s >> status;
		s >> count;
		s >> pid;
		s >> level;
		s >> gender;
		s >> job;
		s >> name;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "teamid", teamid);
		lua::settable(L, -1, "status", status);
		lua::settable(L, -1, "count", count);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "job", job);
		lua::settable(L, -1, "name", name);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "teamid=" << teamid;
		buffer << ",status=" << status;
		buffer << ",count=" << count;
		buffer << ",pid=" << pid;
		buffer << ",level=" << level;
		buffer << ",gender=" << gender;
		buffer << ",job=" << job;
		buffer << ",name=" << name;
	}

public:
	int teamid; //队伍ID 
	int status; //队伍状态 
	int count; //队伍人数 
	int pid; //队长PID 
	int level; //队长等级 
	short gender; //队长性别 
	short job; //队长职业 
	std::string name; //队长名字 
};

class MsgGuildTeamListNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 361 };

	MsgGuildTeamListNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildTeamListNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < TeamList.size(); ++i)
		{
			length += TeamList[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short TeamList_vector_size = (short)TeamList.size();
		s << TeamList_vector_size;
		if (TeamList_vector_size > 0)
		{
			for (auto it = TeamList.begin(); it != TeamList.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int TeamList_vector_size = s.read_int16();
		TeamList.clear();
		while (TeamList_vector_size > 0)
		{
			TeamList_vector_size--;
			teaminfo val;
			val.unserialize(s, false);
			TeamList.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < TeamList.size(); ++i)
		{
			TeamList[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "TeamList");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "TeamList=[";
		for (size_t i = 0; i < TeamList.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			TeamList[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<teaminfo> TeamList; //队伍列表 
};

class MsgGuildAddTeamNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 362 };

	MsgGuildAddTeamNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildAddTeamNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += TeamInfo.getLength(false);
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		TeamInfo.serialize(s, false);
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		TeamInfo.unserialize(s, false);
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		TeamInfo.push(L);
		lua::settable(L, -1, "TeamInfo");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "TeamInfo={";
		TeamInfo.dump(buffer);
		buffer << "}";
	}

public:
	teaminfo TeamInfo; //队伍信息 
};

class MsgGuildJoinTeamRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 363 };

	MsgGuildJoinTeamRequest() :
		Message(Category, Id)
	{
		teamid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildJoinTeamRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << teamid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> teamid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "teamid", teamid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "teamid=" << teamid;
	}

public:
	int teamid; //队伍ID 
};

class MsgGuildJoinTeamResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 364 };

	MsgGuildJoinTeamResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildJoinTeamResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode; //错误码 
};

class MsgGuildDeleteTeamNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 365 };

	MsgGuildDeleteTeamNotify() :
		Message(Category, Id)
	{
		teamid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildDeleteTeamNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << teamid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> teamid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "teamid", teamid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "teamid=" << teamid;
	}

public:
	int teamid; //队伍ID 
};

class MsgGuildUpdateTeamNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 366 };

	MsgGuildUpdateTeamNotify() :
		Message(Category, Id)
	{
		teamid = 0;
		count = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildUpdateTeamNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << teamid;
		s << count;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> teamid;
		s >> count;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "teamid", teamid);
		lua::settable(L, -1, "count", count);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "teamid=" << teamid;
		buffer << ",count=" << count;
	}

public:
	int teamid; //队伍ID 
	int count; //队伍人数 
};

class MsgGuildSearchTeamRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 375 };

	MsgGuildSearchTeamRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildSearchTeamRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgGuildSearchTeamResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 376 };

	MsgGuildSearchTeamResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildSearchTeamResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode; //错误码 
};

class MsgGuildStartAddMonRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 377 };

	MsgGuildStartAddMonRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildStartAddMonRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgGuildStartAddMonResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 378 };

	MsgGuildStartAddMonResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildStartAddMonResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode; //错误码 
};

class MsgGuildExitTeamRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 379 };

	MsgGuildExitTeamRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildExitTeamRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgGuildExitTeamResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 380 };

	MsgGuildExitTeamResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildExitTeamResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode; //错误码 
};

class MsgGuildGetExpRewardRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 381 };

	MsgGuildGetExpRewardRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildGetExpRewardRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgGuildGetExpRewardResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 382 };

	MsgGuildGetExpRewardResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildGetExpRewardResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode; //错误码 
};

class MsgGuildTeamStatusNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 383 };

	MsgGuildTeamStatusNotify() :
		Message(Category, Id)
	{
		teamid = 0;
		status = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildTeamStatusNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << teamid;
		s << status;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> teamid;
		s >> status;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "teamid", teamid);
		lua::settable(L, -1, "status", status);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "teamid=" << teamid;
		buffer << ",status=" << status;
	}

public:
	int teamid; //队伍ID 
	int status; //队伍状态 
};

class MsgGuildSendTeamChatRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 384 };

	MsgGuildSendTeamChatRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildSendTeamChatRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgGuildSendTeamChatResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 385 };

	MsgGuildSendTeamChatResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildSendTeamChatResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode; //错误码 
};

class MsgGuildBagForgeRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 386 };

	MsgGuildBagForgeRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildBagForgeRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgGuildBagForgeResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 387 };

	MsgGuildBagForgeResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildBagForgeResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode; //错误码 
};

struct Gather
{
public:
	Gather()
	{
		pid = 0;
		point = 0;
		sumkill = 0;
		level = 0;
		rebron = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 20;
		length += sizeof(short) + name.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << pid;
		s << point;
		s << sumkill;
		s << level;
		s << rebron;
		s << name;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> pid;
		s >> point;
		s >> sumkill;
		s >> level;
		s >> rebron;
		s >> name;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "point", point);
		lua::settable(L, -1, "sumkill", sumkill);
		lua::settable(L, -1, "level", level);
		lua::settable(L, -1, "rebron", rebron);
		lua::settable(L, -1, "name", name);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",point=" << point;
		buffer << ",sumkill=" << sumkill;
		buffer << ",level=" << level;
		buffer << ",rebron=" << rebron;
		buffer << ",name=" << name;
	}

public:
	int pid;
	int point;
	int sumkill;
	int level;
	int rebron;
	std::string name;
};

class MsgGuildGatherListNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 388 };

	MsgGuildGatherListNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildGatherListNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < GatherList.size(); ++i)
		{
			length += GatherList[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short GatherList_vector_size = (short)GatherList.size();
		s << GatherList_vector_size;
		if (GatherList_vector_size > 0)
		{
			for (auto it = GatherList.begin(); it != GatherList.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int GatherList_vector_size = s.read_int16();
		GatherList.clear();
		while (GatherList_vector_size > 0)
		{
			GatherList_vector_size--;
			Gather val;
			val.unserialize(s, false);
			GatherList.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < GatherList.size(); ++i)
		{
			GatherList[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "GatherList");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "GatherList=[";
		for (size_t i = 0; i < GatherList.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			GatherList[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<Gather> GatherList;
};

class MsgGuildGatherKillNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 389 };

	MsgGuildGatherKillNotify() :
		Message(Category, Id)
	{
		pid = 0;
		job = 0;
		gender = 0;
		isdead = 0;
		tpid = 0;
		tjob = 0;
		tgender = 0;
		killNum = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildGatherKillNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 32;
		length += sizeof(short) + name.size();
		length += sizeof(short) + tname.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << job;
		s << gender;
		s << isdead;
		s << tpid;
		s << tjob;
		s << tgender;
		s << killNum;
		s << name;
		s << tname;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> job;
		s >> gender;
		s >> isdead;
		s >> tpid;
		s >> tjob;
		s >> tgender;
		s >> killNum;
		s >> name;
		s >> tname;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "job", job);
		lua::settable(L, -1, "gender", gender);
		lua::settable(L, -1, "isdead", isdead);
		lua::settable(L, -1, "tpid", tpid);
		lua::settable(L, -1, "tjob", tjob);
		lua::settable(L, -1, "tgender", tgender);
		lua::settable(L, -1, "killNum", killNum);
		lua::settable(L, -1, "name", name);
		lua::settable(L, -1, "tname", tname);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",job=" << job;
		buffer << ",gender=" << gender;
		buffer << ",isdead=" << isdead;
		buffer << ",tpid=" << tpid;
		buffer << ",tjob=" << tjob;
		buffer << ",tgender=" << tgender;
		buffer << ",killNum=" << killNum;
		buffer << ",name=" << name;
		buffer << ",tname=" << tname;
	}

public:
	int pid; //击杀者pid 
	int job; //击杀者职业 
	int gender; //击杀者性别 
	int isdead; //击杀者是否死过 
	int tpid; //被杀者pid 
	int tjob; //被杀者职业 
	int tgender; //被杀者性别 
	int killNum; //击杀数量 0是被终结 
	std::string name; //击杀者名字 
	std::string tname; //被杀者名字 
};

struct Balance
{
public:
	Balance()
	{
		sumpoint = 0;
		point = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 8;
		length += sizeof(short) + guildname.size();
		length += sizeof(short) + name.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << sumpoint;
		s << point;
		s << guildname;
		s << name;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> sumpoint;
		s >> point;
		s >> guildname;
		s >> name;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sumpoint", sumpoint);
		lua::settable(L, -1, "point", point);
		lua::settable(L, -1, "guildname", guildname);
		lua::settable(L, -1, "name", name);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "sumpoint=" << sumpoint;
		buffer << ",point=" << point;
		buffer << ",guildname=" << guildname;
		buffer << ",name=" << name;
	}

public:
	int sumpoint;
	int point;
	std::string guildname;
	std::string name;
};

class MsgGuildGatherBalanceNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 390 };

	MsgGuildGatherBalanceNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildGatherBalanceNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < balanceList.size(); ++i)
		{
			length += balanceList[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short balanceList_vector_size = (short)balanceList.size();
		s << balanceList_vector_size;
		if (balanceList_vector_size > 0)
		{
			for (auto it = balanceList.begin(); it != balanceList.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int balanceList_vector_size = s.read_int16();
		balanceList.clear();
		while (balanceList_vector_size > 0)
		{
			balanceList_vector_size--;
			Balance val;
			val.unserialize(s, false);
			balanceList.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < balanceList.size(); ++i)
		{
			balanceList[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "balanceList");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "balanceList=[";
		for (size_t i = 0; i < balanceList.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			balanceList[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<Balance> balanceList;
};

class MsgGuildCanGatherRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 391 };

	MsgGuildCanGatherRequest() :
		Message(Category, Id)
	{
		eid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildCanGatherRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eid", eid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eid=" << eid;
	}

public:
	int eid; //采集物的eid 
};

class MsgGuildCanGatherResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 392 };

	MsgGuildCanGatherResponse() :
		Message(Category, Id)
	{
		rep = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildCanGatherResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << rep;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> rep;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "rep", rep);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "rep=" << rep;
	}

public:
	int rep; //0可以采集 1不可以采集 2自己正在采集 
};

class MsgGuildQiFuRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 393 };

	MsgGuildQiFuRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildQiFuRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgGuildQiFuResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 394 };

	MsgGuildQiFuResponse() :
		Message(Category, Id)
	{
		result = 0;
		percent = 0;
		percentOld = 0;
		isQiFu = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildQiFuResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 16;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << result;
		s << percent;
		s << percentOld;
		s << isQiFu;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> result;
		s >> percent;
		s >> percentOld;
		s >> isQiFu;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "result", result);
		lua::settable(L, -1, "percent", percent);
		lua::settable(L, -1, "percentOld", percentOld);
		lua::settable(L, -1, "isQiFu", isQiFu);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "result=" << result;
		buffer << ",percent=" << percent;
		buffer << ",percentOld=" << percentOld;
		buffer << ",isQiFu=" << isQiFu;
	}

public:
	int result; //返回结果 
	int percent; //工会祈福进度百分比 
	int percentOld; //昨日工会祈福进度百分比 
	int isQiFu; //角色是否已祈福，1代表已祈福 
};

class MsgGuildQiFuStartRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 395 };

	MsgGuildQiFuStartRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildQiFuStartRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgGuildQiFuStartResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 396 };

	MsgGuildQiFuStartResponse() :
		Message(Category, Id)
	{
		result = 0;
		percent = 0;
		percentOld = 0;
		isQiFu = 0;
		bei = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildQiFuStartResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 20;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << result;
		s << percent;
		s << percentOld;
		s << isQiFu;
		s << bei;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> result;
		s >> percent;
		s >> percentOld;
		s >> isQiFu;
		s >> bei;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "result", result);
		lua::settable(L, -1, "percent", percent);
		lua::settable(L, -1, "percentOld", percentOld);
		lua::settable(L, -1, "isQiFu", isQiFu);
		lua::settable(L, -1, "bei", bei);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "result=" << result;
		buffer << ",percent=" << percent;
		buffer << ",percentOld=" << percentOld;
		buffer << ",isQiFu=" << isQiFu;
		buffer << ",bei=" << bei;
	}

public:
	int result; //返回结果 
	int percent; //工会祈福进度百分比 
	int percentOld; //昨日工会祈福进度百分比 
	int isQiFu; //角色是否已祈福，1代表已祈福 
	int bei; //暴击倍数 
};

class MsgGuildImpeachMasterRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 397 };

	MsgGuildImpeachMasterRequest() :
		Message(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildImpeachMasterRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
	}

public:
	int pid; //弹劾发起人 
};

class MsgGuildImpeachMasterResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 398 };

	MsgGuildImpeachMasterResponse() :
		Message(Category, Id)
	{
		pid = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildImpeachMasterResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",errcode=" << errcode;
	}

public:
	int pid; //弹劾发起人 
	short errcode; //错误码 
};

class MsgGuildImpeachVoteRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 399 };

	MsgGuildImpeachVoteRequest() :
		Message(Category, Id)
	{
		time = 0;
		vote = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildImpeachVoteRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << time;
		s << vote;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> time;
		s >> vote;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "time", time);
		lua::settable(L, -1, "vote", vote);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "time=" << time;
		buffer << ",vote=" << vote;
	}

public:
	int time; //弹劾发起时间 
	int vote; //0-反对弹劾, 其他-同意弹劾  
};

class MsgGuildImpeachVoteResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 400 };

	MsgGuildImpeachVoteResponse() :
		Message(Category, Id)
	{
		time = 0;
		vote = 0;
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildImpeachVoteResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 10;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << time;
		s << vote;
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> time;
		s >> vote;
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "time", time);
		lua::settable(L, -1, "vote", vote);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "time=" << time;
		buffer << ",vote=" << vote;
		buffer << ",errcode=" << errcode;
	}

public:
	int time; //弹劾发起时间 
	int vote; //0-反对弹劾, 其他-同意弹劾  
	short errcode; //错误码 
};

class MsgGuildBatchDeleteMemRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 401 };

	MsgGuildBatchDeleteMemRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildBatchDeleteMemRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		length += pids.size() * 4;
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short pids_vector_size = (short)pids.size();
		s << pids_vector_size;
		if (pids_vector_size > 0)
		{
			for (auto it = pids.begin(); it != pids.end(); ++it)
			{
				s << *it;
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int pids_vector_size = s.read_int16();
		pids.clear();
		while (pids_vector_size > 0)
		{
			pids_vector_size--;
			int val;
			s >> val;
			pids.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < pids.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, pids[i]);
		}
		lua::settable(L, -2, "pids");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pids=[";
		for (size_t i = 0; i < pids.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << pids[i];
		}
		buffer << "]";
	}

public:
	std::vector<int> pids; //角色pid数组 
};

class MsgGuildBatchDeleteMemResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 402 };

	MsgGuildBatchDeleteMemResponse() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGuildBatchDeleteMemResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		length += errcode.size() * 2;
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short errcode_vector_size = (short)errcode.size();
		s << errcode_vector_size;
		if (errcode_vector_size > 0)
		{
			for (auto it = errcode.begin(); it != errcode.end(); ++it)
			{
				s << *it;
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int errcode_vector_size = s.read_int16();
		errcode.clear();
		while (errcode_vector_size > 0)
		{
			errcode_vector_size--;
			short val;
			s >> val;
			errcode.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < errcode.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, errcode[i]);
		}
		lua::settable(L, -2, "errcode");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=[";
		for (size_t i = 0; i < errcode.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << errcode[i];
		}
		buffer << "]";
	}

public:
	std::vector<short> errcode; //错误码 
};

struct ShopItemInfo
{
public:
	ShopItemInfo()
	{
		sid = 0;
		sellCount = 0;
	}

	size_t getLength(bool ex) const
	{
		return 8;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << sid;
		s << sellCount;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> sid;
		s >> sellCount;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "sellCount", sellCount);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "sid=" << sid;
		buffer << ",sellCount=" << sellCount;
	}

public:
	int sid;
	int sellCount;
};

class MsgSyncGuildShopNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 403 };

	MsgSyncGuildShopNotify() :
		Message(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncGuildShopNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short);
		for (size_t i = 0; i < items.size(); ++i)
		{
			length += items[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		short items_vector_size = (short)items.size();
		s << items_vector_size;
		if (items_vector_size > 0)
		{
			for (auto it = items.begin(); it != items.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		int items_vector_size = s.read_int16();
		items.clear();
		while (items_vector_size > 0)
		{
			items_vector_size--;
			ShopItemInfo val;
			val.unserialize(s, false);
			items.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::newtable(lua::L);
		for (size_t i = 0; i < items.size(); ++i)
		{
			items[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "items");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",items=[";
		for (size_t i = 0; i < items.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			items[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int pid; //公会id 
	std::vector<ShopItemInfo> items; //公会商店物品 
};

class MsgGuildTechnologyUpLevelRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 404 };

	MsgGuildTechnologyUpLevelRequest() :
		Message(Category, Id)
	{
		type = 0;
		index = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildTechnologyUpLevelRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << type;
		s << index;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> type;
		s >> index;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
		lua::settable(L, -1, "index", index);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
		buffer << ",index=" << index;
	}

public:
	short type; //科技类型 
	short index; //技能index 
};

class MsgGuildTechnologyUpLevelResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 405 };

	MsgGuildTechnologyUpLevelResponse() :
		Message(Category, Id)
	{
		errcode = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGuildTechnologyUpLevelResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
	}

public:
	short errcode; //错误码 
};

struct GuishiItem
{
public:
	GuishiItem()
	{
		sid = 0;
		cid = 0;
	}

	size_t getLength(bool ex) const
	{
		return 8;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << sid;
		s << cid;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> sid;
		s >> cid;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "sid", sid);
		lua::settable(L, -1, "cid", cid);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "sid=" << sid;
		buffer << ",cid=" << cid;
	}

public:
	int sid;
	int cid;
};

class MsgSyncGuildGuishiItemsNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 406 };

	MsgSyncGuildGuishiItemsNotify() :
		Message(Category, Id)
	{
		gid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncGuildGuishiItemsNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short);
		for (size_t i = 0; i < items.size(); ++i)
		{
			length += items[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << gid;
		short items_vector_size = (short)items.size();
		s << items_vector_size;
		if (items_vector_size > 0)
		{
			for (auto it = items.begin(); it != items.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> gid;
		int items_vector_size = s.read_int16();
		items.clear();
		while (items_vector_size > 0)
		{
			items_vector_size--;
			GuishiItem val;
			val.unserialize(s, false);
			items.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "gid", gid);
		lua::newtable(lua::L);
		for (size_t i = 0; i < items.size(); ++i)
		{
			items[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "items");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "gid=" << gid;
		buffer << ",items=[";
		for (size_t i = 0; i < items.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			items[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int gid; //公会id 
	std::vector<GuishiItem> items; //公会商店物品 
};

class MsgDelGuildGuishiItemNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 407 };

	MsgDelGuildGuishiItemNotify() :
		Message(Category, Id)
	{
		cid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgDelGuildGuishiItemNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << cid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> cid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "cid", cid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "cid=" << cid;
	}

public:
	int cid; //物品id 
};

class MsgAddGuildGuishiItemNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_GUILD, Id = 408 };

	MsgAddGuildGuishiItemNotify() :
		Message(Category, Id)
	{
		gid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgAddGuildGuishiItemNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += items.getLength(false);
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << gid;
		items.serialize(s, false);
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> gid;
		items.unserialize(s, false);
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "gid", gid);
		items.push(L);
		lua::settable(L, -1, "items");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "gid=" << gid;
		buffer << ",items={";
		items.dump(buffer);
		buffer << "}";
	}

public:
	int gid; //公会id 
	GuishiItem items; //公会商店物品 
};

#endif	//_MSG_GUILD_H_INCLUDED
