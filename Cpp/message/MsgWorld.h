//
//Generated by lua
//2009-2012	(C) XianFeng Inc. Reserved
//

#ifndef _MSG_WORLD_H_INCLUDED
#define _MSG_WORLD_H_INCLUDED

#include "category.h"
#include "common/Message.h"

class MsgSyncWorldDataNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_WORLD, Id = 100 };

	MsgSyncWorldDataNotify() :
		Message(Category, Id)
	{
		wid = 0;
		datax = 0;
		datay = 0;
		dataz = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncWorldDataNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 16;
		length += sizeof(short) + datas.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << wid;
		s << datax;
		s << datay;
		s << dataz;
		s << datas;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> wid;
		s >> datax;
		s >> datay;
		s >> dataz;
		s >> datas;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "wid", wid);
		lua::settable(L, -1, "datax", datax);
		lua::settable(L, -1, "datay", datay);
		lua::settable(L, -1, "dataz", dataz);
		lua::settable(L, -1, "datas", datas);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "wid=" << wid;
		buffer << ",datax=" << datax;
		buffer << ",datay=" << datay;
		buffer << ",dataz=" << dataz;
		buffer << ",datas=" << datas;
	}

public:
	int wid;
	int datax;
	int datay;
	int dataz;
	std::string datas;
};

class MsgSyncWorldDataExNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_WORLD, Id = 101 };

	MsgSyncWorldDataExNotify() :
		Message(Category, Id)
	{
		wid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncWorldDataExNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short);
		length += data.size() * 4;
		length += sizeof(short);
		for (size_t i = 0; i < str.size(); ++i)
		{
			length += sizeof(short) + str[i].size();
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << wid;
		short data_vector_size = (short)data.size();
		s << data_vector_size;
		if (data_vector_size > 0)
		{
			for (auto it = data.begin(); it != data.end(); ++it)
			{
				s << *it;
			}
		}
		short str_vector_size = (short)str.size();
		s << str_vector_size;
		if (str_vector_size > 0)
		{
			for (auto it = str.begin(); it != str.end(); ++it)
			{
				s << *it;
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> wid;
		int data_vector_size = s.read_int16();
		data.clear();
		while (data_vector_size > 0)
		{
			data_vector_size--;
			int val;
			s >> val;
			data.push_back(val);
		}
		int str_vector_size = s.read_int16();
		str.clear();
		while (str_vector_size > 0)
		{
			str_vector_size--;
			std::string val;
			s >> val;
			str.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "wid", wid);
		lua::newtable(lua::L);
		for (size_t i = 0; i < data.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, data[i]);
		}
		lua::settable(L, -2, "data");
		lua::newtable(lua::L);
		for (size_t i = 0; i < str.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, str[i]);
		}
		lua::settable(L, -2, "str");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "wid=" << wid;
		buffer << ",data=[";
		for (size_t i = 0; i < data.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << data[i];
		}
		buffer << "]";
		buffer << ",str=[";
		for (size_t i = 0; i < str.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << str[i];
		}
		buffer << "]";
	}

public:
	int wid;
	std::vector<int> data;
	std::vector<std::string> str;
};

class MsgSyncWorldDataStringRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_WORLD, Id = 102 };

	MsgSyncWorldDataStringRequest() :
		Message(Category, Id)
	{
		wid = 0;
		version = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncWorldDataStringRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << wid;
		s << version;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> wid;
		s >> version;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "wid", wid);
		lua::settable(L, -1, "version", version);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "wid=" << wid;
		buffer << ",version=" << version;
	}

public:
	int wid;
	short version;
};

class MsgSyncWorldDataStringResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_WORLD, Id = 103 };

	MsgSyncWorldDataStringResponse() :
		Message(Category, Id)
	{
		wid = 0;
		version = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncWorldDataStringResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 6;
		length += sizeof(short) + datas.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << wid;
		s << version;
		s << datas;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> wid;
		s >> version;
		s >> datas;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "wid", wid);
		lua::settable(L, -1, "version", version);
		lua::settable(L, -1, "datas", datas);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "wid=" << wid;
		buffer << ",version=" << version;
		buffer << ",datas=" << datas;
	}

public:
	int wid;
	short version;
	std::string datas;
};

class MsgSyncWorldDataRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_WORLD, Id = 104 };

	MsgSyncWorldDataRequest() :
		Message(Category, Id)
	{
		wid = 0;
		version = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncWorldDataRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 6;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << wid;
		s << version;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> wid;
		s >> version;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "wid", wid);
		lua::settable(L, -1, "version", version);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "wid=" << wid;
		buffer << ",version=" << version;
	}

public:
	int wid;
	short version;
};

class MsgSyncWorldDataResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_WORLD, Id = 105 };

	MsgSyncWorldDataResponse() :
		Message(Category, Id)
	{
		wid = 0;
		version = 0;
		datax = 0;
		datay = 0;
		dataz = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncWorldDataResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 18;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << wid;
		s << version;
		s << datax;
		s << datay;
		s << dataz;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> wid;
		s >> version;
		s >> datax;
		s >> datay;
		s >> dataz;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "wid", wid);
		lua::settable(L, -1, "version", version);
		lua::settable(L, -1, "datax", datax);
		lua::settable(L, -1, "datay", datay);
		lua::settable(L, -1, "dataz", dataz);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "wid=" << wid;
		buffer << ",version=" << version;
		buffer << ",datax=" << datax;
		buffer << ",datay=" << datay;
		buffer << ",dataz=" << dataz;
	}

public:
	int wid;
	short version;
	int datax;
	int datay;
	int dataz;
};

class MsgSyncFloatNoticeNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_WORLD, Id = 110 };

	MsgSyncFloatNoticeNotify() :
		Message(Category, Id)
	{
		showflag = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncFloatNoticeNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 4;
		length += sizeof(short) + basestring.size();
		length += sizeof(short) + TouchID.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << basestring;
		s << showflag;
		s << TouchID;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> basestring;
		s >> showflag;
		s >> TouchID;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "basestring", basestring);
		lua::settable(L, -1, "showflag", showflag);
		lua::settable(L, -1, "TouchID", TouchID);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "basestring=" << basestring;
		buffer << ",showflag=" << showflag;
		buffer << ",TouchID=" << TouchID;
	}

public:
	std::string basestring;
	int showflag;
	std::string TouchID;
};

struct BossData
{
public:
	BossData()
	{
		eventid = 0;
		bossid = 0;
		bossexp = 0;
		bossstate = 0;
		killpid = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 18;
		length += sizeof(short) + killname.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << eventid;
		s << bossid;
		s << bossexp;
		s << bossstate;
		s << killpid;
		s << killname;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> eventid;
		s >> bossid;
		s >> bossexp;
		s >> bossstate;
		s >> killpid;
		s >> killname;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eventid", eventid);
		lua::settable(L, -1, "bossid", bossid);
		lua::settable(L, -1, "bossexp", bossexp);
		lua::settable(L, -1, "bossstate", bossstate);
		lua::settable(L, -1, "killpid", killpid);
		lua::settable(L, -1, "killname", killname);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "eventid=" << eventid;
		buffer << ",bossid=" << bossid;
		buffer << ",bossexp=" << bossexp;
		buffer << ",bossstate=" << bossstate;
		buffer << ",killpid=" << killpid;
		buffer << ",killname=" << killname;
	}

public:
	int eventid;
	int bossid;
	int bossexp;
	short bossstate;
	int killpid;
	std::string killname;
};

class MsgSyncWorldBossNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_WORLD, Id = 120 };

	MsgSyncWorldBossNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgSyncWorldBossNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < Bosses.size(); ++i)
		{
			length += Bosses[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short Bosses_vector_size = (short)Bosses.size();
		s << Bosses_vector_size;
		if (Bosses_vector_size > 0)
		{
			for (auto it = Bosses.begin(); it != Bosses.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int Bosses_vector_size = s.read_int16();
		Bosses.clear();
		while (Bosses_vector_size > 0)
		{
			Bosses_vector_size--;
			BossData val;
			val.unserialize(s, false);
			Bosses.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < Bosses.size(); ++i)
		{
			Bosses[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "Bosses");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "Bosses=[";
		for (size_t i = 0; i < Bosses.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			Bosses[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<BossData> Bosses;
};

struct ChartIntData
{
public:
	ChartIntData()
	{
		idx = 0;
		data = 0;
	}

	size_t getLength(bool ex) const
	{
		return 6;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << idx;
		s << data;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> idx;
		s >> data;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "idx", idx);
		lua::settable(L, -1, "data", data);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "idx=" << idx;
		buffer << ",data=" << data;
	}

public:
	short idx;
	int data;
};

struct ChartStrData
{
public:
	ChartStrData()
	{
		idx = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 2;
		length += sizeof(short) + data.size();
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << idx;
		s << data;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> idx;
		s >> data;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "idx", idx);
		lua::settable(L, -1, "data", data);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "idx=" << idx;
		buffer << ",data=" << data;
	}

public:
	short idx;
	std::string data;
};

struct ChartElem
{
public:
	ChartElem()
	{
		id = 0;
	}

	size_t getLength(bool ex) const
	{
		size_t length = 4;
		length += ex ? sizeof(int) : sizeof(short);
		for (size_t i = 0; i < nums.size(); ++i)
		{
			length += nums[i].getLength(ex);
		}
		length += ex ? sizeof(int) : sizeof(short);
		for (size_t i = 0; i < strs.size(); ++i)
		{
			length += strs[i].getLength(ex);
		}
		return length;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << id;
		int nums_vector_size = ex ? (int)nums.size() : (short)nums.size();
		if (ex)
		{
			s << nums_vector_size;
		}
		else
		{
			s << (short)nums_vector_size;
		}
		if (nums_vector_size > 0)
		{
			for (auto it = nums.begin(); it != nums.end(); ++it)
			{
				(*it).serialize(s, ex);
			}
		}
		int strs_vector_size = ex ? (int)strs.size() : (short)strs.size();
		if (ex)
		{
			s << strs_vector_size;
		}
		else
		{
			s << (short)strs_vector_size;
		}
		if (strs_vector_size > 0)
		{
			for (auto it = strs.begin(); it != strs.end(); ++it)
			{
				(*it).serialize(s, ex);
			}
		}
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> id;
		int nums_vector_size = ex ? s.read_int32() : s.read_int16();
		nums.clear();
		while (nums_vector_size > 0)
		{
			nums_vector_size--;
			ChartIntData val;
			val.unserialize(s, ex);
			nums.push_back(val);
		}
		int strs_vector_size = ex ? s.read_int32() : s.read_int16();
		strs.clear();
		while (strs_vector_size > 0)
		{
			strs_vector_size--;
			ChartStrData val;
			val.unserialize(s, ex);
			strs.push_back(val);
		}
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::newtable(lua::L);
		for (size_t i = 0; i < nums.size(); ++i)
		{
			nums[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "nums");
		lua::newtable(lua::L);
		for (size_t i = 0; i < strs.size(); ++i)
		{
			strs[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "strs");
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",nums=[";
		for (size_t i = 0; i < nums.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			nums[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
		buffer << ",strs=[";
		for (size_t i = 0; i < strs.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			strs[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	int id;
	std::vector<ChartIntData> nums;
	std::vector<ChartStrData> strs;
};

class MsgGetWorldChartResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_WORLD, Id = 131 };

	MsgGetWorldChartResponse() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgGetWorldChartResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgGetWorldChartNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_WORLD, Id = 132 };

	MsgGetWorldChartNotify() :
		Message(Category, Id)
	{
		charttype = 0;
		version = 0;
		posttimes = 0;
		selfrank = 0;
	}

	virtual const char *getName() const
	{
		return "MsgGetWorldChartNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 10;
		length += sizeof(short);
		for (size_t i = 0; i < charts.size(); ++i)
		{
			length += charts[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << charttype;
		short charts_vector_size = (short)charts.size();
		s << charts_vector_size;
		if (charts_vector_size > 0)
		{
			for (auto it = charts.begin(); it != charts.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		s << version;
		s << posttimes;
		s << selfrank;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> charttype;
		int charts_vector_size = s.read_int16();
		charts.clear();
		while (charts_vector_size > 0)
		{
			charts_vector_size--;
			ChartElem val;
			val.unserialize(s, false);
			charts.push_back(val);
		}
		s >> version;
		s >> posttimes;
		s >> selfrank;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "charttype", charttype);
		lua::newtable(lua::L);
		for (size_t i = 0; i < charts.size(); ++i)
		{
			charts[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "charts");
		lua::settable(L, -1, "version", version);
		lua::settable(L, -1, "posttimes", posttimes);
		lua::settable(L, -1, "selfrank", selfrank);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "charttype=" << charttype;
		buffer << ",charts=[";
		for (size_t i = 0; i < charts.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			charts[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
		buffer << ",version=" << version;
		buffer << ",posttimes=" << posttimes;
		buffer << ",selfrank=" << selfrank;
	}

public:
	short charttype;
	std::vector<ChartElem> charts;
	int version;
	short posttimes;
	short selfrank;
};

class MsgSyncWorldBeginTimeNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_WORLD, Id = 140 };

	MsgSyncWorldBeginTimeNotify() :
		Message(Category, Id)
	{
		Begintime = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncWorldBeginTimeNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << Begintime;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> Begintime;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "Begintime", Begintime);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "Begintime=" << Begintime;
	}

public:
	int Begintime;
};

class MsgSyncServerDaysNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_WORLD, Id = 141 };

	MsgSyncServerDaysNotify() :
		Message(Category, Id)
	{
		server_days = 0;
		hefu_days = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncServerDaysNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << server_days;
		s << hefu_days;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> server_days;
		s >> hefu_days;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "server_days", server_days);
		lua::settable(L, -1, "hefu_days", hefu_days);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "server_days=" << server_days;
		buffer << ",hefu_days=" << hefu_days;
	}

public:
	int server_days;
	int hefu_days;
};

class MsgSyncServerTimeNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_WORLD, Id = 142 };

	MsgSyncServerTimeNotify() :
		Message(Category, Id)
	{
		time = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncServerTimeNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << time;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> time;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "time", time);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "time=" << time;
	}

public:
	int time;
};

class MsgSyncCrossServerDaysNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_WORLD, Id = 153 };

	MsgSyncCrossServerDaysNotify() :
		Message(Category, Id)
	{
		server_days = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncCrossServerDaysNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << server_days;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> server_days;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "server_days", server_days);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "server_days=" << server_days;
	}

public:
	int server_days;
};

class MsgAddArenaRewardNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_WORLD, Id = 300 };

	MsgAddArenaRewardNotify() :
		Message(Category, Id)
	{
		pid = 0;
		rank = 0;
		endtime = 0;
		type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgAddArenaRewardNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 14;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << rank;
		s << endtime;
		s << type;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> rank;
		s >> endtime;
		s >> type;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "rank", rank);
		lua::settable(L, -1, "endtime", endtime);
		lua::settable(L, -1, "type", type);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",rank=" << rank;
		buffer << ",endtime=" << endtime;
		buffer << ",type=" << type;
	}

public:
	int pid;
	int rank;
	int endtime;
	short type;
};

class MsgAddGiftDataNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_WORLD, Id = 301 };

	MsgAddGiftDataNotify() :
		Message(Category, Id)
	{
		pid = 0;
		gifttype = 0;
		data = 0;
		endtime = 0;
	}

	virtual const char *getName() const
	{
		return "MsgAddGiftDataNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 16;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		s << gifttype;
		s << data;
		s << endtime;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		s >> gifttype;
		s >> data;
		s >> endtime;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
		lua::settable(L, -1, "gifttype", gifttype);
		lua::settable(L, -1, "data", data);
		lua::settable(L, -1, "endtime", endtime);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
		buffer << ",gifttype=" << gifttype;
		buffer << ",data=" << data;
		buffer << ",endtime=" << endtime;
	}

public:
	int pid;
	int gifttype;
	int data;
	int endtime;
};

class MsgSyncSwitchNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_WORLD, Id = 302 };

	MsgSyncSwitchNotify() :
		Message(Category, Id)
	{
		id = 0;
		sub_id = 0;
		disabled = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncSwitchNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 9;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << id;
		s << sub_id;
		s << disabled;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> id;
		s >> sub_id;
		s >> disabled;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "sub_id", sub_id);
		lua::settable(L, -1, "disabled", disabled);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "id=" << id;
		buffer << ",sub_id=" << sub_id;
		buffer << ",disabled=" << disabled;
	}

public:
	int id;
	int sub_id;
	char disabled;
};

class MsgAddSensitiveWordNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_WORLD, Id = 303 };

	MsgAddSensitiveWordNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgAddSensitiveWordNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < words.size(); ++i)
		{
			length += sizeof(short) + words[i].size();
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short words_vector_size = (short)words.size();
		s << words_vector_size;
		if (words_vector_size > 0)
		{
			for (auto it = words.begin(); it != words.end(); ++it)
			{
				s << *it;
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int words_vector_size = s.read_int16();
		words.clear();
		while (words_vector_size > 0)
		{
			words_vector_size--;
			std::string val;
			s >> val;
			words.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < words.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, words[i]);
		}
		lua::settable(L, -2, "words");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "words=[";
		for (size_t i = 0; i < words.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << words[i];
		}
		buffer << "]";
	}

public:
	std::vector<std::string> words;
};

class MsgDelSensitiveWordNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_WORLD, Id = 304 };

	MsgDelSensitiveWordNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgDelSensitiveWordNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < words.size(); ++i)
		{
			length += sizeof(short) + words[i].size();
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short words_vector_size = (short)words.size();
		s << words_vector_size;
		if (words_vector_size > 0)
		{
			for (auto it = words.begin(); it != words.end(); ++it)
			{
				s << *it;
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int words_vector_size = s.read_int16();
		words.clear();
		while (words_vector_size > 0)
		{
			words_vector_size--;
			std::string val;
			s >> val;
			words.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < words.size(); ++i)
		{
			lua::settable(L, -1, (int)i+1, words[i]);
		}
		lua::settable(L, -2, "words");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "words=[";
		for (size_t i = 0; i < words.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << words[i];
		}
		buffer << "]";
	}

public:
	std::vector<std::string> words;
};

struct ChannelPropData
{
public:
	ChannelPropData()
	{
		cid = 0;
		id = 0;
		val = 0;
	}

	size_t getLength(bool ex) const
	{
		return 12;
	}

	bool serialize(ByteStream &s, bool ex) const
	{
		s << cid;
		s << id;
		s << val;
		return true;
	}

	bool unserialize(ByteStream &s, bool ex)
	{
		s >> cid;
		s >> id;
		s >> val;
		return true;
	}

	void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "cid", cid);
		lua::settable(L, -1, "id", id);
		lua::settable(L, -1, "val", val);
	}

	void dump(DumpBuffer &buffer)
	{
		buffer << "cid=" << cid;
		buffer << ",id=" << id;
		buffer << ",val=" << val;
	}

public:
	int cid; //渠道ID 
	int id; //属性ID 
	int val; //属性值 
};

class MsgSyncChannelPropsNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_WORLD, Id = 305 };

	MsgSyncChannelPropsNotify() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgSyncChannelPropsNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 0;
		length += sizeof(short);
		for (size_t i = 0; i < props.size(); ++i)
		{
			length += props[i].getLength(false);
		}
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		short props_vector_size = (short)props.size();
		s << props_vector_size;
		if (props_vector_size > 0)
		{
			for (auto it = props.begin(); it != props.end(); ++it)
			{
				(*it).serialize(s, false);
			}
		}
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		int props_vector_size = s.read_int16();
		props.clear();
		while (props_vector_size > 0)
		{
			props_vector_size--;
			ChannelPropData val;
			val.unserialize(s, false);
			props.push_back(val);
		}
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::newtable(lua::L);
		for (size_t i = 0; i < props.size(); ++i)
		{
			props[i].push(L);
			lua::push(L, (int)i+1);
			lua::settable(L, -1);
		}
		lua::settable(L, -2, "props");
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "props=[";
		for (size_t i = 0; i < props.size(); ++i)
		{
			buffer << ((i == 0) ? "" : ",") << "{";
			props[i].dump(buffer);
			buffer << "}";
		}
		buffer << "]";
	}

public:
	std::vector<ChannelPropData> props;
};

class MsgSyncHefuDateNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_WORLD, Id = 143 };

	MsgSyncHefuDateNotify() :
		Message(Category, Id)
	{
		hefu_date = 0;
		hefu_time = 0;
		hfhd_enabled = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncHefuDateNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 12;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << hefu_date;
		s << hefu_time;
		s << hfhd_enabled;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> hefu_date;
		s >> hefu_time;
		s >> hfhd_enabled;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "hefu_date", hefu_date);
		lua::settable(L, -1, "hefu_time", hefu_time);
		lua::settable(L, -1, "hfhd_enabled", hfhd_enabled);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "hefu_date=" << hefu_date;
		buffer << ",hefu_time=" << hefu_time;
		buffer << ",hfhd_enabled=" << hfhd_enabled;
	}

public:
	int hefu_date;
	int hefu_time;
	int hfhd_enabled;
};

class MsgOperatingGroupRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_WORLD, Id = 144 };

	MsgOperatingGroupRequest() :
		Message(Category, Id)
	{
		type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgOperatingGroupRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << type;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> type;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "type", type);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "type=" << type;
	}

public:
	short type;
};

class MsgOperatingGroupResponse : public Message
{
public:
	enum { Category = MSG_CATEGORY_WORLD, Id = 145 };

	MsgOperatingGroupResponse() :
		Message(Category, Id)
	{
		errcode = 0;
		type = 0;
	}

	virtual const char *getName() const
	{
		return "MsgOperatingGroupResponse";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << errcode;
		s << type;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> errcode;
		s >> type;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "errcode", errcode);
		lua::settable(L, -1, "type", type);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "errcode=" << errcode;
		buffer << ",type=" << type;
	}

public:
	short errcode;
	short type;
};

class MsgSyncWorldBossFreshPower : public Message
{
public:
	enum { Category = MSG_CATEGORY_WORLD, Id = 146 };

	MsgSyncWorldBossFreshPower() :
		Message(Category, Id)
	{
		power = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncWorldBossFreshPower";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 2;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << power;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> power;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "power", power);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "power=" << power;
	}

public:
	short power;
};

class MsgSyncDiamondRecoverRequest : public Message
{
public:
	enum { Category = MSG_CATEGORY_WORLD, Id = 147 };

	MsgSyncDiamondRecoverRequest() :
		Message(Category, Id)
	{
	}

	virtual const char *getName() const
	{
		return "MsgSyncDiamondRecoverRequest";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 0;
	}

	virtual bool serialize(ByteStream &s) const
	{
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
	}

	virtual void dump(DumpBuffer &buffer)
	{
	}

public:
};

class MsgSyncSystemAnnouncement : public Message
{
public:
	enum { Category = MSG_CATEGORY_WORLD, Id = 148 };

	MsgSyncSystemAnnouncement() :
		Message(Category, Id)
	{
		ItemSid = 0;
		showflag = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncSystemAnnouncement";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		size_t length = 8;
		length += sizeof(short) + basestring.size();
		length += sizeof(short) + TouchID.size();
		return length;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << basestring;
		s << TouchID;
		s << ItemSid;
		s << showflag;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> basestring;
		s >> TouchID;
		s >> ItemSid;
		s >> showflag;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "basestring", basestring);
		lua::settable(L, -1, "TouchID", TouchID);
		lua::settable(L, -1, "ItemSid", ItemSid);
		lua::settable(L, -1, "showflag", showflag);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "basestring=" << basestring;
		buffer << ",TouchID=" << TouchID;
		buffer << ",ItemSid=" << ItemSid;
		buffer << ",showflag=" << showflag;
	}

public:
	std::string basestring;
	std::string TouchID;
	int ItemSid;
	int showflag;
};

class MsgRemoveChatNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_WORLD, Id = 151 };

	MsgRemoveChatNotify() :
		Message(Category, Id)
	{
		pid = 0;
	}

	virtual const char *getName() const
	{
		return "MsgRemoveChatNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 4;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << pid;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> pid;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "pid", pid);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "pid=" << pid;
	}

public:
	int pid;
};

class MsgSyncEventStateNotify : public Message
{
public:
	enum { Category = MSG_CATEGORY_WORLD, Id = 152 };

	MsgSyncEventStateNotify() :
		Message(Category, Id)
	{
		eventtimeid = 0;
		eventstate = 0;
	}

	virtual const char *getName() const
	{
		return "MsgSyncEventStateNotify";
	}

	virtual bool canSendToCrossFromClient() const
	{
		return false;
	}

	virtual size_t getLength() const
	{
		return 8;
	}

	virtual bool serialize(ByteStream &s) const
	{
		s << eventtimeid;
		s << eventstate;
		return true;
	}

	virtual bool unserialize(ByteStream &s)
	{
		s >> eventtimeid;
		s >> eventstate;
		return true;
	}

	virtual void push(lua_State *L) const
	{
		lua::newtable(lua::L);
		lua::settable(L, -1, "eventtimeid", eventtimeid);
		lua::settable(L, -1, "eventstate", eventstate);
	}

	virtual void dump(DumpBuffer &buffer)
	{
		buffer << "eventtimeid=" << eventtimeid;
		buffer << ",eventstate=" << eventstate;
	}

public:
	int eventtimeid;
	int eventstate;
};

#endif	//_MSG_WORLD_H_INCLUDED
